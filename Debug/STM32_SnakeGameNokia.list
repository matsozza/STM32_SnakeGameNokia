
STM32_SnakeGameNokia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007718  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  080078a8  080078a8  000178a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a8c  08007a8c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007a8c  08007a8c  00017a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a94  08007a94  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a94  08007a94  00017a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a98  08007a98  00017a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00006750  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200067c4  200067c4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ca0d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003eb9  00000000  00000000  0003cab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001750  00000000  00000000  00040970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001588  00000000  00000000  000420c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025882  00000000  00000000  00043648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c6d3  00000000  00000000  00068eca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dae85  00000000  00000000  0008559d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00160422  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063d8  00000000  00000000  00160474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007890 	.word	0x08007890

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007890 	.word	0x08007890

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200041e4 	.word	0x200041e4

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b974 	b.w	8000574 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468e      	mov	lr, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14d      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d969      	bls.n	800038c <__udivmoddi4+0xe8>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b152      	cbz	r2, 80002d4 <__udivmoddi4+0x30>
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	f1c2 0120 	rsb	r1, r2, #32
 80002c6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ce:	ea41 0e03 	orr.w	lr, r1, r3
 80002d2:	4094      	lsls	r4, r2
 80002d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d8:	0c21      	lsrs	r1, r4, #16
 80002da:	fbbe f6f8 	udiv	r6, lr, r8
 80002de:	fa1f f78c 	uxth.w	r7, ip
 80002e2:	fb08 e316 	mls	r3, r8, r6, lr
 80002e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ea:	fb06 f107 	mul.w	r1, r6, r7
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002fa:	f080 811f 	bcs.w	800053c <__udivmoddi4+0x298>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 811c 	bls.w	800053c <__udivmoddi4+0x298>
 8000304:	3e02      	subs	r6, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000310:	fb08 3310 	mls	r3, r8, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x92>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	1be4      	subs	r4, r4, r7
 800033c:	2600      	movs	r6, #0
 800033e:	b11d      	cbz	r5, 8000348 <__udivmoddi4+0xa4>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c5 4300 	strd	r4, r3, [r5]
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0xc2>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80ef 	beq.w	8000536 <__udivmoddi4+0x292>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x160>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xd4>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80f9 	bhi.w	800056a <__udivmoddi4+0x2c6>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0303 	sbc.w	r3, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	469e      	mov	lr, r3
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e0      	beq.n	8000348 <__udivmoddi4+0xa4>
 8000386:	e9c5 4e00 	strd	r4, lr, [r5]
 800038a:	e7dd      	b.n	8000348 <__udivmoddi4+0xa4>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xec>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f282 	clz	r2, r2
 8000394:	2a00      	cmp	r2, #0
 8000396:	f040 8092 	bne.w	80004be <__udivmoddi4+0x21a>
 800039a:	eba1 010c 	sub.w	r1, r1, ip
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f fe8c 	uxth.w	lr, ip
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ae:	fb07 1113 	mls	r1, r7, r3, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb0e f003 	mul.w	r0, lr, r3
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x12c>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x12a>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f200 80cb 	bhi.w	8000564 <__udivmoddi4+0x2c0>
 80003ce:	4643      	mov	r3, r8
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d8:	fb07 1110 	mls	r1, r7, r0, r1
 80003dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e0:	fb0e fe00 	mul.w	lr, lr, r0
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x156>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x154>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2ca>
 80003f8:	4608      	mov	r0, r1
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	e79c      	b.n	800033e <__udivmoddi4+0x9a>
 8000404:	f1c6 0720 	rsb	r7, r6, #32
 8000408:	40b3      	lsls	r3, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f407 	lsr.w	r4, r0, r7
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	431c      	orrs	r4, r3
 800041c:	40f9      	lsrs	r1, r7
 800041e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000422:	fa00 f306 	lsl.w	r3, r0, r6
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	0c20      	lsrs	r0, r4, #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fb09 1118 	mls	r1, r9, r8, r1
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	fb08 f00e 	mul.w	r0, r8, lr
 800043c:	4288      	cmp	r0, r1
 800043e:	fa02 f206 	lsl.w	r2, r2, r6
 8000442:	d90b      	bls.n	800045c <__udivmoddi4+0x1b8>
 8000444:	eb1c 0101 	adds.w	r1, ip, r1
 8000448:	f108 3aff 	add.w	sl, r8, #4294967295
 800044c:	f080 8088 	bcs.w	8000560 <__udivmoddi4+0x2bc>
 8000450:	4288      	cmp	r0, r1
 8000452:	f240 8085 	bls.w	8000560 <__udivmoddi4+0x2bc>
 8000456:	f1a8 0802 	sub.w	r8, r8, #2
 800045a:	4461      	add	r1, ip
 800045c:	1a09      	subs	r1, r1, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb1 f0f9 	udiv	r0, r1, r9
 8000464:	fb09 1110 	mls	r1, r9, r0, r1
 8000468:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000470:	458e      	cmp	lr, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x1e2>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f100 34ff 	add.w	r4, r0, #4294967295
 800047c:	d26c      	bcs.n	8000558 <__udivmoddi4+0x2b4>
 800047e:	458e      	cmp	lr, r1
 8000480:	d96a      	bls.n	8000558 <__udivmoddi4+0x2b4>
 8000482:	3802      	subs	r0, #2
 8000484:	4461      	add	r1, ip
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	fba0 9402 	umull	r9, r4, r0, r2
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	42a1      	cmp	r1, r4
 8000494:	46c8      	mov	r8, r9
 8000496:	46a6      	mov	lr, r4
 8000498:	d356      	bcc.n	8000548 <__udivmoddi4+0x2a4>
 800049a:	d053      	beq.n	8000544 <__udivmoddi4+0x2a0>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x212>
 800049e:	ebb3 0208 	subs.w	r2, r3, r8
 80004a2:	eb61 010e 	sbc.w	r1, r1, lr
 80004a6:	fa01 f707 	lsl.w	r7, r1, r7
 80004aa:	fa22 f306 	lsr.w	r3, r2, r6
 80004ae:	40f1      	lsrs	r1, r6
 80004b0:	431f      	orrs	r7, r3
 80004b2:	e9c5 7100 	strd	r7, r1, [r5]
 80004b6:	2600      	movs	r6, #0
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	40d8      	lsrs	r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa21 f303 	lsr.w	r3, r1, r3
 80004cc:	4091      	lsls	r1, r2
 80004ce:	4301      	orrs	r1, r0
 80004d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004dc:	fb07 3610 	mls	r6, r7, r0, r3
 80004e0:	0c0b      	lsrs	r3, r1, #16
 80004e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e6:	fb00 f60e 	mul.w	r6, r0, lr
 80004ea:	429e      	cmp	r6, r3
 80004ec:	fa04 f402 	lsl.w	r4, r4, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x260>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fa:	d22f      	bcs.n	800055c <__udivmoddi4+0x2b8>
 80004fc:	429e      	cmp	r6, r3
 80004fe:	d92d      	bls.n	800055c <__udivmoddi4+0x2b8>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	b289      	uxth	r1, r1
 8000508:	fbb3 f6f7 	udiv	r6, r3, r7
 800050c:	fb07 3316 	mls	r3, r7, r6, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb06 f30e 	mul.w	r3, r6, lr
 8000518:	428b      	cmp	r3, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x28a>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f106 38ff 	add.w	r8, r6, #4294967295
 8000524:	d216      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 8000526:	428b      	cmp	r3, r1
 8000528:	d914      	bls.n	8000554 <__udivmoddi4+0x2b0>
 800052a:	3e02      	subs	r6, #2
 800052c:	4461      	add	r1, ip
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000534:	e738      	b.n	80003a8 <__udivmoddi4+0x104>
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e705      	b.n	8000348 <__udivmoddi4+0xa4>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e3      	b.n	8000308 <__udivmoddi4+0x64>
 8000540:	4618      	mov	r0, r3
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x92>
 8000544:	454b      	cmp	r3, r9
 8000546:	d2a9      	bcs.n	800049c <__udivmoddi4+0x1f8>
 8000548:	ebb9 0802 	subs.w	r8, r9, r2
 800054c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000550:	3801      	subs	r0, #1
 8000552:	e7a3      	b.n	800049c <__udivmoddi4+0x1f8>
 8000554:	4646      	mov	r6, r8
 8000556:	e7ea      	b.n	800052e <__udivmoddi4+0x28a>
 8000558:	4620      	mov	r0, r4
 800055a:	e794      	b.n	8000486 <__udivmoddi4+0x1e2>
 800055c:	4640      	mov	r0, r8
 800055e:	e7d1      	b.n	8000504 <__udivmoddi4+0x260>
 8000560:	46d0      	mov	r8, sl
 8000562:	e77b      	b.n	800045c <__udivmoddi4+0x1b8>
 8000564:	3b02      	subs	r3, #2
 8000566:	4461      	add	r1, ip
 8000568:	e732      	b.n	80003d0 <__udivmoddi4+0x12c>
 800056a:	4630      	mov	r0, r6
 800056c:	e709      	b.n	8000382 <__udivmoddi4+0xde>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x156>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	200000a0 	.word	0x200000a0
 80005a8:	2000015c 	.word	0x2000015c

080005ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b096      	sub	sp, #88	; 0x58
 80005b0:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of queueUSART2 */
  osMessageQDef(queueUSART2, 5, USART_message_t);
 80005b2:	4b22      	ldr	r3, [pc, #136]	; (800063c <MX_FREERTOS_Init+0x90>)
 80005b4:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80005b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  queueUSART2Handle = osMessageCreate(osMessageQ(queueUSART2), NULL);
 80005be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 fe85 	bl	80032d4 <osMessageCreate>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a1c      	ldr	r2, [pc, #112]	; (8000640 <MX_FREERTOS_Init+0x94>)
 80005ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  osPoolDef(mpool, 5, USART_message_t);
 80005d0:	4a1c      	ldr	r2, [pc, #112]	; (8000644 <MX_FREERTOS_Init+0x98>)
 80005d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80005d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  mpool = osPoolCreate(osPool(mpool));
 80005dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 fd77 	bl	80030d4 <osPoolCreate>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a17      	ldr	r2, [pc, #92]	; (8000648 <MX_FREERTOS_Init+0x9c>)
 80005ea:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task100ms */
  osThreadDef(task100ms, startTask100ms, osPriorityNormal, 0, 128);
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_FREERTOS_Init+0xa0>)
 80005ee:	f107 0420 	add.w	r4, r7, #32
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task100msHandle = osThreadCreate(osThread(task100ms), NULL);
 8000600:	f107 0320 	add.w	r3, r7, #32
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f002 fcfd 	bl	8003006 <osThreadCreate>
 800060c:	4603      	mov	r3, r0
 800060e:	4a10      	ldr	r2, [pc, #64]	; (8000650 <MX_FREERTOS_Init+0xa4>)
 8000610:	6013      	str	r3, [r2, #0]

  /* definition and creation of task500ms */
  osThreadDef(task500ms, startTask500ms, osPriorityAboveNormal, 0, 128);
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <MX_FREERTOS_Init+0xa8>)
 8000614:	1d3c      	adds	r4, r7, #4
 8000616:	461d      	mov	r5, r3
 8000618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000620:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task500msHandle = osThreadCreate(osThread(task500ms), NULL);
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f002 fcec 	bl	8003006 <osThreadCreate>
 800062e:	4603      	mov	r3, r0
 8000630:	4a09      	ldr	r2, [pc, #36]	; (8000658 <MX_FREERTOS_Init+0xac>)
 8000632:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000634:	bf00      	nop
 8000636:	3758      	adds	r7, #88	; 0x58
 8000638:	46bd      	mov	sp, r7
 800063a:	bdb0      	pop	{r4, r5, r7, pc}
 800063c:	080078c0 	.word	0x080078c0
 8000640:	20000098 	.word	0x20000098
 8000644:	080078d0 	.word	0x080078d0
 8000648:	2000009c 	.word	0x2000009c
 800064c:	080078dc 	.word	0x080078dc
 8000650:	20000090 	.word	0x20000090
 8000654:	080078f8 	.word	0x080078f8
 8000658:	20000094 	.word	0x20000094

0800065c <startTask100ms>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startTask100ms */
void startTask100ms(void const * argument)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTask100ms */
  /* Infinite loop */
  for(;;)
  {
	//UART_printTestString();
	UART_printMsg("100ms Task!\n\r");
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <startTask100ms+0x20>)
 8000666:	f005 fa21 	bl	8005aac <UART_printMsg>
	USART2_printFromQueue();
 800066a:	f006 ffcf 	bl	800760c <USART2_printFromQueue>
	LED2_toggle();
 800066e:	f005 fa11 	bl	8005a94 <LED2_toggle>
	osDelay(100);
 8000672:	2064      	movs	r0, #100	; 0x64
 8000674:	f002 fd14 	bl	80030a0 <osDelay>
	UART_printMsg("100ms Task!\n\r");
 8000678:	e7f4      	b.n	8000664 <startTask100ms+0x8>
 800067a:	bf00      	nop
 800067c:	08007914 	.word	0x08007914

08000680 <startTask500ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTask500ms */
void startTask500ms(void const * argument)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTask500ms */
  /* Infinite loop */
  for(;;)
  {
	LED1_toggle();
 8000688:	f005 f9f8 	bl	8005a7c <LED1_toggle>
	//UART_printLEDString();
	UART_printMsg("500ms Task!\n\r");
 800068c:	4803      	ldr	r0, [pc, #12]	; (800069c <startTask500ms+0x1c>)
 800068e:	f005 fa0d 	bl	8005aac <UART_printMsg>
    osDelay(500);
 8000692:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000696:	f002 fd03 	bl	80030a0 <osDelay>
	LED1_toggle();
 800069a:	e7f5      	b.n	8000688 <startTask500ms+0x8>
 800069c:	08007924 	.word	0x08007924

080006a0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_GPIO_Init+0x80>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a18      	ldr	r2, [pc, #96]	; (8000720 <MX_GPIO_Init+0x80>)
 80006c0:	f043 0320 	orr.w	r3, r3, #32
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_GPIO_Init+0x80>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0320 	and.w	r3, r3, #32
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_GPIO_Init+0x80>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a11      	ldr	r2, [pc, #68]	; (8000720 <MX_GPIO_Init+0x80>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_GPIO_Init+0x80>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <MX_GPIO_Init+0x84>)
 80006f6:	f000 fd91 	bl	800121c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80006fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80006fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000704:	2301      	movs	r3, #1
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	4619      	mov	r1, r3
 8000712:	4804      	ldr	r0, [pc, #16]	; (8000724 <MX_GPIO_Init+0x84>)
 8000714:	f000 fbe6 	bl	8000ee4 <HAL_GPIO_Init>

}
 8000718:	bf00      	nop
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40021400 	.word	0x40021400

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072c:	f000 fa24 	bl	8000b78 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000730:	f000 f816 	bl	8000760 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000734:	f7ff ffb4 	bl	80006a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000738:	f000 f97a 	bl	8000a30 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // ***** SEGGER SystemView configuration *****
  DWT->CTRL |= (1<<0); //Start CYCCNT for timestamp counting (Sozza)
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <main+0x34>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a06      	ldr	r2, [pc, #24]	; (800075c <main+0x34>)
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 8000748:	f005 f9ca 	bl	8005ae0 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800074c:	f006 f90e 	bl	800696c <SEGGER_SYSVIEW_Start>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000750:	f7ff ff2c 	bl	80005ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000754:	f002 fc50 	bl	8002ff8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1) {}
 8000758:	e7fe      	b.n	8000758 <main+0x30>
 800075a:	bf00      	nop
 800075c:	e0001000 	.word	0xe0001000

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	; 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	2230      	movs	r2, #48	; 0x30
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f006 ffbc 	bl	80076ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <SystemClock_Config+0xcc>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a27      	ldr	r2, [pc, #156]	; (800082c <SystemClock_Config+0xcc>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b25      	ldr	r3, [pc, #148]	; (800082c <SystemClock_Config+0xcc>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	4b22      	ldr	r3, [pc, #136]	; (8000830 <SystemClock_Config+0xd0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a21      	ldr	r2, [pc, #132]	; (8000830 <SystemClock_Config+0xd0>)
 80007aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <SystemClock_Config+0xd0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007bc:	2302      	movs	r3, #2
 80007be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c0:	2301      	movs	r3, #1
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c4:	2310      	movs	r3, #16
 80007c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c8:	2302      	movs	r3, #2
 80007ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007cc:	2300      	movs	r3, #0
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007d0:	2308      	movs	r3, #8
 80007d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007d4:	23a8      	movs	r3, #168	; 0xa8
 80007d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007dc:	2304      	movs	r3, #4
 80007de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0320 	add.w	r3, r7, #32
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 fd4d 	bl	8001284 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007f0:	f000 f832 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f8:	2302      	movs	r3, #2
 80007fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000800:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000804:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2105      	movs	r1, #5
 8000812:	4618      	mov	r0, r3
 8000814:	f000 ffae 	bl	8001774 <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800081e:	f000 f81b 	bl	8000858 <Error_Handler>
  }
}
 8000822:	bf00      	nop
 8000824:	3750      	adds	r7, #80	; 0x50
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d101      	bne.n	800084a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000846:	f000 f9b9 	bl	8000bbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40010000 	.word	0x40010000

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_MspInit+0x54>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	4a11      	ldr	r2, [pc, #68]	; (80008b8 <HAL_MspInit+0x54>)
 8000874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000878:	6453      	str	r3, [r2, #68]	; 0x44
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_MspInit+0x54>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <HAL_MspInit+0x54>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <HAL_MspInit+0x54>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_MspInit+0x54>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	210f      	movs	r1, #15
 80008a6:	f06f 0001 	mvn.w	r0, #1
 80008aa:	f000 fa5f 	bl	8000d6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	; 0x30
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	2019      	movs	r0, #25
 80008d2:	f000 fa4b 	bl	8000d6c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008d6:	2019      	movs	r0, #25
 80008d8:	f000 fa64 	bl	8000da4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <HAL_InitTick+0xa4>)
 80008e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e4:	4a1e      	ldr	r2, [pc, #120]	; (8000960 <HAL_InitTick+0xa4>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	6453      	str	r3, [r2, #68]	; 0x44
 80008ec:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <HAL_InitTick+0xa4>)
 80008ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f8:	f107 0210 	add.w	r2, r7, #16
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4611      	mov	r1, r2
 8000902:	4618      	mov	r0, r3
 8000904:	f001 f916 	bl	8001b34 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000908:	f001 f900 	bl	8001b0c <HAL_RCC_GetPCLK2Freq>
 800090c:	4603      	mov	r3, r0
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000914:	4a13      	ldr	r2, [pc, #76]	; (8000964 <HAL_InitTick+0xa8>)
 8000916:	fba2 2303 	umull	r2, r3, r2, r3
 800091a:	0c9b      	lsrs	r3, r3, #18
 800091c:	3b01      	subs	r3, #1
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <HAL_InitTick+0xac>)
 8000922:	4a12      	ldr	r2, [pc, #72]	; (800096c <HAL_InitTick+0xb0>)
 8000924:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_InitTick+0xac>)
 8000928:	f240 32e7 	movw	r2, #999	; 0x3e7
 800092c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <HAL_InitTick+0xac>)
 8000930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000932:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <HAL_InitTick+0xac>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <HAL_InitTick+0xac>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <HAL_InitTick+0xac>)
 8000942:	f001 f929 	bl	8001b98 <HAL_TIM_Base_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d104      	bne.n	8000956 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800094c:	4806      	ldr	r0, [pc, #24]	; (8000968 <HAL_InitTick+0xac>)
 800094e:	f001 f97d 	bl	8001c4c <HAL_TIM_Base_Start_IT>
 8000952:	4603      	mov	r3, r0
 8000954:	e000      	b.n	8000958 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	3730      	adds	r7, #48	; 0x30
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40023800 	.word	0x40023800
 8000964:	431bde83 	.word	0x431bde83
 8000968:	2000035c 	.word	0x2000035c
 800096c:	40010000 	.word	0x40010000

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009a2:	f001 f9c3 	bl	8001d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000035c 	.word	0x2000035c

080009b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	//SEGGER Trace ISR
	SEGGER_SYSVIEW_RecordEnterISR();
 80009b6:	f006 faa3 	bl	8006f00 <SEGGER_SYSVIEW_RecordEnterISR>

	//SEGGER Trace Character sent
	char USART_TX_SEGGER[2];
    USART_TX_SEGGER[0]= *(huart2.pTxBuffPtr);
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <USART2_IRQHandler+0x58>)
 80009bc:	6a1b      	ldr	r3, [r3, #32]
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	713b      	strb	r3, [r7, #4]
    USART_TX_SEGGER[1]= 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	717b      	strb	r3, [r7, #5]
 	SEGGER_SYSVIEW_Print((char*)&USART_TX_SEGGER);
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4618      	mov	r0, r3
 80009ca:	f006 fd41 	bl	8007450 <SEGGER_SYSVIEW_Print>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80009ce:	f3ef 8211 	mrs	r2, BASEPRI
 80009d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009d6:	f383 8811 	msr	BASEPRI, r3
 80009da:	f3bf 8f6f 	isb	sy
 80009de:	f3bf 8f4f 	dsb	sy
 80009e2:	60fa      	str	r2, [r7, #12]
 80009e4:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80009e6:	68fb      	ldr	r3, [r7, #12]

	// Disable other FreeRTOS interruptions while communicating to USART2
	UBaseType_t uxSavedInterruptStatus;
	uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 80009e8:	617b      	str	r3, [r7, #20]
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009ea:	4807      	ldr	r0, [pc, #28]	; (8000a08 <USART2_IRQHandler+0x58>)
 80009ec:	f001 fc14 	bl	8002218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	SEGGER_SYSVIEW_RecordExitISR(); //SEGGER Trace
 80009f0:	f006 fac8 	bl	8006f84 <SEGGER_SYSVIEW_RecordExitISR>
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80009fe:	bf00      	nop
	taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);
  /* USER CODE END USART2_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200003a4 	.word	0x200003a4

08000a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <SystemInit+0x20>)
 8000a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a16:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <SystemInit+0x20>)
 8000a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a36:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <MX_USART2_UART_Init+0x50>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a66:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a6a:	f001 fb43 	bl	80020f4 <HAL_UART_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000a74:	f7ff fef0 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200003a4 	.word	0x200003a4
 8000a80:	40004400 	.word	0x40004400

08000a84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a1d      	ldr	r2, [pc, #116]	; (8000b18 <HAL_UART_MspInit+0x94>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d133      	bne.n	8000b0e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <HAL_UART_MspInit+0x98>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <HAL_UART_MspInit+0x98>)
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <HAL_UART_MspInit+0x98>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_UART_MspInit+0x98>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <HAL_UART_MspInit+0x98>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_UART_MspInit+0x98>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ade:	230c      	movs	r3, #12
 8000ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aea:	2303      	movs	r3, #3
 8000aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aee:	2307      	movs	r3, #7
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	4809      	ldr	r0, [pc, #36]	; (8000b20 <HAL_UART_MspInit+0x9c>)
 8000afa:	f000 f9f3 	bl	8000ee4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2105      	movs	r1, #5
 8000b02:	2026      	movs	r0, #38	; 0x26
 8000b04:	f000 f932 	bl	8000d6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b08:	2026      	movs	r0, #38	; 0x26
 8000b0a:	f000 f94b 	bl	8000da4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	; 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40004400 	.word	0x40004400
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000

08000b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b2a:	490e      	ldr	r1, [pc, #56]	; (8000b64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b2c:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b30:	e002      	b.n	8000b38 <LoopCopyDataInit>

08000b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b36:	3304      	adds	r3, #4

08000b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b3c:	d3f9      	bcc.n	8000b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3e:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b40:	4c0b      	ldr	r4, [pc, #44]	; (8000b70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b44:	e001      	b.n	8000b4a <LoopFillZerobss>

08000b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b48:	3204      	adds	r2, #4

08000b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b4c:	d3fb      	bcc.n	8000b46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b4e:	f7ff ff5d 	bl	8000a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b52:	f006 fd87 	bl	8007664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b56:	f7ff fde7 	bl	8000728 <main>
  bx  lr    
 8000b5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b64:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b68:	08007a9c 	.word	0x08007a9c
  ldr r2, =_sbss
 8000b6c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b70:	200067c4 	.word	0x200067c4

08000b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC_IRQHandler>
	...

08000b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <HAL_Init+0x40>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0d      	ldr	r2, [pc, #52]	; (8000bb8 <HAL_Init+0x40>)
 8000b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <HAL_Init+0x40>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <HAL_Init+0x40>)
 8000b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_Init+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <HAL_Init+0x40>)
 8000b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba0:	2003      	movs	r0, #3
 8000ba2:	f000 f8d8 	bl	8000d56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba6:	200f      	movs	r0, #15
 8000ba8:	f7ff fe88 	bl	80008bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bac:	f7ff fe5a 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023c00 	.word	0x40023c00

08000bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_IncTick+0x20>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_IncTick+0x24>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <HAL_IncTick+0x24>)
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	200003e8 	.word	0x200003e8

08000be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return uwTick;
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <HAL_GetTick+0x14>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	200003e8 	.word	0x200003e8

08000bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2e:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	60d3      	str	r3, [r2, #12]
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <__NVIC_GetPriorityGrouping+0x18>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	f003 0307 	and.w	r3, r3, #7
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	db0b      	blt.n	8000c8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 021f 	and.w	r2, r3, #31
 8000c78:	4907      	ldr	r1, [pc, #28]	; (8000c98 <__NVIC_EnableIRQ+0x38>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	095b      	lsrs	r3, r3, #5
 8000c80:	2001      	movs	r0, #1
 8000c82:	fa00 f202 	lsl.w	r2, r0, r2
 8000c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000e100 	.word	0xe000e100

08000c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	db0a      	blt.n	8000cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	490c      	ldr	r1, [pc, #48]	; (8000ce8 <__NVIC_SetPriority+0x4c>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	0112      	lsls	r2, r2, #4
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	440b      	add	r3, r1
 8000cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc4:	e00a      	b.n	8000cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4908      	ldr	r1, [pc, #32]	; (8000cec <__NVIC_SetPriority+0x50>)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	3b04      	subs	r3, #4
 8000cd4:	0112      	lsls	r2, r2, #4
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	440b      	add	r3, r1
 8000cda:	761a      	strb	r2, [r3, #24]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000e100 	.word	0xe000e100
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	; 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f1c3 0307 	rsb	r3, r3, #7
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	bf28      	it	cs
 8000d0e:	2304      	movcs	r3, #4
 8000d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3304      	adds	r3, #4
 8000d16:	2b06      	cmp	r3, #6
 8000d18:	d902      	bls.n	8000d20 <NVIC_EncodePriority+0x30>
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3b03      	subs	r3, #3
 8000d1e:	e000      	b.n	8000d22 <NVIC_EncodePriority+0x32>
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	401a      	ands	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d38:	f04f 31ff 	mov.w	r1, #4294967295
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	43d9      	mvns	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	4313      	orrs	r3, r2
         );
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3724      	adds	r7, #36	; 0x24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ff4c 	bl	8000bfc <__NVIC_SetPriorityGrouping>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7e:	f7ff ff61 	bl	8000c44 <__NVIC_GetPriorityGrouping>
 8000d82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	68b9      	ldr	r1, [r7, #8]
 8000d88:	6978      	ldr	r0, [r7, #20]
 8000d8a:	f7ff ffb1 	bl	8000cf0 <NVIC_EncodePriority>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d94:	4611      	mov	r1, r2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff80 	bl	8000c9c <__NVIC_SetPriority>
}
 8000d9c:	bf00      	nop
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff ff54 	bl	8000c60 <__NVIC_EnableIRQ>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dcc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000dce:	f7ff ff09 	bl	8000be4 <HAL_GetTick>
 8000dd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d008      	beq.n	8000df2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2280      	movs	r2, #128	; 0x80
 8000de4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2200      	movs	r2, #0
 8000dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e052      	b.n	8000e98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f022 0216 	bic.w	r2, r2, #22
 8000e00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	695a      	ldr	r2, [r3, #20]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d103      	bne.n	8000e22 <HAL_DMA_Abort+0x62>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d007      	beq.n	8000e32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f022 0208 	bic.w	r2, r2, #8
 8000e30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 0201 	bic.w	r2, r2, #1
 8000e40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e42:	e013      	b.n	8000e6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e44:	f7ff fece 	bl	8000be4 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b05      	cmp	r3, #5
 8000e50:	d90c      	bls.n	8000e6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2220      	movs	r2, #32
 8000e56:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e015      	b.n	8000e98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1e4      	bne.n	8000e44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e7e:	223f      	movs	r2, #63	; 0x3f
 8000e80:	409a      	lsls	r2, r3
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d004      	beq.n	8000ebe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2280      	movs	r2, #128	; 0x80
 8000eb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00c      	b.n	8000ed8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2205      	movs	r2, #5
 8000ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 0201 	bic.w	r2, r2, #1
 8000ed4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	e16b      	b.n	80011d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f00:	2201      	movs	r2, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	f040 815a 	bne.w	80011d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d005      	beq.n	8000f36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d130      	bne.n	8000f98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	091b      	lsrs	r3, r3, #4
 8000f82:	f003 0201 	and.w	r2, r3, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d017      	beq.n	8000fd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d123      	bne.n	8001028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	08da      	lsrs	r2, r3, #3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	691a      	ldr	r2, [r3, #16]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	08da      	lsrs	r2, r3, #3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3208      	adds	r2, #8
 8001022:	69b9      	ldr	r1, [r7, #24]
 8001024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0203 	and.w	r2, r3, #3
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 80b4 	beq.w	80011d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b60      	ldr	r3, [pc, #384]	; (80011f0 <HAL_GPIO_Init+0x30c>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a5f      	ldr	r2, [pc, #380]	; (80011f0 <HAL_GPIO_Init+0x30c>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b5d      	ldr	r3, [pc, #372]	; (80011f0 <HAL_GPIO_Init+0x30c>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001086:	4a5b      	ldr	r2, [pc, #364]	; (80011f4 <HAL_GPIO_Init+0x310>)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	3302      	adds	r3, #2
 800108e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a52      	ldr	r2, [pc, #328]	; (80011f8 <HAL_GPIO_Init+0x314>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d02b      	beq.n	800110a <HAL_GPIO_Init+0x226>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a51      	ldr	r2, [pc, #324]	; (80011fc <HAL_GPIO_Init+0x318>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d025      	beq.n	8001106 <HAL_GPIO_Init+0x222>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a50      	ldr	r2, [pc, #320]	; (8001200 <HAL_GPIO_Init+0x31c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d01f      	beq.n	8001102 <HAL_GPIO_Init+0x21e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4f      	ldr	r2, [pc, #316]	; (8001204 <HAL_GPIO_Init+0x320>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d019      	beq.n	80010fe <HAL_GPIO_Init+0x21a>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4e      	ldr	r2, [pc, #312]	; (8001208 <HAL_GPIO_Init+0x324>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d013      	beq.n	80010fa <HAL_GPIO_Init+0x216>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4d      	ldr	r2, [pc, #308]	; (800120c <HAL_GPIO_Init+0x328>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d00d      	beq.n	80010f6 <HAL_GPIO_Init+0x212>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4c      	ldr	r2, [pc, #304]	; (8001210 <HAL_GPIO_Init+0x32c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d007      	beq.n	80010f2 <HAL_GPIO_Init+0x20e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4b      	ldr	r2, [pc, #300]	; (8001214 <HAL_GPIO_Init+0x330>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d101      	bne.n	80010ee <HAL_GPIO_Init+0x20a>
 80010ea:	2307      	movs	r3, #7
 80010ec:	e00e      	b.n	800110c <HAL_GPIO_Init+0x228>
 80010ee:	2308      	movs	r3, #8
 80010f0:	e00c      	b.n	800110c <HAL_GPIO_Init+0x228>
 80010f2:	2306      	movs	r3, #6
 80010f4:	e00a      	b.n	800110c <HAL_GPIO_Init+0x228>
 80010f6:	2305      	movs	r3, #5
 80010f8:	e008      	b.n	800110c <HAL_GPIO_Init+0x228>
 80010fa:	2304      	movs	r3, #4
 80010fc:	e006      	b.n	800110c <HAL_GPIO_Init+0x228>
 80010fe:	2303      	movs	r3, #3
 8001100:	e004      	b.n	800110c <HAL_GPIO_Init+0x228>
 8001102:	2302      	movs	r3, #2
 8001104:	e002      	b.n	800110c <HAL_GPIO_Init+0x228>
 8001106:	2301      	movs	r3, #1
 8001108:	e000      	b.n	800110c <HAL_GPIO_Init+0x228>
 800110a:	2300      	movs	r3, #0
 800110c:	69fa      	ldr	r2, [r7, #28]
 800110e:	f002 0203 	and.w	r2, r2, #3
 8001112:	0092      	lsls	r2, r2, #2
 8001114:	4093      	lsls	r3, r2
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800111c:	4935      	ldr	r1, [pc, #212]	; (80011f4 <HAL_GPIO_Init+0x310>)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3302      	adds	r3, #2
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800112a:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <HAL_GPIO_Init+0x334>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800114e:	4a32      	ldr	r2, [pc, #200]	; (8001218 <HAL_GPIO_Init+0x334>)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001154:	4b30      	ldr	r3, [pc, #192]	; (8001218 <HAL_GPIO_Init+0x334>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001178:	4a27      	ldr	r2, [pc, #156]	; (8001218 <HAL_GPIO_Init+0x334>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800117e:	4b26      	ldr	r3, [pc, #152]	; (8001218 <HAL_GPIO_Init+0x334>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a2:	4a1d      	ldr	r2, [pc, #116]	; (8001218 <HAL_GPIO_Init+0x334>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <HAL_GPIO_Init+0x334>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011cc:	4a12      	ldr	r2, [pc, #72]	; (8001218 <HAL_GPIO_Init+0x334>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3301      	adds	r3, #1
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	2b0f      	cmp	r3, #15
 80011dc:	f67f ae90 	bls.w	8000f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40013800 	.word	0x40013800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020400 	.word	0x40020400
 8001200:	40020800 	.word	0x40020800
 8001204:	40020c00 	.word	0x40020c00
 8001208:	40021000 	.word	0x40021000
 800120c:	40021400 	.word	0x40021400
 8001210:	40021800 	.word	0x40021800
 8001214:	40021c00 	.word	0x40021c00
 8001218:	40013c00 	.word	0x40013c00

0800121c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
 8001228:	4613      	mov	r3, r2
 800122a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800122c:	787b      	ldrb	r3, [r7, #1]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001232:	887a      	ldrh	r2, [r7, #2]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001238:	e003      	b.n	8001242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800123a:	887b      	ldrh	r3, [r7, #2]
 800123c:	041a      	lsls	r2, r3, #16
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	619a      	str	r2, [r3, #24]
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800124e:	b480      	push	{r7}
 8001250:	b085      	sub	sp, #20
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	460b      	mov	r3, r1
 8001258:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001260:	887a      	ldrh	r2, [r7, #2]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4013      	ands	r3, r2
 8001266:	041a      	lsls	r2, r3, #16
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43d9      	mvns	r1, r3
 800126c:	887b      	ldrh	r3, [r7, #2]
 800126e:	400b      	ands	r3, r1
 8001270:	431a      	orrs	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	619a      	str	r2, [r3, #24]
}
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e267      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d075      	beq.n	800138e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012a2:	4b88      	ldr	r3, [pc, #544]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	d00c      	beq.n	80012c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ae:	4b85      	ldr	r3, [pc, #532]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d112      	bne.n	80012e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ba:	4b82      	ldr	r3, [pc, #520]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012c6:	d10b      	bne.n	80012e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c8:	4b7e      	ldr	r3, [pc, #504]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d05b      	beq.n	800138c <HAL_RCC_OscConfig+0x108>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d157      	bne.n	800138c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e242      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e8:	d106      	bne.n	80012f8 <HAL_RCC_OscConfig+0x74>
 80012ea:	4b76      	ldr	r3, [pc, #472]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a75      	ldr	r2, [pc, #468]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80012f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e01d      	b.n	8001334 <HAL_RCC_OscConfig+0xb0>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001300:	d10c      	bne.n	800131c <HAL_RCC_OscConfig+0x98>
 8001302:	4b70      	ldr	r3, [pc, #448]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a6f      	ldr	r2, [pc, #444]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	4b6d      	ldr	r3, [pc, #436]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a6c      	ldr	r2, [pc, #432]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e00b      	b.n	8001334 <HAL_RCC_OscConfig+0xb0>
 800131c:	4b69      	ldr	r3, [pc, #420]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a68      	ldr	r2, [pc, #416]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b66      	ldr	r3, [pc, #408]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a65      	ldr	r2, [pc, #404]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 800132e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d013      	beq.n	8001364 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fc52 	bl	8000be4 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001344:	f7ff fc4e 	bl	8000be4 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b64      	cmp	r3, #100	; 0x64
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e207      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001356:	4b5b      	ldr	r3, [pc, #364]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f0      	beq.n	8001344 <HAL_RCC_OscConfig+0xc0>
 8001362:	e014      	b.n	800138e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fc3e 	bl	8000be4 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800136c:	f7ff fc3a 	bl	8000be4 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b64      	cmp	r3, #100	; 0x64
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e1f3      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137e:	4b51      	ldr	r3, [pc, #324]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f0      	bne.n	800136c <HAL_RCC_OscConfig+0xe8>
 800138a:	e000      	b.n	800138e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d063      	beq.n	8001462 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800139a:	4b4a      	ldr	r3, [pc, #296]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 030c 	and.w	r3, r3, #12
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00b      	beq.n	80013be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013a6:	4b47      	ldr	r3, [pc, #284]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d11c      	bne.n	80013ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b2:	4b44      	ldr	r3, [pc, #272]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d116      	bne.n	80013ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013be:	4b41      	ldr	r3, [pc, #260]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d005      	beq.n	80013d6 <HAL_RCC_OscConfig+0x152>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d001      	beq.n	80013d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e1c7      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d6:	4b3b      	ldr	r3, [pc, #236]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	4937      	ldr	r1, [pc, #220]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ea:	e03a      	b.n	8001462 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d020      	beq.n	8001436 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f4:	4b34      	ldr	r3, [pc, #208]	; (80014c8 <HAL_RCC_OscConfig+0x244>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fa:	f7ff fbf3 	bl	8000be4 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001402:	f7ff fbef 	bl	8000be4 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e1a8      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001420:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4925      	ldr	r1, [pc, #148]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001430:	4313      	orrs	r3, r2
 8001432:	600b      	str	r3, [r1, #0]
 8001434:	e015      	b.n	8001462 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001436:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <HAL_RCC_OscConfig+0x244>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143c:	f7ff fbd2 	bl	8000be4 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001444:	f7ff fbce 	bl	8000be4 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e187      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	2b00      	cmp	r3, #0
 800146c:	d036      	beq.n	80014dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d016      	beq.n	80014a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_RCC_OscConfig+0x248>)
 8001478:	2201      	movs	r2, #1
 800147a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147c:	f7ff fbb2 	bl	8000be4 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001484:	f7ff fbae 	bl	8000be4 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e167      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_RCC_OscConfig+0x240>)
 8001498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0x200>
 80014a2:	e01b      	b.n	80014dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <HAL_RCC_OscConfig+0x248>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014aa:	f7ff fb9b 	bl	8000be4 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b0:	e00e      	b.n	80014d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b2:	f7ff fb97 	bl	8000be4 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d907      	bls.n	80014d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e150      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
 80014c4:	40023800 	.word	0x40023800
 80014c8:	42470000 	.word	0x42470000
 80014cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d0:	4b88      	ldr	r3, [pc, #544]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 80014d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1ea      	bne.n	80014b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 8097 	beq.w	8001618 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ee:	4b81      	ldr	r3, [pc, #516]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10f      	bne.n	800151a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	4b7d      	ldr	r3, [pc, #500]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a7c      	ldr	r2, [pc, #496]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
 800150a:	4b7a      	ldr	r3, [pc, #488]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001516:	2301      	movs	r3, #1
 8001518:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151a:	4b77      	ldr	r3, [pc, #476]	; (80016f8 <HAL_RCC_OscConfig+0x474>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001522:	2b00      	cmp	r3, #0
 8001524:	d118      	bne.n	8001558 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001526:	4b74      	ldr	r3, [pc, #464]	; (80016f8 <HAL_RCC_OscConfig+0x474>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a73      	ldr	r2, [pc, #460]	; (80016f8 <HAL_RCC_OscConfig+0x474>)
 800152c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001532:	f7ff fb57 	bl	8000be4 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153a:	f7ff fb53 	bl	8000be4 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e10c      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154c:	4b6a      	ldr	r3, [pc, #424]	; (80016f8 <HAL_RCC_OscConfig+0x474>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d106      	bne.n	800156e <HAL_RCC_OscConfig+0x2ea>
 8001560:	4b64      	ldr	r3, [pc, #400]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001564:	4a63      	ldr	r2, [pc, #396]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6713      	str	r3, [r2, #112]	; 0x70
 800156c:	e01c      	b.n	80015a8 <HAL_RCC_OscConfig+0x324>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b05      	cmp	r3, #5
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0x30c>
 8001576:	4b5f      	ldr	r3, [pc, #380]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157a:	4a5e      	ldr	r2, [pc, #376]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	6713      	str	r3, [r2, #112]	; 0x70
 8001582:	4b5c      	ldr	r3, [pc, #368]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001586:	4a5b      	ldr	r2, [pc, #364]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6713      	str	r3, [r2, #112]	; 0x70
 800158e:	e00b      	b.n	80015a8 <HAL_RCC_OscConfig+0x324>
 8001590:	4b58      	ldr	r3, [pc, #352]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	4a57      	ldr	r2, [pc, #348]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001596:	f023 0301 	bic.w	r3, r3, #1
 800159a:	6713      	str	r3, [r2, #112]	; 0x70
 800159c:	4b55      	ldr	r3, [pc, #340]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a0:	4a54      	ldr	r2, [pc, #336]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 80015a2:	f023 0304 	bic.w	r3, r3, #4
 80015a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d015      	beq.n	80015dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b0:	f7ff fb18 	bl	8000be4 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b6:	e00a      	b.n	80015ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b8:	f7ff fb14 	bl	8000be4 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e0cb      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ce:	4b49      	ldr	r3, [pc, #292]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0ee      	beq.n	80015b8 <HAL_RCC_OscConfig+0x334>
 80015da:	e014      	b.n	8001606 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015dc:	f7ff fb02 	bl	8000be4 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e2:	e00a      	b.n	80015fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e4:	f7ff fafe 	bl	8000be4 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e0b5      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fa:	4b3e      	ldr	r3, [pc, #248]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 80015fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1ee      	bne.n	80015e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001606:	7dfb      	ldrb	r3, [r7, #23]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d105      	bne.n	8001618 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800160c:	4b39      	ldr	r3, [pc, #228]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	4a38      	ldr	r2, [pc, #224]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001616:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 80a1 	beq.w	8001764 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001622:	4b34      	ldr	r3, [pc, #208]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
 800162a:	2b08      	cmp	r3, #8
 800162c:	d05c      	beq.n	80016e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d141      	bne.n	80016ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001636:	4b31      	ldr	r3, [pc, #196]	; (80016fc <HAL_RCC_OscConfig+0x478>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fad2 	bl	8000be4 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001644:	f7ff face 	bl	8000be4 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e087      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001656:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69da      	ldr	r2, [r3, #28]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	019b      	lsls	r3, r3, #6
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	085b      	lsrs	r3, r3, #1
 800167a:	3b01      	subs	r3, #1
 800167c:	041b      	lsls	r3, r3, #16
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	061b      	lsls	r3, r3, #24
 8001686:	491b      	ldr	r1, [pc, #108]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 8001688:	4313      	orrs	r3, r2
 800168a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_RCC_OscConfig+0x478>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001692:	f7ff faa7 	bl	8000be4 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169a:	f7ff faa3 	bl	8000be4 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e05c      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0f0      	beq.n	800169a <HAL_RCC_OscConfig+0x416>
 80016b8:	e054      	b.n	8001764 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <HAL_RCC_OscConfig+0x478>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fa90 	bl	8000be4 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c8:	f7ff fa8c 	bl	8000be4 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e045      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_RCC_OscConfig+0x470>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x444>
 80016e6:	e03d      	b.n	8001764 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d107      	bne.n	8001700 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e038      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40007000 	.word	0x40007000
 80016fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <HAL_RCC_OscConfig+0x4ec>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d028      	beq.n	8001760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001718:	429a      	cmp	r2, r3
 800171a:	d121      	bne.n	8001760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001726:	429a      	cmp	r2, r3
 8001728:	d11a      	bne.n	8001760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001730:	4013      	ands	r3, r2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001736:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001738:	4293      	cmp	r3, r2
 800173a:	d111      	bne.n	8001760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	085b      	lsrs	r3, r3, #1
 8001748:	3b01      	subs	r3, #1
 800174a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d107      	bne.n	8001760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0cc      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001788:	4b68      	ldr	r3, [pc, #416]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d90c      	bls.n	80017b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b65      	ldr	r3, [pc, #404]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179e:	4b63      	ldr	r3, [pc, #396]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0b8      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d020      	beq.n	80017fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c8:	4b59      	ldr	r3, [pc, #356]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4a58      	ldr	r2, [pc, #352]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e0:	4b53      	ldr	r3, [pc, #332]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	4a52      	ldr	r2, [pc, #328]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ec:	4b50      	ldr	r3, [pc, #320]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	494d      	ldr	r1, [pc, #308]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d044      	beq.n	8001894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	4b47      	ldr	r3, [pc, #284]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d119      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e07f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d003      	beq.n	8001832 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182e:	2b03      	cmp	r3, #3
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001832:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d109      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e06f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001842:	4b3b      	ldr	r3, [pc, #236]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e067      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001852:	4b37      	ldr	r3, [pc, #220]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f023 0203 	bic.w	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4934      	ldr	r1, [pc, #208]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	4313      	orrs	r3, r2
 8001862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001864:	f7ff f9be 	bl	8000be4 <HAL_GetTick>
 8001868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186a:	e00a      	b.n	8001882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800186c:	f7ff f9ba 	bl	8000be4 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	; 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e04f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001882:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 020c 	and.w	r2, r3, #12
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	429a      	cmp	r2, r3
 8001892:	d1eb      	bne.n	800186c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001894:	4b25      	ldr	r3, [pc, #148]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d20c      	bcs.n	80018bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a2:	4b22      	ldr	r3, [pc, #136]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018aa:	4b20      	ldr	r3, [pc, #128]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e032      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c8:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4916      	ldr	r1, [pc, #88]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	490e      	ldr	r1, [pc, #56]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018fa:	f000 f821 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 80018fe:	4602      	mov	r2, r0
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	490a      	ldr	r1, [pc, #40]	; (8001934 <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	5ccb      	ldrb	r3, [r1, r3]
 800190e:	fa22 f303 	lsr.w	r3, r2, r3
 8001912:	4a09      	ldr	r2, [pc, #36]	; (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_RCC_ClockConfig+0x1c8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe ffce 	bl	80008bc <HAL_InitTick>

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023c00 	.word	0x40023c00
 8001930:	40023800 	.word	0x40023800
 8001934:	08007a00 	.word	0x08007a00
 8001938:	20000000 	.word	0x20000000
 800193c:	20000004 	.word	0x20000004

08001940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001944:	b090      	sub	sp, #64	; 0x40
 8001946:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	637b      	str	r3, [r7, #52]	; 0x34
 800194c:	2300      	movs	r3, #0
 800194e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001950:	2300      	movs	r3, #0
 8001952:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001958:	4b59      	ldr	r3, [pc, #356]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 030c 	and.w	r3, r3, #12
 8001960:	2b08      	cmp	r3, #8
 8001962:	d00d      	beq.n	8001980 <HAL_RCC_GetSysClockFreq+0x40>
 8001964:	2b08      	cmp	r3, #8
 8001966:	f200 80a1 	bhi.w	8001aac <HAL_RCC_GetSysClockFreq+0x16c>
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0x34>
 800196e:	2b04      	cmp	r3, #4
 8001970:	d003      	beq.n	800197a <HAL_RCC_GetSysClockFreq+0x3a>
 8001972:	e09b      	b.n	8001aac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001974:	4b53      	ldr	r3, [pc, #332]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001976:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001978:	e09b      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800197a:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 800197c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800197e:	e098      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001980:	4b4f      	ldr	r3, [pc, #316]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800198a:	4b4d      	ldr	r3, [pc, #308]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d028      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001996:	4b4a      	ldr	r3, [pc, #296]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	099b      	lsrs	r3, r3, #6
 800199c:	2200      	movs	r2, #0
 800199e:	623b      	str	r3, [r7, #32]
 80019a0:	627a      	str	r2, [r7, #36]	; 0x24
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019a8:	2100      	movs	r1, #0
 80019aa:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 80019ac:	fb03 f201 	mul.w	r2, r3, r1
 80019b0:	2300      	movs	r3, #0
 80019b2:	fb00 f303 	mul.w	r3, r0, r3
 80019b6:	4413      	add	r3, r2
 80019b8:	4a43      	ldr	r2, [pc, #268]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 80019ba:	fba0 1202 	umull	r1, r2, r0, r2
 80019be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019c0:	460a      	mov	r2, r1
 80019c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80019c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019c6:	4413      	add	r3, r2
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019cc:	2200      	movs	r2, #0
 80019ce:	61bb      	str	r3, [r7, #24]
 80019d0:	61fa      	str	r2, [r7, #28]
 80019d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019da:	f7fe fc4b 	bl	8000274 <__aeabi_uldivmod>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4613      	mov	r3, r2
 80019e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019e6:	e053      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e8:	4b35      	ldr	r3, [pc, #212]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	099b      	lsrs	r3, r3, #6
 80019ee:	2200      	movs	r2, #0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	617a      	str	r2, [r7, #20]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019fa:	f04f 0b00 	mov.w	fp, #0
 80019fe:	4652      	mov	r2, sl
 8001a00:	465b      	mov	r3, fp
 8001a02:	f04f 0000 	mov.w	r0, #0
 8001a06:	f04f 0100 	mov.w	r1, #0
 8001a0a:	0159      	lsls	r1, r3, #5
 8001a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a10:	0150      	lsls	r0, r2, #5
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	ebb2 080a 	subs.w	r8, r2, sl
 8001a1a:	eb63 090b 	sbc.w	r9, r3, fp
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a32:	ebb2 0408 	subs.w	r4, r2, r8
 8001a36:	eb63 0509 	sbc.w	r5, r3, r9
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	00eb      	lsls	r3, r5, #3
 8001a44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a48:	00e2      	lsls	r2, r4, #3
 8001a4a:	4614      	mov	r4, r2
 8001a4c:	461d      	mov	r5, r3
 8001a4e:	eb14 030a 	adds.w	r3, r4, sl
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	eb45 030b 	adc.w	r3, r5, fp
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a66:	4629      	mov	r1, r5
 8001a68:	028b      	lsls	r3, r1, #10
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a70:	4621      	mov	r1, r4
 8001a72:	028a      	lsls	r2, r1, #10
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	60fa      	str	r2, [r7, #12]
 8001a80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a84:	f7fe fbf6 	bl	8000274 <__aeabi_uldivmod>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	0c1b      	lsrs	r3, r3, #16
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001aa0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001aaa:	e002      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001aae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3740      	adds	r7, #64	; 0x40
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	00f42400 	.word	0x00f42400
 8001ac8:	017d7840 	.word	0x017d7840

08001acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000000 	.word	0x20000000

08001ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ae8:	f7ff fff0 	bl	8001acc <HAL_RCC_GetHCLKFreq>
 8001aec:	4602      	mov	r2, r0
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	0a9b      	lsrs	r3, r3, #10
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	4903      	ldr	r1, [pc, #12]	; (8001b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001afa:	5ccb      	ldrb	r3, [r1, r3]
 8001afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40023800 	.word	0x40023800
 8001b08:	08007a10 	.word	0x08007a10

08001b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b10:	f7ff ffdc 	bl	8001acc <HAL_RCC_GetHCLKFreq>
 8001b14:	4602      	mov	r2, r0
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	0b5b      	lsrs	r3, r3, #13
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	4903      	ldr	r1, [pc, #12]	; (8001b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b22:	5ccb      	ldrb	r3, [r1, r3]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	08007a10 	.word	0x08007a10

08001b34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	220f      	movs	r2, #15
 8001b42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0203 	and.w	r2, r3, #3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	08db      	lsrs	r3, r3, #3
 8001b6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <HAL_RCC_GetClockConfig+0x60>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0207 	and.w	r2, r3, #7
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	601a      	str	r2, [r3, #0]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40023c00 	.word	0x40023c00

08001b98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e041      	b.n	8001c2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f839 	bl	8001c36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	f000 f9d8 	bl	8001f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d001      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e04e      	b.n	8001d02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a23      	ldr	r2, [pc, #140]	; (8001d10 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d022      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c8e:	d01d      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1f      	ldr	r2, [pc, #124]	; (8001d14 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d018      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d013      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <HAL_TIM_Base_Start_IT+0xd0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d00e      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d009      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d004      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x80>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a18      	ldr	r2, [pc, #96]	; (8001d28 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d111      	bne.n	8001cf0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2b06      	cmp	r3, #6
 8001cdc:	d010      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f042 0201 	orr.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cee:	e007      	b.n	8001d00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40010000 	.word	0x40010000
 8001d14:	40000400 	.word	0x40000400
 8001d18:	40000800 	.word	0x40000800
 8001d1c:	40000c00 	.word	0x40000c00
 8001d20:	40010400 	.word	0x40010400
 8001d24:	40014000 	.word	0x40014000
 8001d28:	40001800 	.word	0x40001800

08001d2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d122      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d11b      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0202 	mvn.w	r2, #2
 8001d58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f8ee 	bl	8001f50 <HAL_TIM_IC_CaptureCallback>
 8001d74:	e005      	b.n	8001d82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f8e0 	bl	8001f3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f8f1 	bl	8001f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d122      	bne.n	8001ddc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d11b      	bne.n	8001ddc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0204 	mvn.w	r2, #4
 8001dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2202      	movs	r2, #2
 8001db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f8c4 	bl	8001f50 <HAL_TIM_IC_CaptureCallback>
 8001dc8:	e005      	b.n	8001dd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f8b6 	bl	8001f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f8c7 	bl	8001f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d122      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d11b      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0208 	mvn.w	r2, #8
 8001e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2204      	movs	r2, #4
 8001e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f89a 	bl	8001f50 <HAL_TIM_IC_CaptureCallback>
 8001e1c:	e005      	b.n	8001e2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f88c 	bl	8001f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f89d 	bl	8001f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	2b10      	cmp	r3, #16
 8001e3c:	d122      	bne.n	8001e84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	2b10      	cmp	r3, #16
 8001e4a:	d11b      	bne.n	8001e84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0210 	mvn.w	r2, #16
 8001e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2208      	movs	r2, #8
 8001e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f870 	bl	8001f50 <HAL_TIM_IC_CaptureCallback>
 8001e70:	e005      	b.n	8001e7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f862 	bl	8001f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f873 	bl	8001f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d10e      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d107      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0201 	mvn.w	r2, #1
 8001ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7fe fcc2 	bl	8000834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eba:	2b80      	cmp	r3, #128	; 0x80
 8001ebc:	d10e      	bne.n	8001edc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec8:	2b80      	cmp	r3, #128	; 0x80
 8001eca:	d107      	bne.n	8001edc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f902 	bl	80020e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee6:	2b40      	cmp	r3, #64	; 0x40
 8001ee8:	d10e      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef4:	2b40      	cmp	r3, #64	; 0x40
 8001ef6:	d107      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f838 	bl	8001f78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0320 	and.w	r3, r3, #32
 8001f12:	2b20      	cmp	r3, #32
 8001f14:	d10e      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	2b20      	cmp	r3, #32
 8001f22:	d107      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0220 	mvn.w	r2, #32
 8001f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f8cc 	bl	80020cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a40      	ldr	r2, [pc, #256]	; (80020a0 <TIM_Base_SetConfig+0x114>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d013      	beq.n	8001fcc <TIM_Base_SetConfig+0x40>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001faa:	d00f      	beq.n	8001fcc <TIM_Base_SetConfig+0x40>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3d      	ldr	r2, [pc, #244]	; (80020a4 <TIM_Base_SetConfig+0x118>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d00b      	beq.n	8001fcc <TIM_Base_SetConfig+0x40>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3c      	ldr	r2, [pc, #240]	; (80020a8 <TIM_Base_SetConfig+0x11c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d007      	beq.n	8001fcc <TIM_Base_SetConfig+0x40>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3b      	ldr	r2, [pc, #236]	; (80020ac <TIM_Base_SetConfig+0x120>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d003      	beq.n	8001fcc <TIM_Base_SetConfig+0x40>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a3a      	ldr	r2, [pc, #232]	; (80020b0 <TIM_Base_SetConfig+0x124>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d108      	bne.n	8001fde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a2f      	ldr	r2, [pc, #188]	; (80020a0 <TIM_Base_SetConfig+0x114>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d02b      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fec:	d027      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a2c      	ldr	r2, [pc, #176]	; (80020a4 <TIM_Base_SetConfig+0x118>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d023      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a2b      	ldr	r2, [pc, #172]	; (80020a8 <TIM_Base_SetConfig+0x11c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01f      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a2a      	ldr	r2, [pc, #168]	; (80020ac <TIM_Base_SetConfig+0x120>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d01b      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a29      	ldr	r2, [pc, #164]	; (80020b0 <TIM_Base_SetConfig+0x124>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d017      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a28      	ldr	r2, [pc, #160]	; (80020b4 <TIM_Base_SetConfig+0x128>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d013      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a27      	ldr	r2, [pc, #156]	; (80020b8 <TIM_Base_SetConfig+0x12c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00f      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a26      	ldr	r2, [pc, #152]	; (80020bc <TIM_Base_SetConfig+0x130>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00b      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a25      	ldr	r2, [pc, #148]	; (80020c0 <TIM_Base_SetConfig+0x134>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d007      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a24      	ldr	r2, [pc, #144]	; (80020c4 <TIM_Base_SetConfig+0x138>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d003      	beq.n	800203e <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a23      	ldr	r2, [pc, #140]	; (80020c8 <TIM_Base_SetConfig+0x13c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d108      	bne.n	8002050 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	4313      	orrs	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <TIM_Base_SetConfig+0x114>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d003      	beq.n	8002084 <TIM_Base_SetConfig+0xf8>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a0c      	ldr	r2, [pc, #48]	; (80020b0 <TIM_Base_SetConfig+0x124>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d103      	bne.n	800208c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	615a      	str	r2, [r3, #20]
}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40010000 	.word	0x40010000
 80020a4:	40000400 	.word	0x40000400
 80020a8:	40000800 	.word	0x40000800
 80020ac:	40000c00 	.word	0x40000c00
 80020b0:	40010400 	.word	0x40010400
 80020b4:	40014000 	.word	0x40014000
 80020b8:	40014400 	.word	0x40014400
 80020bc:	40014800 	.word	0x40014800
 80020c0:	40001800 	.word	0x40001800
 80020c4:	40001c00 	.word	0x40001c00
 80020c8:	40002000 	.word	0x40002000

080020cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e03f      	b.n	8002186 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d106      	bne.n	8002120 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe fcb2 	bl	8000a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2224      	movs	r2, #36	; 0x24
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002136:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 fcbf 	bl	8002abc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800214c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695a      	ldr	r2, [r3, #20]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800215c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800216c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800218e:	b480      	push	{r7}
 8002190:	b085      	sub	sp, #20
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	4613      	mov	r3, r2
 800219a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b20      	cmp	r3, #32
 80021a6:	d130      	bne.n	800220a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <HAL_UART_Transmit_IT+0x26>
 80021ae:	88fb      	ldrh	r3, [r7, #6]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e029      	b.n	800220c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_UART_Transmit_IT+0x38>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e022      	b.n	800220c <HAL_UART_Transmit_IT+0x7e>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	88fa      	ldrh	r2, [r7, #6]
 80021d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	88fa      	ldrh	r2, [r7, #6]
 80021de:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2221      	movs	r2, #33	; 0x21
 80021ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002204:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	e000      	b.n	800220c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800220a:	2302      	movs	r3, #2
  }
}
 800220c:	4618      	mov	r0, r3
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b0ba      	sub	sp, #232	; 0xe8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800223e:	2300      	movs	r3, #0
 8002240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002244:	2300      	movs	r3, #0
 8002246:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800224a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002256:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10f      	bne.n	800227e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800225e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002262:	f003 0320 	and.w	r3, r3, #32
 8002266:	2b00      	cmp	r3, #0
 8002268:	d009      	beq.n	800227e <HAL_UART_IRQHandler+0x66>
 800226a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fb65 	bl	8002946 <UART_Receive_IT>
      return;
 800227c:	e256      	b.n	800272c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800227e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 80de 	beq.w	8002444 <HAL_UART_IRQHandler+0x22c>
 8002288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d106      	bne.n	80022a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002298:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 80d1 	beq.w	8002444 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00b      	beq.n	80022c6 <HAL_UART_IRQHandler+0xae>
 80022ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d005      	beq.n	80022c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f043 0201 	orr.w	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00b      	beq.n	80022ea <HAL_UART_IRQHandler+0xd2>
 80022d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f043 0202 	orr.w	r2, r3, #2
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00b      	beq.n	800230e <HAL_UART_IRQHandler+0xf6>
 80022f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d005      	beq.n	800230e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f043 0204 	orr.w	r2, r3, #4
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800230e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d011      	beq.n	800233e <HAL_UART_IRQHandler+0x126>
 800231a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800231e:	f003 0320 	and.w	r3, r3, #32
 8002322:	2b00      	cmp	r3, #0
 8002324:	d105      	bne.n	8002332 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d005      	beq.n	800233e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f043 0208 	orr.w	r2, r3, #8
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 81ed 	beq.w	8002722 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <HAL_UART_IRQHandler+0x14e>
 8002354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 faf0 	bl	8002946 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002370:	2b40      	cmp	r3, #64	; 0x40
 8002372:	bf0c      	ite	eq
 8002374:	2301      	moveq	r3, #1
 8002376:	2300      	movne	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d103      	bne.n	8002392 <HAL_UART_IRQHandler+0x17a>
 800238a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800238e:	2b00      	cmp	r3, #0
 8002390:	d04f      	beq.n	8002432 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f9f8 	bl	8002788 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a2:	2b40      	cmp	r3, #64	; 0x40
 80023a4:	d141      	bne.n	800242a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	3314      	adds	r3, #20
 80023ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023b4:	e853 3f00 	ldrex	r3, [r3]
 80023b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80023bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	3314      	adds	r3, #20
 80023ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80023d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80023d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80023de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80023e2:	e841 2300 	strex	r3, r2, [r1]
 80023e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80023ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1d9      	bne.n	80023a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d013      	beq.n	8002422 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fe:	4a7d      	ldr	r2, [pc, #500]	; (80025f4 <HAL_UART_IRQHandler+0x3dc>)
 8002400:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe fd4a 	bl	8000ea0 <HAL_DMA_Abort_IT>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d016      	beq.n	8002440 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800241c:	4610      	mov	r0, r2
 800241e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002420:	e00e      	b.n	8002440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f99a 	bl	800275c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002428:	e00a      	b.n	8002440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f996 	bl	800275c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002430:	e006      	b.n	8002440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f992 	bl	800275c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800243e:	e170      	b.n	8002722 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002440:	bf00      	nop
    return;
 8002442:	e16e      	b.n	8002722 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	2b01      	cmp	r3, #1
 800244a:	f040 814a 	bne.w	80026e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800244e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 8143 	beq.w	80026e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800245c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 813c 	beq.w	80026e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800246a:	2300      	movs	r3, #0
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248a:	2b40      	cmp	r3, #64	; 0x40
 800248c:	f040 80b4 	bne.w	80025f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800249c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 8140 	beq.w	8002726 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80024ae:	429a      	cmp	r2, r3
 80024b0:	f080 8139 	bcs.w	8002726 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80024ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c6:	f000 8088 	beq.w	80025da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	330c      	adds	r3, #12
 80024d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024d8:	e853 3f00 	ldrex	r3, [r3]
 80024dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80024e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	330c      	adds	r3, #12
 80024f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80024f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002502:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002506:	e841 2300 	strex	r3, r2, [r1]
 800250a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800250e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1d9      	bne.n	80024ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	3314      	adds	r3, #20
 800251c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800251e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002520:	e853 3f00 	ldrex	r3, [r3]
 8002524:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3314      	adds	r3, #20
 8002536:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800253a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800253e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002540:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002542:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002546:	e841 2300 	strex	r3, r2, [r1]
 800254a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800254c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1e1      	bne.n	8002516 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	3314      	adds	r3, #20
 8002558:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800255a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800255c:	e853 3f00 	ldrex	r3, [r3]
 8002560:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002568:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	3314      	adds	r3, #20
 8002572:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002576:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002578:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800257c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800257e:	e841 2300 	strex	r3, r2, [r1]
 8002582:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1e3      	bne.n	8002552 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	330c      	adds	r3, #12
 800259e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a2:	e853 3f00 	ldrex	r3, [r3]
 80025a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80025a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025aa:	f023 0310 	bic.w	r3, r3, #16
 80025ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	330c      	adds	r3, #12
 80025b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80025bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80025be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025c4:	e841 2300 	strex	r3, r2, [r1]
 80025c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80025ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e3      	bne.n	8002598 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fbf3 	bl	8000dc0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	4619      	mov	r1, r3
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f8c0 	bl	8002770 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025f0:	e099      	b.n	8002726 <HAL_UART_IRQHandler+0x50e>
 80025f2:	bf00      	nop
 80025f4:	0800284f 	.word	0x0800284f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002600:	b29b      	uxth	r3, r3
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 808b 	beq.w	800272a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002614:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 8086 	beq.w	800272a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	330c      	adds	r3, #12
 8002624:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002628:	e853 3f00 	ldrex	r3, [r3]
 800262c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800262e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002630:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002634:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	330c      	adds	r3, #12
 800263e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002642:	647a      	str	r2, [r7, #68]	; 0x44
 8002644:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002646:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002648:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800264a:	e841 2300 	strex	r3, r2, [r1]
 800264e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1e3      	bne.n	800261e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	3314      	adds	r3, #20
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	e853 3f00 	ldrex	r3, [r3]
 8002664:	623b      	str	r3, [r7, #32]
   return(result);
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	f023 0301 	bic.w	r3, r3, #1
 800266c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	3314      	adds	r3, #20
 8002676:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800267a:	633a      	str	r2, [r7, #48]	; 0x30
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800267e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002682:	e841 2300 	strex	r3, r2, [r1]
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1e3      	bne.n	8002656 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	330c      	adds	r3, #12
 80026a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	e853 3f00 	ldrex	r3, [r3]
 80026aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 0310 	bic.w	r3, r3, #16
 80026b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	330c      	adds	r3, #12
 80026bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80026c0:	61fa      	str	r2, [r7, #28]
 80026c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c4:	69b9      	ldr	r1, [r7, #24]
 80026c6:	69fa      	ldr	r2, [r7, #28]
 80026c8:	e841 2300 	strex	r3, r2, [r1]
 80026cc:	617b      	str	r3, [r7, #20]
   return(result);
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1e3      	bne.n	800269c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80026d8:	4619      	mov	r1, r3
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f848 	bl	8002770 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026e0:	e023      	b.n	800272a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d009      	beq.n	8002702 <HAL_UART_IRQHandler+0x4ea>
 80026ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f8bb 	bl	8002876 <UART_Transmit_IT>
    return;
 8002700:	e014      	b.n	800272c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00e      	beq.n	800272c <HAL_UART_IRQHandler+0x514>
 800270e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d008      	beq.n	800272c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f8fb 	bl	8002916 <UART_EndTransmit_IT>
    return;
 8002720:	e004      	b.n	800272c <HAL_UART_IRQHandler+0x514>
    return;
 8002722:	bf00      	nop
 8002724:	e002      	b.n	800272c <HAL_UART_IRQHandler+0x514>
      return;
 8002726:	bf00      	nop
 8002728:	e000      	b.n	800272c <HAL_UART_IRQHandler+0x514>
      return;
 800272a:	bf00      	nop
  }
}
 800272c:	37e8      	adds	r7, #232	; 0xe8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop

08002734 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002788:	b480      	push	{r7}
 800278a:	b095      	sub	sp, #84	; 0x54
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	330c      	adds	r3, #12
 8002796:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279a:	e853 3f00 	ldrex	r3, [r3]
 800279e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80027a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	330c      	adds	r3, #12
 80027ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027b0:	643a      	str	r2, [r7, #64]	; 0x40
 80027b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80027b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027b8:	e841 2300 	strex	r3, r2, [r1]
 80027bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80027be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1e5      	bne.n	8002790 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3314      	adds	r3, #20
 80027ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	e853 3f00 	ldrex	r3, [r3]
 80027d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f023 0301 	bic.w	r3, r3, #1
 80027da:	64bb      	str	r3, [r7, #72]	; 0x48
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	3314      	adds	r3, #20
 80027e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ec:	e841 2300 	strex	r3, r2, [r1]
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1e5      	bne.n	80027c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d119      	bne.n	8002834 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	330c      	adds	r3, #12
 8002806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	e853 3f00 	ldrex	r3, [r3]
 800280e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f023 0310 	bic.w	r3, r3, #16
 8002816:	647b      	str	r3, [r7, #68]	; 0x44
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	330c      	adds	r3, #12
 800281e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002820:	61ba      	str	r2, [r7, #24]
 8002822:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002824:	6979      	ldr	r1, [r7, #20]
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	e841 2300 	strex	r3, r2, [r1]
 800282c:	613b      	str	r3, [r7, #16]
   return(result);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1e5      	bne.n	8002800 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002842:	bf00      	nop
 8002844:	3754      	adds	r7, #84	; 0x54
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b084      	sub	sp, #16
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f7ff ff77 	bl	800275c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002876:	b480      	push	{r7}
 8002878:	b085      	sub	sp, #20
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b21      	cmp	r3, #33	; 0x21
 8002888:	d13e      	bne.n	8002908 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002892:	d114      	bne.n	80028be <UART_Transmit_IT+0x48>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d110      	bne.n	80028be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	1c9a      	adds	r2, r3, #2
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	621a      	str	r2, [r3, #32]
 80028bc:	e008      	b.n	80028d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	1c59      	adds	r1, r3, #1
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6211      	str	r1, [r2, #32]
 80028c8:	781a      	ldrb	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29b      	uxth	r3, r3
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	4619      	mov	r1, r3
 80028de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10f      	bne.n	8002904 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002902:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	e000      	b.n	800290a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002908:	2302      	movs	r3, #2
  }
}
 800290a:	4618      	mov	r0, r3
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800292c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff fefc 	bl	8002734 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b08c      	sub	sp, #48	; 0x30
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b22      	cmp	r3, #34	; 0x22
 8002958:	f040 80ab 	bne.w	8002ab2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002964:	d117      	bne.n	8002996 <UART_Receive_IT+0x50>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d113      	bne.n	8002996 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800296e:	2300      	movs	r3, #0
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	b29b      	uxth	r3, r3
 8002980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002984:	b29a      	uxth	r2, r3
 8002986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002988:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298e:	1c9a      	adds	r2, r3, #2
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	629a      	str	r2, [r3, #40]	; 0x28
 8002994:	e026      	b.n	80029e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800299c:	2300      	movs	r3, #0
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a8:	d007      	beq.n	80029ba <UART_Receive_IT+0x74>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10a      	bne.n	80029c8 <UART_Receive_IT+0x82>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c4:	701a      	strb	r2, [r3, #0]
 80029c6:	e008      	b.n	80029da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4619      	mov	r1, r3
 80029f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d15a      	bne.n	8002aae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0220 	bic.w	r2, r2, #32
 8002a06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695a      	ldr	r2, [r3, #20]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d135      	bne.n	8002aa4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	330c      	adds	r3, #12
 8002a44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	e853 3f00 	ldrex	r3, [r3]
 8002a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f023 0310 	bic.w	r3, r3, #16
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	330c      	adds	r3, #12
 8002a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5e:	623a      	str	r2, [r7, #32]
 8002a60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a62:	69f9      	ldr	r1, [r7, #28]
 8002a64:	6a3a      	ldr	r2, [r7, #32]
 8002a66:	e841 2300 	strex	r3, r2, [r1]
 8002a6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1e5      	bne.n	8002a3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b10      	cmp	r3, #16
 8002a7e:	d10a      	bne.n	8002a96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff fe67 	bl	8002770 <HAL_UARTEx_RxEventCallback>
 8002aa2:	e002      	b.n	8002aaa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff fe4f 	bl	8002748 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e002      	b.n	8002ab4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e000      	b.n	8002ab4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002ab2:	2302      	movs	r3, #2
  }
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3730      	adds	r7, #48	; 0x30
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ac0:	b0c0      	sub	sp, #256	; 0x100
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad8:	68d9      	ldr	r1, [r3, #12]
 8002ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	ea40 0301 	orr.w	r3, r0, r1
 8002ae4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b14:	f021 010c 	bic.w	r1, r1, #12
 8002b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b22:	430b      	orrs	r3, r1
 8002b24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b36:	6999      	ldr	r1, [r3, #24]
 8002b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	ea40 0301 	orr.w	r3, r0, r1
 8002b42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	4b8f      	ldr	r3, [pc, #572]	; (8002d88 <UART_SetConfig+0x2cc>)
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d005      	beq.n	8002b5c <UART_SetConfig+0xa0>
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4b8d      	ldr	r3, [pc, #564]	; (8002d8c <UART_SetConfig+0x2d0>)
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d104      	bne.n	8002b66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b5c:	f7fe ffd6 	bl	8001b0c <HAL_RCC_GetPCLK2Freq>
 8002b60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b64:	e003      	b.n	8002b6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b66:	f7fe ffbd 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8002b6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b78:	f040 810c 	bne.w	8002d94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b80:	2200      	movs	r2, #0
 8002b82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b8e:	4622      	mov	r2, r4
 8002b90:	462b      	mov	r3, r5
 8002b92:	1891      	adds	r1, r2, r2
 8002b94:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b96:	415b      	adcs	r3, r3
 8002b98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b9e:	4621      	mov	r1, r4
 8002ba0:	eb12 0801 	adds.w	r8, r2, r1
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	eb43 0901 	adc.w	r9, r3, r1
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bbe:	4690      	mov	r8, r2
 8002bc0:	4699      	mov	r9, r3
 8002bc2:	4623      	mov	r3, r4
 8002bc4:	eb18 0303 	adds.w	r3, r8, r3
 8002bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002bcc:	462b      	mov	r3, r5
 8002bce:	eb49 0303 	adc.w	r3, r9, r3
 8002bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002be2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002be6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002bea:	460b      	mov	r3, r1
 8002bec:	18db      	adds	r3, r3, r3
 8002bee:	653b      	str	r3, [r7, #80]	; 0x50
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	eb42 0303 	adc.w	r3, r2, r3
 8002bf6:	657b      	str	r3, [r7, #84]	; 0x54
 8002bf8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002bfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c00:	f7fd fb38 	bl	8000274 <__aeabi_uldivmod>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4b61      	ldr	r3, [pc, #388]	; (8002d90 <UART_SetConfig+0x2d4>)
 8002c0a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	011c      	lsls	r4, r3, #4
 8002c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c16:	2200      	movs	r2, #0
 8002c18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c24:	4642      	mov	r2, r8
 8002c26:	464b      	mov	r3, r9
 8002c28:	1891      	adds	r1, r2, r2
 8002c2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c2c:	415b      	adcs	r3, r3
 8002c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c34:	4641      	mov	r1, r8
 8002c36:	eb12 0a01 	adds.w	sl, r2, r1
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	eb43 0b01 	adc.w	fp, r3, r1
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c54:	4692      	mov	sl, r2
 8002c56:	469b      	mov	fp, r3
 8002c58:	4643      	mov	r3, r8
 8002c5a:	eb1a 0303 	adds.w	r3, sl, r3
 8002c5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c62:	464b      	mov	r3, r9
 8002c64:	eb4b 0303 	adc.w	r3, fp, r3
 8002c68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c80:	460b      	mov	r3, r1
 8002c82:	18db      	adds	r3, r3, r3
 8002c84:	643b      	str	r3, [r7, #64]	; 0x40
 8002c86:	4613      	mov	r3, r2
 8002c88:	eb42 0303 	adc.w	r3, r2, r3
 8002c8c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c96:	f7fd faed 	bl	8000274 <__aeabi_uldivmod>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4b3b      	ldr	r3, [pc, #236]	; (8002d90 <UART_SetConfig+0x2d4>)
 8002ca2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	2264      	movs	r2, #100	; 0x64
 8002caa:	fb02 f303 	mul.w	r3, r2, r3
 8002cae:	1acb      	subs	r3, r1, r3
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002cb6:	4b36      	ldr	r3, [pc, #216]	; (8002d90 <UART_SetConfig+0x2d4>)
 8002cb8:	fba3 2302 	umull	r2, r3, r3, r2
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cc4:	441c      	add	r4, r3
 8002cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cd0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002cd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002cd8:	4642      	mov	r2, r8
 8002cda:	464b      	mov	r3, r9
 8002cdc:	1891      	adds	r1, r2, r2
 8002cde:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ce0:	415b      	adcs	r3, r3
 8002ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ce8:	4641      	mov	r1, r8
 8002cea:	1851      	adds	r1, r2, r1
 8002cec:	6339      	str	r1, [r7, #48]	; 0x30
 8002cee:	4649      	mov	r1, r9
 8002cf0:	414b      	adcs	r3, r1
 8002cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d00:	4659      	mov	r1, fp
 8002d02:	00cb      	lsls	r3, r1, #3
 8002d04:	4651      	mov	r1, sl
 8002d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d0a:	4651      	mov	r1, sl
 8002d0c:	00ca      	lsls	r2, r1, #3
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4619      	mov	r1, r3
 8002d12:	4603      	mov	r3, r0
 8002d14:	4642      	mov	r2, r8
 8002d16:	189b      	adds	r3, r3, r2
 8002d18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d1c:	464b      	mov	r3, r9
 8002d1e:	460a      	mov	r2, r1
 8002d20:	eb42 0303 	adc.w	r3, r2, r3
 8002d24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	18db      	adds	r3, r3, r3
 8002d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d42:	4613      	mov	r3, r2
 8002d44:	eb42 0303 	adc.w	r3, r2, r3
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d52:	f7fd fa8f 	bl	8000274 <__aeabi_uldivmod>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <UART_SetConfig+0x2d4>)
 8002d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d60:	095b      	lsrs	r3, r3, #5
 8002d62:	2164      	movs	r1, #100	; 0x64
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	3332      	adds	r3, #50	; 0x32
 8002d6e:	4a08      	ldr	r2, [pc, #32]	; (8002d90 <UART_SetConfig+0x2d4>)
 8002d70:	fba2 2303 	umull	r2, r3, r2, r3
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	f003 0207 	and.w	r2, r3, #7
 8002d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4422      	add	r2, r4
 8002d82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d84:	e105      	b.n	8002f92 <UART_SetConfig+0x4d6>
 8002d86:	bf00      	nop
 8002d88:	40011000 	.word	0x40011000
 8002d8c:	40011400 	.word	0x40011400
 8002d90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002da2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002da6:	4642      	mov	r2, r8
 8002da8:	464b      	mov	r3, r9
 8002daa:	1891      	adds	r1, r2, r2
 8002dac:	6239      	str	r1, [r7, #32]
 8002dae:	415b      	adcs	r3, r3
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
 8002db2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002db6:	4641      	mov	r1, r8
 8002db8:	1854      	adds	r4, r2, r1
 8002dba:	4649      	mov	r1, r9
 8002dbc:	eb43 0501 	adc.w	r5, r3, r1
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	00eb      	lsls	r3, r5, #3
 8002dca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dce:	00e2      	lsls	r2, r4, #3
 8002dd0:	4614      	mov	r4, r2
 8002dd2:	461d      	mov	r5, r3
 8002dd4:	4643      	mov	r3, r8
 8002dd6:	18e3      	adds	r3, r4, r3
 8002dd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ddc:	464b      	mov	r3, r9
 8002dde:	eb45 0303 	adc.w	r3, r5, r3
 8002de2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002df2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e02:	4629      	mov	r1, r5
 8002e04:	008b      	lsls	r3, r1, #2
 8002e06:	4621      	mov	r1, r4
 8002e08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	008a      	lsls	r2, r1, #2
 8002e10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e14:	f7fd fa2e 	bl	8000274 <__aeabi_uldivmod>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4b60      	ldr	r3, [pc, #384]	; (8002fa0 <UART_SetConfig+0x4e4>)
 8002e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	011c      	lsls	r4, r3, #4
 8002e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e38:	4642      	mov	r2, r8
 8002e3a:	464b      	mov	r3, r9
 8002e3c:	1891      	adds	r1, r2, r2
 8002e3e:	61b9      	str	r1, [r7, #24]
 8002e40:	415b      	adcs	r3, r3
 8002e42:	61fb      	str	r3, [r7, #28]
 8002e44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e48:	4641      	mov	r1, r8
 8002e4a:	1851      	adds	r1, r2, r1
 8002e4c:	6139      	str	r1, [r7, #16]
 8002e4e:	4649      	mov	r1, r9
 8002e50:	414b      	adcs	r3, r1
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e60:	4659      	mov	r1, fp
 8002e62:	00cb      	lsls	r3, r1, #3
 8002e64:	4651      	mov	r1, sl
 8002e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e6a:	4651      	mov	r1, sl
 8002e6c:	00ca      	lsls	r2, r1, #3
 8002e6e:	4610      	mov	r0, r2
 8002e70:	4619      	mov	r1, r3
 8002e72:	4603      	mov	r3, r0
 8002e74:	4642      	mov	r2, r8
 8002e76:	189b      	adds	r3, r3, r2
 8002e78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e7c:	464b      	mov	r3, r9
 8002e7e:	460a      	mov	r2, r1
 8002e80:	eb42 0303 	adc.w	r3, r2, r3
 8002e84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ea0:	4649      	mov	r1, r9
 8002ea2:	008b      	lsls	r3, r1, #2
 8002ea4:	4641      	mov	r1, r8
 8002ea6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eaa:	4641      	mov	r1, r8
 8002eac:	008a      	lsls	r2, r1, #2
 8002eae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002eb2:	f7fd f9df 	bl	8000274 <__aeabi_uldivmod>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4b39      	ldr	r3, [pc, #228]	; (8002fa0 <UART_SetConfig+0x4e4>)
 8002ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ec0:	095b      	lsrs	r3, r3, #5
 8002ec2:	2164      	movs	r1, #100	; 0x64
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	3332      	adds	r3, #50	; 0x32
 8002ece:	4a34      	ldr	r2, [pc, #208]	; (8002fa0 <UART_SetConfig+0x4e4>)
 8002ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed4:	095b      	lsrs	r3, r3, #5
 8002ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eda:	441c      	add	r4, r3
 8002edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	673b      	str	r3, [r7, #112]	; 0x70
 8002ee4:	677a      	str	r2, [r7, #116]	; 0x74
 8002ee6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002eea:	4642      	mov	r2, r8
 8002eec:	464b      	mov	r3, r9
 8002eee:	1891      	adds	r1, r2, r2
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	415b      	adcs	r3, r3
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002efa:	4641      	mov	r1, r8
 8002efc:	1851      	adds	r1, r2, r1
 8002efe:	6039      	str	r1, [r7, #0]
 8002f00:	4649      	mov	r1, r9
 8002f02:	414b      	adcs	r3, r1
 8002f04:	607b      	str	r3, [r7, #4]
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f12:	4659      	mov	r1, fp
 8002f14:	00cb      	lsls	r3, r1, #3
 8002f16:	4651      	mov	r1, sl
 8002f18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f1c:	4651      	mov	r1, sl
 8002f1e:	00ca      	lsls	r2, r1, #3
 8002f20:	4610      	mov	r0, r2
 8002f22:	4619      	mov	r1, r3
 8002f24:	4603      	mov	r3, r0
 8002f26:	4642      	mov	r2, r8
 8002f28:	189b      	adds	r3, r3, r2
 8002f2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f2c:	464b      	mov	r3, r9
 8002f2e:	460a      	mov	r2, r1
 8002f30:	eb42 0303 	adc.w	r3, r2, r3
 8002f34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	663b      	str	r3, [r7, #96]	; 0x60
 8002f40:	667a      	str	r2, [r7, #100]	; 0x64
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f4e:	4649      	mov	r1, r9
 8002f50:	008b      	lsls	r3, r1, #2
 8002f52:	4641      	mov	r1, r8
 8002f54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f58:	4641      	mov	r1, r8
 8002f5a:	008a      	lsls	r2, r1, #2
 8002f5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f60:	f7fd f988 	bl	8000274 <__aeabi_uldivmod>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <UART_SetConfig+0x4e4>)
 8002f6a:	fba3 1302 	umull	r1, r3, r3, r2
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	2164      	movs	r1, #100	; 0x64
 8002f72:	fb01 f303 	mul.w	r3, r1, r3
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	3332      	adds	r3, #50	; 0x32
 8002f7c:	4a08      	ldr	r2, [pc, #32]	; (8002fa0 <UART_SetConfig+0x4e4>)
 8002f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	f003 020f 	and.w	r2, r3, #15
 8002f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4422      	add	r2, r4
 8002f90:	609a      	str	r2, [r3, #8]
}
 8002f92:	bf00      	nop
 8002f94:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f9e:	bf00      	nop
 8002fa0:	51eb851f 	.word	0x51eb851f

08002fa4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fb6:	2b84      	cmp	r3, #132	; 0x84
 8002fb8:	d005      	beq.n	8002fc6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002fba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3303      	adds	r3, #3
 8002fc4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fda:	f3ef 8305 	mrs	r3, IPSR
 8002fde:	607b      	str	r3, [r7, #4]
  return(result);
 8002fe0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	bf14      	ite	ne
 8002fe6:	2301      	movne	r3, #1
 8002fe8:	2300      	moveq	r3, #0
 8002fea:	b2db      	uxtb	r3, r3
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002ffc:	f001 faf4 	bl	80045e8 <vTaskStartScheduler>
  
  return osOK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	bd80      	pop	{r7, pc}

08003006 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003006:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003008:	b089      	sub	sp, #36	; 0x24
 800300a:	af04      	add	r7, sp, #16
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d020      	beq.n	800305a <osThreadCreate+0x54>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d01c      	beq.n	800305a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685c      	ldr	r4, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681d      	ldr	r5, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691e      	ldr	r6, [r3, #16]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff ffb6 	bl	8002fa4 <makeFreeRtosPriority>
 8003038:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003042:	9202      	str	r2, [sp, #8]
 8003044:	9301      	str	r3, [sp, #4]
 8003046:	9100      	str	r1, [sp, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	4632      	mov	r2, r6
 800304c:	4629      	mov	r1, r5
 800304e:	4620      	mov	r0, r4
 8003050:	f001 f8be 	bl	80041d0 <xTaskCreateStatic>
 8003054:	4603      	mov	r3, r0
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	e01c      	b.n	8003094 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685c      	ldr	r4, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003066:	b29e      	uxth	r6, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff ff98 	bl	8002fa4 <makeFreeRtosPriority>
 8003074:	4602      	mov	r2, r0
 8003076:	f107 030c 	add.w	r3, r7, #12
 800307a:	9301      	str	r3, [sp, #4]
 800307c:	9200      	str	r2, [sp, #0]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	4632      	mov	r2, r6
 8003082:	4629      	mov	r1, r5
 8003084:	4620      	mov	r0, r4
 8003086:	f001 f900 	bl	800428a <xTaskCreate>
 800308a:	4603      	mov	r3, r0
 800308c:	2b01      	cmp	r3, #1
 800308e:	d001      	beq.n	8003094 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003090:	2300      	movs	r3, #0
 8003092:	e000      	b.n	8003096 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003094:	68fb      	ldr	r3, [r7, #12]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080030a0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a09      	ldr	r2, [pc, #36]	; (80030d0 <osDelay+0x30>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	08db      	lsrs	r3, r3, #3
 80030b2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <osDelay+0x1e>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	e000      	b.n	80030c0 <osDelay+0x20>
 80030be:	2301      	movs	r3, #1
 80030c0:	4618      	mov	r0, r3
 80030c2:	f001 fa59 	bl	8004578 <vTaskDelay>
  
  return osOK;
 80030c6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	cccccccd 	.word	0xcccccccd

080030d4 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	3303      	adds	r3, #3
 80030e2:	f023 0303 	bic.w	r3, r3, #3
 80030e6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80030e8:	2014      	movs	r0, #20
 80030ea:	f002 fadd 	bl	80056a8 <pvPortMalloc>
 80030ee:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d046      	beq.n	8003184 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2200      	movs	r2, #0
 8003108:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f002 faca 	bl	80056a8 <pvPortMalloc>
 8003114:	4602      	mov	r2, r0
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d02b      	beq.n	800317a <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	fb02 f303 	mul.w	r3, r2, r3
 800312c:	4618      	mov	r0, r3
 800312e:	f002 fabb 	bl	80056a8 <pvPortMalloc>
 8003132:	4602      	mov	r2, r0
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d011      	beq.n	8003164 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8003140:	2300      	movs	r3, #0
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	e008      	b.n	8003158 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4413      	add	r3, r2
 800314e:	2200      	movs	r2, #0
 8003150:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	3301      	adds	r3, #1
 8003156:	613b      	str	r3, [r7, #16]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	429a      	cmp	r2, r3
 8003160:	d3f1      	bcc.n	8003146 <osPoolCreate+0x72>
 8003162:	e00f      	b.n	8003184 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4618      	mov	r0, r3
 800316a:	f002 fb69 	bl	8005840 <vPortFree>
        vPortFree(thePool);
 800316e:	6978      	ldr	r0, [r7, #20]
 8003170:	f002 fb66 	bl	8005840 <vPortFree>
        thePool = NULL;
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	e004      	b.n	8003184 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800317a:	6978      	ldr	r0, [r7, #20]
 800317c:	f002 fb60 	bl	8005840 <vPortFree>
      thePool = NULL;
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8003184:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8003186:	4618      	mov	r0, r3
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b08a      	sub	sp, #40	; 0x28
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800319a:	2300      	movs	r3, #0
 800319c:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800319e:	f7ff ff19 	bl	8002fd4 <inHandlerMode>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00e      	beq.n	80031c6 <osPoolAlloc+0x38>
	__asm volatile
 80031a8:	f3ef 8211 	mrs	r2, BASEPRI
 80031ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	617a      	str	r2, [r7, #20]
 80031be:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80031c0:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
 80031c4:	e001      	b.n	80031ca <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 80031c6:	f002 f8ed 	bl	80053a4 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	e029      	b.n	8003224 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	4413      	add	r3, r2
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6892      	ldr	r2, [r2, #8]
 80031dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80031e0:	fb01 f202 	mul.w	r2, r1, r2
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	4413      	add	r3, r2
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d113      	bne.n	800321e <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	4413      	add	r3, r2
 80031fe:	2201      	movs	r2, #1
 8003200:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4619      	mov	r1, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	fb02 f303 	mul.w	r3, r2, r3
 8003212:	440b      	add	r3, r1
 8003214:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	611a      	str	r2, [r3, #16]
      break;
 800321c:	e007      	b.n	800322e <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3301      	adds	r3, #1
 8003222:	61fb      	str	r3, [r7, #28]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	429a      	cmp	r2, r3
 800322c:	d3d0      	bcc.n	80031d0 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800322e:	f7ff fed1 	bl	8002fd4 <inHandlerMode>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f383 8811 	msr	BASEPRI, r3
}
 8003242:	e001      	b.n	8003248 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8003244:	f002 f8de 	bl	8005404 <vPortExitCritical>
  }
  
  return p;
 8003248:	6a3b      	ldr	r3, [r7, #32]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3728      	adds	r7, #40	; 0x28
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8003252:	b480      	push	{r7}
 8003254:	b085      	sub	sp, #20
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <osPoolFree+0x14>
    return osErrorParameter;
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	e030      	b.n	80032c8 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <osPoolFree+0x1e>
    return osErrorParameter;
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	e02b      	b.n	80032c8 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d201      	bcs.n	800327e <osPoolFree+0x2c>
    return osErrorParameter;
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	e024      	b.n	80032c8 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003292:	fb01 f202 	mul.w	r2, r1, r2
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <osPoolFree+0x4e>
    return osErrorParameter;
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	e013      	b.n	80032c8 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032aa:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d301      	bcc.n	80032ba <osPoolFree+0x68>
    return osErrorParameter;
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	e006      	b.n	80032c8 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4413      	add	r3, r2
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af02      	add	r7, sp, #8
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d011      	beq.n	800330a <osMessageCreate+0x36>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00d      	beq.n	800330a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6859      	ldr	r1, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2400      	movs	r4, #0
 8003300:	9400      	str	r4, [sp, #0]
 8003302:	f000 f9f5 	bl	80036f0 <xQueueGenericCreateStatic>
 8003306:	4603      	mov	r3, r0
 8003308:	e008      	b.n	800331c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	4619      	mov	r1, r3
 8003316:	f000 fa63 	bl	80037e0 <xQueueGenericCreate>
 800331a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	bd90      	pop	{r4, r7, pc}

08003324 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a1f      	ldr	r2, [pc, #124]	; (80033b4 <osMessagePut+0x90>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	08db      	lsrs	r3, r3, #3
 800333e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <osMessagePut+0x26>
    ticks = 1;
 8003346:	2301      	movs	r3, #1
 8003348:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800334a:	f7ff fe43 	bl	8002fd4 <inHandlerMode>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01d      	beq.n	8003390 <osMessagePut+0x6c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003354:	f107 0210 	add.w	r2, r7, #16
 8003358:	f107 0108 	add.w	r1, r7, #8
 800335c:	2300      	movs	r3, #0
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 fbc8 	bl	8003af4 <xQueueGenericSendFromISR>
 8003364:	4603      	mov	r3, r0
 8003366:	2b01      	cmp	r3, #1
 8003368:	d001      	beq.n	800336e <osMessagePut+0x4a>
      return osErrorOS;
 800336a:	23ff      	movs	r3, #255	; 0xff
 800336c:	e01d      	b.n	80033aa <osMessagePut+0x86>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <osMessagePut+0x66>
 8003374:	f003 fe22 	bl	8006fbc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8003378:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <osMessagePut+0x94>)
 800337a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	e00e      	b.n	80033a8 <osMessagePut+0x84>
 800338a:	f003 fdfb 	bl	8006f84 <SEGGER_SYSVIEW_RecordExitISR>
 800338e:	e00b      	b.n	80033a8 <osMessagePut+0x84>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003390:	f107 0108 	add.w	r1, r7, #8
 8003394:	2300      	movs	r3, #0
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 fa85 	bl	80038a8 <xQueueGenericSend>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d001      	beq.n	80033a8 <osMessagePut+0x84>
      return osErrorOS;
 80033a4:	23ff      	movs	r3, #255	; 0xff
 80033a6:	e000      	b.n	80033aa <osMessagePut+0x86>
    }
  }
  
  return osOK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	cccccccd 	.word	0xcccccccd
 80033b8:	e000ed04 	.word	0xe000ed04

080033bc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80033bc:	b590      	push	{r4, r7, lr}
 80033be:	b08b      	sub	sp, #44	; 0x2c
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10a      	bne.n	80033ec <osMessageGet+0x30>
    event.status = osErrorParameter;
 80033d6:	2380      	movs	r3, #128	; 0x80
 80033d8:	617b      	str	r3, [r7, #20]
    return event;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	461c      	mov	r4, r3
 80033de:	f107 0314 	add.w	r3, r7, #20
 80033e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033ea:	e05d      	b.n	80034a8 <osMessageGet+0xec>
  }
  
  taskWoken = pdFALSE;
 80033ec:	2300      	movs	r3, #0
 80033ee:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80033f0:	2300      	movs	r3, #0
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fa:	d103      	bne.n	8003404 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80033fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
 8003402:	e00d      	b.n	8003420 <osMessageGet+0x64>
  }
  else if (millisec != 0) {
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <osMessageGet+0x64>
    ticks = millisec / portTICK_PERIOD_MS;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a28      	ldr	r2, [pc, #160]	; (80034b0 <osMessageGet+0xf4>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	08db      	lsrs	r3, r3, #3
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <osMessageGet+0x64>
      ticks = 1;
 800341c:	2301      	movs	r3, #1
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003420:	f7ff fdd8 	bl	8002fd4 <inHandlerMode>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d021      	beq.n	800346e <osMessageGet+0xb2>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800342a:	f107 0220 	add.w	r2, r7, #32
 800342e:	f107 0314 	add.w	r3, r7, #20
 8003432:	3304      	adds	r3, #4
 8003434:	4619      	mov	r1, r3
 8003436:	68b8      	ldr	r0, [r7, #8]
 8003438:	f000 fd1c 	bl	8003e74 <xQueueReceiveFromISR>
 800343c:	4603      	mov	r3, r0
 800343e:	2b01      	cmp	r3, #1
 8003440:	d102      	bne.n	8003448 <osMessageGet+0x8c>
      /* We have mail */
      event.status = osEventMessage;
 8003442:	2310      	movs	r3, #16
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	e001      	b.n	800344c <osMessageGet+0x90>
    }
    else {
      event.status = osOK;
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <osMessageGet+0xac>
 8003452:	f003 fdb3 	bl	8006fbc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8003456:	4b17      	ldr	r3, [pc, #92]	; (80034b4 <osMessageGet+0xf8>)
 8003458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	e017      	b.n	8003498 <osMessageGet+0xdc>
 8003468:	f003 fd8c 	bl	8006f84 <SEGGER_SYSVIEW_RecordExitISR>
 800346c:	e014      	b.n	8003498 <osMessageGet+0xdc>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800346e:	f107 0314 	add.w	r3, r7, #20
 8003472:	3304      	adds	r3, #4
 8003474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003476:	4619      	mov	r1, r3
 8003478:	68b8      	ldr	r0, [r7, #8]
 800347a:	f000 fbeb 	bl	8003c54 <xQueueReceive>
 800347e:	4603      	mov	r3, r0
 8003480:	2b01      	cmp	r3, #1
 8003482:	d102      	bne.n	800348a <osMessageGet+0xce>
      /* We have mail */
      event.status = osEventMessage;
 8003484:	2310      	movs	r3, #16
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	e006      	b.n	8003498 <osMessageGet+0xdc>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <osMessageGet+0xd8>
 8003490:	2300      	movs	r3, #0
 8003492:	e000      	b.n	8003496 <osMessageGet+0xda>
 8003494:	2340      	movs	r3, #64	; 0x40
 8003496:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	461c      	mov	r4, r3
 800349c:	f107 0314 	add.w	r3, r7, #20
 80034a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	372c      	adds	r7, #44	; 0x2c
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd90      	pop	{r4, r7, pc}
 80034b0:	cccccccd 	.word	0xcccccccd
 80034b4:	e000ed04 	.word	0xe000ed04

080034b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f103 0208 	add.w	r2, r3, #8
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f04f 32ff 	mov.w	r2, #4294967295
 80034d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f103 0208 	add.w	r2, r3, #8
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f103 0208 	add.w	r2, r3, #8
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003512:	b480      	push	{r7}
 8003514:	b085      	sub	sp, #20
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	601a      	str	r2, [r3, #0]
}
 800354e:	bf00      	nop
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800355a:	b480      	push	{r7}
 800355c:	b085      	sub	sp, #20
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003570:	d103      	bne.n	800357a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	e00c      	b.n	8003594 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3308      	adds	r3, #8
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	e002      	b.n	8003588 <vListInsert+0x2e>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	429a      	cmp	r2, r3
 8003592:	d2f6      	bcs.n	8003582 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	601a      	str	r2, [r3, #0]
}
 80035c0:	bf00      	nop
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6892      	ldr	r2, [r2, #8]
 80035e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6852      	ldr	r2, [r2, #4]
 80035ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d103      	bne.n	8003600 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	1e5a      	subs	r2, r3, #1
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <xQueueGenericReset+0x2a>
	__asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	60bb      	str	r3, [r7, #8]
}
 8003646:	bf00      	nop
 8003648:	e7fe      	b.n	8003648 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800364a:	f001 feab 	bl	80053a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003656:	68f9      	ldr	r1, [r7, #12]
 8003658:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800365a:	fb01 f303 	mul.w	r3, r1, r3
 800365e:	441a      	add	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367a:	3b01      	subs	r3, #1
 800367c:	68f9      	ldr	r1, [r7, #12]
 800367e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	441a      	add	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	22ff      	movs	r2, #255	; 0xff
 800368e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	22ff      	movs	r2, #255	; 0xff
 8003696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d114      	bne.n	80036ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01a      	beq.n	80036de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	3310      	adds	r3, #16
 80036ac:	4618      	mov	r0, r3
 80036ae:	f001 fa2d 	bl	8004b0c <xTaskRemoveFromEventList>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d012      	beq.n	80036de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <xQueueGenericReset+0xcc>)
 80036ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	e009      	b.n	80036de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	3310      	adds	r3, #16
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff fef2 	bl	80034b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3324      	adds	r3, #36	; 0x24
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff feed 	bl	80034b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036de:	f001 fe91 	bl	8005404 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036e2:	2301      	movs	r3, #1
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	e000ed04 	.word	0xe000ed04

080036f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08e      	sub	sp, #56	; 0x38
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003716:	bf00      	nop
 8003718:	e7fe      	b.n	8003718 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003732:	bf00      	nop
 8003734:	e7fe      	b.n	8003734 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <xQueueGenericCreateStatic+0x52>
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <xQueueGenericCreateStatic+0x56>
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <xQueueGenericCreateStatic+0x58>
 8003746:	2300      	movs	r3, #0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	623b      	str	r3, [r7, #32]
}
 800375e:	bf00      	nop
 8003760:	e7fe      	b.n	8003760 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d102      	bne.n	800376e <xQueueGenericCreateStatic+0x7e>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <xQueueGenericCreateStatic+0x82>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <xQueueGenericCreateStatic+0x84>
 8003772:	2300      	movs	r3, #0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10a      	bne.n	800378e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377c:	f383 8811 	msr	BASEPRI, r3
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	61fb      	str	r3, [r7, #28]
}
 800378a:	bf00      	nop
 800378c:	e7fe      	b.n	800378c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800378e:	2350      	movs	r3, #80	; 0x50
 8003790:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2b50      	cmp	r3, #80	; 0x50
 8003796:	d00a      	beq.n	80037ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	61bb      	str	r3, [r7, #24]
}
 80037aa:	bf00      	nop
 80037ac:	e7fe      	b.n	80037ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80037ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80037b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00d      	beq.n	80037d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	4613      	mov	r3, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	68b9      	ldr	r1, [r7, #8]
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f83f 	bl	8003854 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80037d8:	4618      	mov	r0, r3
 80037da:	3730      	adds	r7, #48	; 0x30
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08a      	sub	sp, #40	; 0x28
 80037e4:	af02      	add	r7, sp, #8
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	4613      	mov	r3, r2
 80037ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10a      	bne.n	800380a <xQueueGenericCreate+0x2a>
	__asm volatile
 80037f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	613b      	str	r3, [r7, #16]
}
 8003806:	bf00      	nop
 8003808:	e7fe      	b.n	8003808 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	3350      	adds	r3, #80	; 0x50
 8003818:	4618      	mov	r0, r3
 800381a:	f001 ff45 	bl	80056a8 <pvPortMalloc>
 800381e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d011      	beq.n	800384a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	3350      	adds	r3, #80	; 0x50
 800382e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003838:	79fa      	ldrb	r2, [r7, #7]
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	4613      	mov	r3, r2
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 f805 	bl	8003854 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800384a:	69bb      	ldr	r3, [r7, #24]
	}
 800384c:	4618      	mov	r0, r3
 800384e:	3720      	adds	r7, #32
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
 8003860:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d103      	bne.n	8003870 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	e002      	b.n	8003876 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003882:	2101      	movs	r1, #1
 8003884:	69b8      	ldr	r0, [r7, #24]
 8003886:	f7ff fecb 	bl	8003620 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	78fa      	ldrb	r2, [r7, #3]
 800388e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8003892:	78fb      	ldrb	r3, [r7, #3]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	68f9      	ldr	r1, [r7, #12]
 8003898:	2073      	movs	r0, #115	; 0x73
 800389a:	f002 ff5f 	bl	800675c <SEGGER_SYSVIEW_RecordU32x3>
}
 800389e:	bf00      	nop
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b090      	sub	sp, #64	; 0x40
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038b6:	2300      	movs	r3, #0
 80038b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10a      	bne.n	80038da <xQueueGenericSend+0x32>
	__asm volatile
 80038c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c8:	f383 8811 	msr	BASEPRI, r3
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038d6:	bf00      	nop
 80038d8:	e7fe      	b.n	80038d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d103      	bne.n	80038e8 <xQueueGenericSend+0x40>
 80038e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <xQueueGenericSend+0x44>
 80038e8:	2301      	movs	r3, #1
 80038ea:	e000      	b.n	80038ee <xQueueGenericSend+0x46>
 80038ec:	2300      	movs	r3, #0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10a      	bne.n	8003908 <xQueueGenericSend+0x60>
	__asm volatile
 80038f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003904:	bf00      	nop
 8003906:	e7fe      	b.n	8003906 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d103      	bne.n	8003916 <xQueueGenericSend+0x6e>
 800390e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <xQueueGenericSend+0x72>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <xQueueGenericSend+0x74>
 800391a:	2300      	movs	r3, #0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10a      	bne.n	8003936 <xQueueGenericSend+0x8e>
	__asm volatile
 8003920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	623b      	str	r3, [r7, #32]
}
 8003932:	bf00      	nop
 8003934:	e7fe      	b.n	8003934 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003936:	f001 fae5 	bl	8004f04 <xTaskGetSchedulerState>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d102      	bne.n	8003946 <xQueueGenericSend+0x9e>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <xQueueGenericSend+0xa2>
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <xQueueGenericSend+0xa4>
 800394a:	2300      	movs	r3, #0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <xQueueGenericSend+0xbe>
	__asm volatile
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	61fb      	str	r3, [r7, #28]
}
 8003962:	bf00      	nop
 8003964:	e7fe      	b.n	8003964 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003966:	f001 fd1d 	bl	80053a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003972:	429a      	cmp	r2, r3
 8003974:	d302      	bcc.n	800397c <xQueueGenericSend+0xd4>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d136      	bne.n	80039ea <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 800397c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397e:	4618      	mov	r0, r3
 8003980:	f003 fc7a 	bl	8007278 <SEGGER_SYSVIEW_ShrinkId>
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	460b      	mov	r3, r1
 800398e:	4601      	mov	r1, r0
 8003990:	205a      	movs	r0, #90	; 0x5a
 8003992:	f002 ff59 	bl	8006848 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	68b9      	ldr	r1, [r7, #8]
 800399a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800399c:	f000 fb08 	bl	8003fb0 <prvCopyDataToQueue>
 80039a0:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d010      	beq.n	80039cc <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ac:	3324      	adds	r3, #36	; 0x24
 80039ae:	4618      	mov	r0, r3
 80039b0:	f001 f8ac 	bl	8004b0c <xTaskRemoveFromEventList>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d013      	beq.n	80039e2 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039ba:	4b4d      	ldr	r3, [pc, #308]	; (8003af0 <xQueueGenericSend+0x248>)
 80039bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	e00a      	b.n	80039e2 <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039d2:	4b47      	ldr	r3, [pc, #284]	; (8003af0 <xQueueGenericSend+0x248>)
 80039d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039e2:	f001 fd0f 	bl	8005404 <vPortExitCritical>
				return pdPASS;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e07d      	b.n	8003ae6 <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d110      	bne.n	8003a12 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039f0:	f001 fd08 	bl	8005404 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80039f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f6:	4618      	mov	r0, r3
 80039f8:	f003 fc3e 	bl	8007278 <SEGGER_SYSVIEW_ShrinkId>
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	460b      	mov	r3, r1
 8003a06:	4601      	mov	r1, r0
 8003a08:	205a      	movs	r0, #90	; 0x5a
 8003a0a:	f002 ff1d 	bl	8006848 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e069      	b.n	8003ae6 <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d106      	bne.n	8003a26 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a18:	f107 0314 	add.w	r3, r7, #20
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f001 f8db 	bl	8004bd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a22:	2301      	movs	r3, #1
 8003a24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a26:	f001 fced 	bl	8005404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a2a:	f000 fe59 	bl	80046e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a2e:	f001 fcb9 	bl	80053a4 <vPortEnterCritical>
 8003a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a38:	b25b      	sxtb	r3, r3
 8003a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3e:	d103      	bne.n	8003a48 <xQueueGenericSend+0x1a0>
 8003a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a4e:	b25b      	sxtb	r3, r3
 8003a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a54:	d103      	bne.n	8003a5e <xQueueGenericSend+0x1b6>
 8003a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a5e:	f001 fcd1 	bl	8005404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a62:	1d3a      	adds	r2, r7, #4
 8003a64:	f107 0314 	add.w	r3, r7, #20
 8003a68:	4611      	mov	r1, r2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f001 f8ca 	bl	8004c04 <xTaskCheckForTimeOut>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d124      	bne.n	8003ac0 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a78:	f000 fb92 	bl	80041a0 <prvIsQueueFull>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d018      	beq.n	8003ab4 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	3310      	adds	r3, #16
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	4611      	mov	r1, r2
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f001 f81a 	bl	8004ac4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a92:	f000 fb1d 	bl	80040d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a96:	f000 fe31 	bl	80046fc <xTaskResumeAll>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f47f af62 	bne.w	8003966 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003aa2:	4b13      	ldr	r3, [pc, #76]	; (8003af0 <xQueueGenericSend+0x248>)
 8003aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	e758      	b.n	8003966 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ab6:	f000 fb0b 	bl	80040d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003aba:	f000 fe1f 	bl	80046fc <xTaskResumeAll>
 8003abe:	e752      	b.n	8003966 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ac2:	f000 fb05 	bl	80040d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ac6:	f000 fe19 	bl	80046fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8003aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003acc:	4618      	mov	r0, r3
 8003ace:	f003 fbd3 	bl	8007278 <SEGGER_SYSVIEW_ShrinkId>
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	460b      	mov	r3, r1
 8003adc:	4601      	mov	r1, r0
 8003ade:	205a      	movs	r0, #90	; 0x5a
 8003ae0:	f002 feb2 	bl	8006848 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8003ae4:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3738      	adds	r7, #56	; 0x38
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	e000ed04 	.word	0xe000ed04

08003af4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b090      	sub	sp, #64	; 0x40
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10a      	bne.n	8003b22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b10:	f383 8811 	msr	BASEPRI, r3
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b1e:	bf00      	nop
 8003b20:	e7fe      	b.n	8003b20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d103      	bne.n	8003b30 <xQueueGenericSendFromISR+0x3c>
 8003b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <xQueueGenericSendFromISR+0x40>
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <xQueueGenericSendFromISR+0x42>
 8003b34:	2300      	movs	r3, #0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10a      	bne.n	8003b50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3e:	f383 8811 	msr	BASEPRI, r3
 8003b42:	f3bf 8f6f 	isb	sy
 8003b46:	f3bf 8f4f 	dsb	sy
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b4c:	bf00      	nop
 8003b4e:	e7fe      	b.n	8003b4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d103      	bne.n	8003b5e <xQueueGenericSendFromISR+0x6a>
 8003b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <xQueueGenericSendFromISR+0x6e>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <xQueueGenericSendFromISR+0x70>
 8003b62:	2300      	movs	r3, #0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10a      	bne.n	8003b7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6c:	f383 8811 	msr	BASEPRI, r3
 8003b70:	f3bf 8f6f 	isb	sy
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	623b      	str	r3, [r7, #32]
}
 8003b7a:	bf00      	nop
 8003b7c:	e7fe      	b.n	8003b7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b7e:	f001 fcfb 	bl	8005578 <vPortValidateInterruptPriority>
	__asm volatile
 8003b82:	f3ef 8211 	mrs	r2, BASEPRI
 8003b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8a:	f383 8811 	msr	BASEPRI, r3
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f3bf 8f4f 	dsb	sy
 8003b96:	61fa      	str	r2, [r7, #28]
 8003b98:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8003b9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d302      	bcc.n	8003bb0 <xQueueGenericSendFromISR+0xbc>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d139      	bne.n	8003c24 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8003bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f003 fb58 	bl	8007278 <SEGGER_SYSVIEW_ShrinkId>
 8003bc8:	4601      	mov	r1, r0
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	2060      	movs	r0, #96	; 0x60
 8003bd0:	f002 fd6a 	bl	80066a8 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	68b9      	ldr	r1, [r7, #8]
 8003bd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003bda:	f000 f9e9 	bl	8003fb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003bde:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be6:	d112      	bne.n	8003c0e <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d016      	beq.n	8003c1e <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf2:	3324      	adds	r3, #36	; 0x24
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 ff89 	bl	8004b0c <xTaskRemoveFromEventList>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00e      	beq.n	8003c1e <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00b      	beq.n	8003c1e <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	e007      	b.n	8003c1e <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c12:	3301      	adds	r3, #1
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	b25a      	sxtb	r2, r3
 8003c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003c22:	e00b      	b.n	8003c3c <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8003c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c26:	4618      	mov	r0, r3
 8003c28:	f003 fb26 	bl	8007278 <SEGGER_SYSVIEW_ShrinkId>
 8003c2c:	4601      	mov	r1, r0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	461a      	mov	r2, r3
 8003c32:	2060      	movs	r0, #96	; 0x60
 8003c34:	f002 fd38 	bl	80066a8 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f383 8811 	msr	BASEPRI, r3
}
 8003c46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3740      	adds	r7, #64	; 0x40
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c54:	b590      	push	{r4, r7, lr}
 8003c56:	b08f      	sub	sp, #60	; 0x3c
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c60:	2300      	movs	r3, #0
 8003c62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10a      	bne.n	8003c84 <xQueueReceive+0x30>
	__asm volatile
 8003c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	623b      	str	r3, [r7, #32]
}
 8003c80:	bf00      	nop
 8003c82:	e7fe      	b.n	8003c82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d103      	bne.n	8003c92 <xQueueReceive+0x3e>
 8003c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <xQueueReceive+0x42>
 8003c92:	2301      	movs	r3, #1
 8003c94:	e000      	b.n	8003c98 <xQueueReceive+0x44>
 8003c96:	2300      	movs	r3, #0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10a      	bne.n	8003cb2 <xQueueReceive+0x5e>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	61fb      	str	r3, [r7, #28]
}
 8003cae:	bf00      	nop
 8003cb0:	e7fe      	b.n	8003cb0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cb2:	f001 f927 	bl	8004f04 <xTaskGetSchedulerState>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d102      	bne.n	8003cc2 <xQueueReceive+0x6e>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <xQueueReceive+0x72>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <xQueueReceive+0x74>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10a      	bne.n	8003ce2 <xQueueReceive+0x8e>
	__asm volatile
 8003ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	61bb      	str	r3, [r7, #24]
}
 8003cde:	bf00      	nop
 8003ce0:	e7fe      	b.n	8003ce0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ce2:	f001 fb5f 	bl	80053a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d02f      	beq.n	8003d52 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cf6:	f000 f9c5 	bl	8004084 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8003cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f003 fabb 	bl	8007278 <SEGGER_SYSVIEW_ShrinkId>
 8003d02:	4604      	mov	r4, r0
 8003d04:	2000      	movs	r0, #0
 8003d06:	f003 fab7 	bl	8007278 <SEGGER_SYSVIEW_ShrinkId>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2101      	movs	r1, #1
 8003d10:	9100      	str	r1, [sp, #0]
 8003d12:	4621      	mov	r1, r4
 8003d14:	205c      	movs	r0, #92	; 0x5c
 8003d16:	f002 fd97 	bl	8006848 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	1e5a      	subs	r2, r3, #1
 8003d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00f      	beq.n	8003d4a <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2c:	3310      	adds	r3, #16
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 feec 	bl	8004b0c <xTaskRemoveFromEventList>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d007      	beq.n	8003d4a <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d3a:	4b4d      	ldr	r3, [pc, #308]	; (8003e70 <xQueueReceive+0x21c>)
 8003d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d4a:	f001 fb5b 	bl	8005404 <vPortExitCritical>
				return pdPASS;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e08a      	b.n	8003e68 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d113      	bne.n	8003d80 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d58:	f001 fb54 	bl	8005404 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f003 fa8a 	bl	8007278 <SEGGER_SYSVIEW_ShrinkId>
 8003d64:	4604      	mov	r4, r0
 8003d66:	2000      	movs	r0, #0
 8003d68:	f003 fa86 	bl	8007278 <SEGGER_SYSVIEW_ShrinkId>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2101      	movs	r1, #1
 8003d72:	9100      	str	r1, [sp, #0]
 8003d74:	4621      	mov	r1, r4
 8003d76:	205c      	movs	r0, #92	; 0x5c
 8003d78:	f002 fd66 	bl	8006848 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e073      	b.n	8003e68 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d86:	f107 0310 	add.w	r3, r7, #16
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 ff24 	bl	8004bd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d90:	2301      	movs	r3, #1
 8003d92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d94:	f001 fb36 	bl	8005404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d98:	f000 fca2 	bl	80046e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d9c:	f001 fb02 	bl	80053a4 <vPortEnterCritical>
 8003da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003da6:	b25b      	sxtb	r3, r3
 8003da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dac:	d103      	bne.n	8003db6 <xQueueReceive+0x162>
 8003dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dbc:	b25b      	sxtb	r3, r3
 8003dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc2:	d103      	bne.n	8003dcc <xQueueReceive+0x178>
 8003dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dcc:	f001 fb1a 	bl	8005404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003dd0:	1d3a      	adds	r2, r7, #4
 8003dd2:	f107 0310 	add.w	r3, r7, #16
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 ff13 	bl	8004c04 <xTaskCheckForTimeOut>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d124      	bne.n	8003e2e <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003de6:	f000 f9c5 	bl	8004174 <prvIsQueueEmpty>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d018      	beq.n	8003e22 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df2:	3324      	adds	r3, #36	; 0x24
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	4611      	mov	r1, r2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fe63 	bl	8004ac4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e00:	f000 f966 	bl	80040d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e04:	f000 fc7a 	bl	80046fc <xTaskResumeAll>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f47f af69 	bne.w	8003ce2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003e10:	4b17      	ldr	r3, [pc, #92]	; (8003e70 <xQueueReceive+0x21c>)
 8003e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	e75f      	b.n	8003ce2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e24:	f000 f954 	bl	80040d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e28:	f000 fc68 	bl	80046fc <xTaskResumeAll>
 8003e2c:	e759      	b.n	8003ce2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e30:	f000 f94e 	bl	80040d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e34:	f000 fc62 	bl	80046fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e3a:	f000 f99b 	bl	8004174 <prvIsQueueEmpty>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f43f af4e 	beq.w	8003ce2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f003 fa15 	bl	8007278 <SEGGER_SYSVIEW_ShrinkId>
 8003e4e:	4604      	mov	r4, r0
 8003e50:	2000      	movs	r0, #0
 8003e52:	f003 fa11 	bl	8007278 <SEGGER_SYSVIEW_ShrinkId>
 8003e56:	4602      	mov	r2, r0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	9100      	str	r1, [sp, #0]
 8003e5e:	4621      	mov	r1, r4
 8003e60:	205c      	movs	r0, #92	; 0x5c
 8003e62:	f002 fcf1 	bl	8006848 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8003e66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3734      	adds	r7, #52	; 0x34
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd90      	pop	{r4, r7, pc}
 8003e70:	e000ed04 	.word	0xe000ed04

08003e74 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003e74:	b590      	push	{r4, r7, lr}
 8003e76:	b08f      	sub	sp, #60	; 0x3c
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10a      	bne.n	8003ea0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	623b      	str	r3, [r7, #32]
}
 8003e9c:	bf00      	nop
 8003e9e:	e7fe      	b.n	8003e9e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d103      	bne.n	8003eae <xQueueReceiveFromISR+0x3a>
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <xQueueReceiveFromISR+0x3e>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <xQueueReceiveFromISR+0x40>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10a      	bne.n	8003ece <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	61fb      	str	r3, [r7, #28]
}
 8003eca:	bf00      	nop
 8003ecc:	e7fe      	b.n	8003ecc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ece:	f001 fb53 	bl	8005578 <vPortValidateInterruptPriority>
	__asm volatile
 8003ed2:	f3ef 8211 	mrs	r2, BASEPRI
 8003ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eda:	f383 8811 	msr	BASEPRI, r3
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	61ba      	str	r2, [r7, #24]
 8003ee8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003eea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003eec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d03e      	beq.n	8003f78 <xQueueReceiveFromISR+0x104>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8003f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f06:	4618      	mov	r0, r3
 8003f08:	f003 f9b6 	bl	8007278 <SEGGER_SYSVIEW_ShrinkId>
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f003 f9b1 	bl	8007278 <SEGGER_SYSVIEW_ShrinkId>
 8003f16:	4602      	mov	r2, r0
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	2062      	movs	r0, #98	; 0x62
 8003f1e:	f002 fc1d 	bl	800675c <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f22:	68b9      	ldr	r1, [r7, #8]
 8003f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f26:	f000 f8ad 	bl	8004084 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2c:	1e5a      	subs	r2, r3, #1
 8003f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f30:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003f32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3a:	d112      	bne.n	8003f62 <xQueueReceiveFromISR+0xee>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d016      	beq.n	8003f72 <xQueueReceiveFromISR+0xfe>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f46:	3310      	adds	r3, #16
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fddf 	bl	8004b0c <xTaskRemoveFromEventList>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00e      	beq.n	8003f72 <xQueueReceiveFromISR+0xfe>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00b      	beq.n	8003f72 <xQueueReceiveFromISR+0xfe>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	e007      	b.n	8003f72 <xQueueReceiveFromISR+0xfe>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003f62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f66:	3301      	adds	r3, #1
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	b25a      	sxtb	r2, r3
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003f72:	2301      	movs	r3, #1
 8003f74:	637b      	str	r3, [r7, #52]	; 0x34
 8003f76:	e010      	b.n	8003f9a <xQueueReceiveFromISR+0x126>
		}
		else
		{
			xReturn = pdFAIL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f003 f97a 	bl	8007278 <SEGGER_SYSVIEW_ShrinkId>
 8003f84:	4604      	mov	r4, r0
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f003 f975 	bl	8007278 <SEGGER_SYSVIEW_ShrinkId>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4621      	mov	r1, r4
 8003f94:	2062      	movs	r0, #98	; 0x62
 8003f96:	f002 fbe1 	bl	800675c <SEGGER_SYSVIEW_RecordU32x3>
 8003f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f383 8811 	msr	BASEPRI, r3
}
 8003fa4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	373c      	adds	r7, #60	; 0x3c
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd90      	pop	{r4, r7, pc}

08003fb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10d      	bne.n	8003fea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d14d      	bne.n	8004072 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 ffb0 	bl	8004f40 <xTaskPriorityDisinherit>
 8003fe0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	609a      	str	r2, [r3, #8]
 8003fe8:	e043      	b.n	8004072 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d119      	bne.n	8004024 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6858      	ldr	r0, [r3, #4]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	68b9      	ldr	r1, [r7, #8]
 8003ffc:	f003 fb68 	bl	80076d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	441a      	add	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	429a      	cmp	r2, r3
 8004018:	d32b      	bcc.n	8004072 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	605a      	str	r2, [r3, #4]
 8004022:	e026      	b.n	8004072 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	68d8      	ldr	r0, [r3, #12]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	461a      	mov	r2, r3
 800402e:	68b9      	ldr	r1, [r7, #8]
 8004030:	f003 fb4e 	bl	80076d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	425b      	negs	r3, r3
 800403e:	441a      	add	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	429a      	cmp	r2, r3
 800404e:	d207      	bcs.n	8004060 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	425b      	negs	r3, r3
 800405a:	441a      	add	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d105      	bne.n	8004072 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	3b01      	subs	r3, #1
 8004070:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800407a:	697b      	ldr	r3, [r7, #20]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	2b00      	cmp	r3, #0
 8004094:	d018      	beq.n	80040c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	441a      	add	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d303      	bcc.n	80040b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68d9      	ldr	r1, [r3, #12]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	461a      	mov	r2, r3
 80040c2:	6838      	ldr	r0, [r7, #0]
 80040c4:	f003 fb04 	bl	80076d0 <memcpy>
	}
}
 80040c8:	bf00      	nop
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80040d8:	f001 f964 	bl	80053a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040e4:	e011      	b.n	800410a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d012      	beq.n	8004114 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3324      	adds	r3, #36	; 0x24
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fd0a 	bl	8004b0c <xTaskRemoveFromEventList>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80040fe:	f000 fde3 	bl	8004cc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	3b01      	subs	r3, #1
 8004106:	b2db      	uxtb	r3, r3
 8004108:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800410a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800410e:	2b00      	cmp	r3, #0
 8004110:	dce9      	bgt.n	80040e6 <prvUnlockQueue+0x16>
 8004112:	e000      	b.n	8004116 <prvUnlockQueue+0x46>
					break;
 8004114:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	22ff      	movs	r2, #255	; 0xff
 800411a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800411e:	f001 f971 	bl	8005404 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004122:	f001 f93f 	bl	80053a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800412c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800412e:	e011      	b.n	8004154 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d012      	beq.n	800415e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3310      	adds	r3, #16
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fce5 	bl	8004b0c <xTaskRemoveFromEventList>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004148:	f000 fdbe 	bl	8004cc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800414c:	7bbb      	ldrb	r3, [r7, #14]
 800414e:	3b01      	subs	r3, #1
 8004150:	b2db      	uxtb	r3, r3
 8004152:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004154:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004158:	2b00      	cmp	r3, #0
 800415a:	dce9      	bgt.n	8004130 <prvUnlockQueue+0x60>
 800415c:	e000      	b.n	8004160 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800415e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	22ff      	movs	r2, #255	; 0xff
 8004164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004168:	f001 f94c 	bl	8005404 <vPortExitCritical>
}
 800416c:	bf00      	nop
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800417c:	f001 f912 	bl	80053a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	2b00      	cmp	r3, #0
 8004186:	d102      	bne.n	800418e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004188:	2301      	movs	r3, #1
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	e001      	b.n	8004192 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004192:	f001 f937 	bl	8005404 <vPortExitCritical>

	return xReturn;
 8004196:	68fb      	ldr	r3, [r7, #12]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041a8:	f001 f8fc 	bl	80053a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d102      	bne.n	80041be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80041b8:	2301      	movs	r3, #1
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	e001      	b.n	80041c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041c2:	f001 f91f 	bl	8005404 <vPortExitCritical>

	return xReturn;
 80041c6:	68fb      	ldr	r3, [r7, #12]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08e      	sub	sp, #56	; 0x38
 80041d4:	af04      	add	r7, sp, #16
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80041de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10a      	bne.n	80041fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	623b      	str	r3, [r7, #32]
}
 80041f6:	bf00      	nop
 80041f8:	e7fe      	b.n	80041f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80041fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10a      	bne.n	8004216 <xTaskCreateStatic+0x46>
	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	61fb      	str	r3, [r7, #28]
}
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004216:	23bc      	movs	r3, #188	; 0xbc
 8004218:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	2bbc      	cmp	r3, #188	; 0xbc
 800421e:	d00a      	beq.n	8004236 <xTaskCreateStatic+0x66>
	__asm volatile
 8004220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	61bb      	str	r3, [r7, #24]
}
 8004232:	bf00      	nop
 8004234:	e7fe      	b.n	8004234 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004236:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423a:	2b00      	cmp	r3, #0
 800423c:	d01e      	beq.n	800427c <xTaskCreateStatic+0xac>
 800423e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01b      	beq.n	800427c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004246:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800424c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	2202      	movs	r2, #2
 8004252:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004256:	2300      	movs	r3, #0
 8004258:	9303      	str	r3, [sp, #12]
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	9302      	str	r3, [sp, #8]
 800425e:	f107 0314 	add.w	r3, r7, #20
 8004262:	9301      	str	r3, [sp, #4]
 8004264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f850 	bl	8004314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004274:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004276:	f000 f8f3 	bl	8004460 <prvAddNewTaskToReadyList>
 800427a:	e001      	b.n	8004280 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800427c:	2300      	movs	r3, #0
 800427e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004280:	697b      	ldr	r3, [r7, #20]
	}
 8004282:	4618      	mov	r0, r3
 8004284:	3728      	adds	r7, #40	; 0x28
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800428a:	b580      	push	{r7, lr}
 800428c:	b08c      	sub	sp, #48	; 0x30
 800428e:	af04      	add	r7, sp, #16
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	603b      	str	r3, [r7, #0]
 8004296:	4613      	mov	r3, r2
 8004298:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4618      	mov	r0, r3
 80042a0:	f001 fa02 	bl	80056a8 <pvPortMalloc>
 80042a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00e      	beq.n	80042ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80042ac:	20bc      	movs	r0, #188	; 0xbc
 80042ae:	f001 f9fb 	bl	80056a8 <pvPortMalloc>
 80042b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	631a      	str	r2, [r3, #48]	; 0x30
 80042c0:	e005      	b.n	80042ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80042c2:	6978      	ldr	r0, [r7, #20]
 80042c4:	f001 fabc 	bl	8005840 <vPortFree>
 80042c8:	e001      	b.n	80042ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d017      	beq.n	8004304 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80042dc:	88fa      	ldrh	r2, [r7, #6]
 80042de:	2300      	movs	r3, #0
 80042e0:	9303      	str	r3, [sp, #12]
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	9302      	str	r3, [sp, #8]
 80042e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e8:	9301      	str	r3, [sp, #4]
 80042ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68b9      	ldr	r1, [r7, #8]
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 f80e 	bl	8004314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042f8:	69f8      	ldr	r0, [r7, #28]
 80042fa:	f000 f8b1 	bl	8004460 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042fe:	2301      	movs	r3, #1
 8004300:	61bb      	str	r3, [r7, #24]
 8004302:	e002      	b.n	800430a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004304:	f04f 33ff 	mov.w	r3, #4294967295
 8004308:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800430a:	69bb      	ldr	r3, [r7, #24]
	}
 800430c:	4618      	mov	r0, r3
 800430e:	3720      	adds	r7, #32
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b088      	sub	sp, #32
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	461a      	mov	r2, r3
 800432c:	21a5      	movs	r1, #165	; 0xa5
 800432e:	f003 f9dd 	bl	80076ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800433c:	3b01      	subs	r3, #1
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	f023 0307 	bic.w	r3, r3, #7
 800434a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	617b      	str	r3, [r7, #20]
}
 8004368:	bf00      	nop
 800436a:	e7fe      	b.n	800436a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d01f      	beq.n	80043b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
 8004376:	e012      	b.n	800439e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	4413      	add	r3, r2
 800437e:	7819      	ldrb	r1, [r3, #0]
 8004380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	4413      	add	r3, r2
 8004386:	3334      	adds	r3, #52	; 0x34
 8004388:	460a      	mov	r2, r1
 800438a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	4413      	add	r3, r2
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d006      	beq.n	80043a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	3301      	adds	r3, #1
 800439c:	61fb      	str	r3, [r7, #28]
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	2b0f      	cmp	r3, #15
 80043a2:	d9e9      	bls.n	8004378 <prvInitialiseNewTask+0x64>
 80043a4:	e000      	b.n	80043a8 <prvInitialiseNewTask+0x94>
			{
				break;
 80043a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043b0:	e003      	b.n	80043ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80043b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043bc:	2b06      	cmp	r3, #6
 80043be:	d901      	bls.n	80043c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043c0:	2306      	movs	r3, #6
 80043c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80043ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d2:	2200      	movs	r2, #0
 80043d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	3304      	adds	r3, #4
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff f88c 	bl	80034f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80043e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e2:	3318      	adds	r3, #24
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff f887 	bl	80034f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80043ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f2:	f1c3 0207 	rsb	r2, r3, #7
 80043f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004402:	2200      	movs	r2, #0
 8004404:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440a:	2200      	movs	r2, #0
 800440c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004412:	3354      	adds	r3, #84	; 0x54
 8004414:	2260      	movs	r2, #96	; 0x60
 8004416:	2100      	movs	r1, #0
 8004418:	4618      	mov	r0, r3
 800441a:	f003 f967 	bl	80076ec <memset>
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	4a0c      	ldr	r2, [pc, #48]	; (8004454 <prvInitialiseNewTask+0x140>)
 8004422:	659a      	str	r2, [r3, #88]	; 0x58
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	4a0c      	ldr	r2, [pc, #48]	; (8004458 <prvInitialiseNewTask+0x144>)
 8004428:	65da      	str	r2, [r3, #92]	; 0x5c
 800442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442c:	4a0b      	ldr	r2, [pc, #44]	; (800445c <prvInitialiseNewTask+0x148>)
 800442e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	68f9      	ldr	r1, [r7, #12]
 8004434:	69b8      	ldr	r0, [r7, #24]
 8004436:	f000 fe85 	bl	8005144 <pxPortInitialiseStack>
 800443a:	4602      	mov	r2, r0
 800443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800444a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800444c:	bf00      	nop
 800444e:	3720      	adds	r7, #32
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	08007a4c 	.word	0x08007a4c
 8004458:	08007a6c 	.word	0x08007a6c
 800445c:	08007a2c 	.word	0x08007a2c

08004460 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004460:	b5b0      	push	{r4, r5, r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af02      	add	r7, sp, #8
 8004466:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004468:	f000 ff9c 	bl	80053a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800446c:	4b3b      	ldr	r3, [pc, #236]	; (800455c <prvAddNewTaskToReadyList+0xfc>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3301      	adds	r3, #1
 8004472:	4a3a      	ldr	r2, [pc, #232]	; (800455c <prvAddNewTaskToReadyList+0xfc>)
 8004474:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004476:	4b3a      	ldr	r3, [pc, #232]	; (8004560 <prvAddNewTaskToReadyList+0x100>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d109      	bne.n	8004492 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800447e:	4a38      	ldr	r2, [pc, #224]	; (8004560 <prvAddNewTaskToReadyList+0x100>)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004484:	4b35      	ldr	r3, [pc, #212]	; (800455c <prvAddNewTaskToReadyList+0xfc>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d110      	bne.n	80044ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800448c:	f000 fc40 	bl	8004d10 <prvInitialiseTaskLists>
 8004490:	e00d      	b.n	80044ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004492:	4b34      	ldr	r3, [pc, #208]	; (8004564 <prvAddNewTaskToReadyList+0x104>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d109      	bne.n	80044ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800449a:	4b31      	ldr	r3, [pc, #196]	; (8004560 <prvAddNewTaskToReadyList+0x100>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d802      	bhi.n	80044ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044a8:	4a2d      	ldr	r2, [pc, #180]	; (8004560 <prvAddNewTaskToReadyList+0x100>)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044ae:	4b2e      	ldr	r3, [pc, #184]	; (8004568 <prvAddNewTaskToReadyList+0x108>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3301      	adds	r3, #1
 80044b4:	4a2c      	ldr	r2, [pc, #176]	; (8004568 <prvAddNewTaskToReadyList+0x108>)
 80044b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80044b8:	4b2b      	ldr	r3, [pc, #172]	; (8004568 <prvAddNewTaskToReadyList+0x108>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d016      	beq.n	80044f4 <prvAddNewTaskToReadyList+0x94>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f002 fdaf 	bl	800702c <SEGGER_SYSVIEW_OnTaskCreate>
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044de:	461d      	mov	r5, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	461c      	mov	r4, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	1ae3      	subs	r3, r4, r3
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	462b      	mov	r3, r5
 80044f0:	f001 fbce 	bl	8005c90 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f002 fe1c 	bl	8007134 <SEGGER_SYSVIEW_OnTaskStartReady>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	2201      	movs	r2, #1
 8004502:	409a      	lsls	r2, r3
 8004504:	4b19      	ldr	r3, [pc, #100]	; (800456c <prvAddNewTaskToReadyList+0x10c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4313      	orrs	r3, r2
 800450a:	4a18      	ldr	r2, [pc, #96]	; (800456c <prvAddNewTaskToReadyList+0x10c>)
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4a15      	ldr	r2, [pc, #84]	; (8004570 <prvAddNewTaskToReadyList+0x110>)
 800451c:	441a      	add	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3304      	adds	r3, #4
 8004522:	4619      	mov	r1, r3
 8004524:	4610      	mov	r0, r2
 8004526:	f7fe fff4 	bl	8003512 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800452a:	f000 ff6b 	bl	8005404 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800452e:	4b0d      	ldr	r3, [pc, #52]	; (8004564 <prvAddNewTaskToReadyList+0x104>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00e      	beq.n	8004554 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004536:	4b0a      	ldr	r3, [pc, #40]	; (8004560 <prvAddNewTaskToReadyList+0x100>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	429a      	cmp	r2, r3
 8004542:	d207      	bcs.n	8004554 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <prvAddNewTaskToReadyList+0x114>)
 8004546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004554:	bf00      	nop
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bdb0      	pop	{r4, r5, r7, pc}
 800455c:	200004ec 	.word	0x200004ec
 8004560:	200003ec 	.word	0x200003ec
 8004564:	200004f8 	.word	0x200004f8
 8004568:	20000508 	.word	0x20000508
 800456c:	200004f4 	.word	0x200004f4
 8004570:	200003f0 	.word	0x200003f0
 8004574:	e000ed04 	.word	0xe000ed04

08004578 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d01b      	beq.n	80045c2 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800458a:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <vTaskDelay+0x68>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <vTaskDelay+0x30>
	__asm volatile
 8004592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	60bb      	str	r3, [r7, #8]
}
 80045a4:	bf00      	nop
 80045a6:	e7fe      	b.n	80045a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80045a8:	f000 f89a 	bl	80046e0 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	2023      	movs	r0, #35	; 0x23
 80045b0:	f002 f83e 	bl	8006630 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045b4:	2100      	movs	r1, #0
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fd4c 	bl	8005054 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045bc:	f000 f89e 	bl	80046fc <xTaskResumeAll>
 80045c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d107      	bne.n	80045d8 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 80045c8:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <vTaskDelay+0x6c>)
 80045ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	20000514 	.word	0x20000514
 80045e4:	e000ed04 	.word	0xe000ed04

080045e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	; 0x28
 80045ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045f2:	2300      	movs	r3, #0
 80045f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045f6:	463a      	mov	r2, r7
 80045f8:	1d39      	adds	r1, r7, #4
 80045fa:	f107 0308 	add.w	r3, r7, #8
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fb ffba 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004604:	6839      	ldr	r1, [r7, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	9202      	str	r2, [sp, #8]
 800460c:	9301      	str	r3, [sp, #4]
 800460e:	2300      	movs	r3, #0
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	2300      	movs	r3, #0
 8004614:	460a      	mov	r2, r1
 8004616:	492a      	ldr	r1, [pc, #168]	; (80046c0 <vTaskStartScheduler+0xd8>)
 8004618:	482a      	ldr	r0, [pc, #168]	; (80046c4 <vTaskStartScheduler+0xdc>)
 800461a:	f7ff fdd9 	bl	80041d0 <xTaskCreateStatic>
 800461e:	4603      	mov	r3, r0
 8004620:	4a29      	ldr	r2, [pc, #164]	; (80046c8 <vTaskStartScheduler+0xe0>)
 8004622:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004624:	4b28      	ldr	r3, [pc, #160]	; (80046c8 <vTaskStartScheduler+0xe0>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800462c:	2301      	movs	r3, #1
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	e001      	b.n	8004636 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d12e      	bne.n	800469a <vTaskStartScheduler+0xb2>
	__asm volatile
 800463c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	613b      	str	r3, [r7, #16]
}
 800464e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004650:	4b1e      	ldr	r3, [pc, #120]	; (80046cc <vTaskStartScheduler+0xe4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3354      	adds	r3, #84	; 0x54
 8004656:	4a1e      	ldr	r2, [pc, #120]	; (80046d0 <vTaskStartScheduler+0xe8>)
 8004658:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800465a:	4b1e      	ldr	r3, [pc, #120]	; (80046d4 <vTaskStartScheduler+0xec>)
 800465c:	f04f 32ff 	mov.w	r2, #4294967295
 8004660:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004662:	4b1d      	ldr	r3, [pc, #116]	; (80046d8 <vTaskStartScheduler+0xf0>)
 8004664:	2201      	movs	r2, #1
 8004666:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004668:	4b1c      	ldr	r3, [pc, #112]	; (80046dc <vTaskStartScheduler+0xf4>)
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 800466e:	4b17      	ldr	r3, [pc, #92]	; (80046cc <vTaskStartScheduler+0xe4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3334      	adds	r3, #52	; 0x34
 8004674:	2205      	movs	r2, #5
 8004676:	4912      	ldr	r1, [pc, #72]	; (80046c0 <vTaskStartScheduler+0xd8>)
 8004678:	4618      	mov	r0, r3
 800467a:	f003 f819 	bl	80076b0 <memcmp>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d005      	beq.n	8004690 <vTaskStartScheduler+0xa8>
 8004684:	4b11      	ldr	r3, [pc, #68]	; (80046cc <vTaskStartScheduler+0xe4>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f002 fd11 	bl	80070b0 <SEGGER_SYSVIEW_OnTaskStartExec>
 800468e:	e001      	b.n	8004694 <vTaskStartScheduler+0xac>
 8004690:	f002 fcb0 	bl	8006ff4 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004694:	f000 fde4 	bl	8005260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004698:	e00e      	b.n	80046b8 <vTaskStartScheduler+0xd0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a0:	d10a      	bne.n	80046b8 <vTaskStartScheduler+0xd0>
	__asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	60fb      	str	r3, [r7, #12]
}
 80046b4:	bf00      	nop
 80046b6:	e7fe      	b.n	80046b6 <vTaskStartScheduler+0xce>
}
 80046b8:	bf00      	nop
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	08007934 	.word	0x08007934
 80046c4:	08004ce1 	.word	0x08004ce1
 80046c8:	20000510 	.word	0x20000510
 80046cc:	200003ec 	.word	0x200003ec
 80046d0:	20000010 	.word	0x20000010
 80046d4:	2000050c 	.word	0x2000050c
 80046d8:	200004f8 	.word	0x200004f8
 80046dc:	200004f0 	.word	0x200004f0

080046e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80046e4:	4b04      	ldr	r3, [pc, #16]	; (80046f8 <vTaskSuspendAll+0x18>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3301      	adds	r3, #1
 80046ea:	4a03      	ldr	r2, [pc, #12]	; (80046f8 <vTaskSuspendAll+0x18>)
 80046ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80046ee:	bf00      	nop
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	20000514 	.word	0x20000514

080046fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004706:	2300      	movs	r3, #0
 8004708:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800470a:	4b43      	ldr	r3, [pc, #268]	; (8004818 <xTaskResumeAll+0x11c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10a      	bne.n	8004728 <xTaskResumeAll+0x2c>
	__asm volatile
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	603b      	str	r3, [r7, #0]
}
 8004724:	bf00      	nop
 8004726:	e7fe      	b.n	8004726 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004728:	f000 fe3c 	bl	80053a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800472c:	4b3a      	ldr	r3, [pc, #232]	; (8004818 <xTaskResumeAll+0x11c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3b01      	subs	r3, #1
 8004732:	4a39      	ldr	r2, [pc, #228]	; (8004818 <xTaskResumeAll+0x11c>)
 8004734:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004736:	4b38      	ldr	r3, [pc, #224]	; (8004818 <xTaskResumeAll+0x11c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d165      	bne.n	800480a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800473e:	4b37      	ldr	r3, [pc, #220]	; (800481c <xTaskResumeAll+0x120>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d061      	beq.n	800480a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004746:	e032      	b.n	80047ae <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004748:	4b35      	ldr	r3, [pc, #212]	; (8004820 <xTaskResumeAll+0x124>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3318      	adds	r3, #24
 8004754:	4618      	mov	r0, r3
 8004756:	f7fe ff39 	bl	80035cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	3304      	adds	r3, #4
 800475e:	4618      	mov	r0, r3
 8004760:	f7fe ff34 	bl	80035cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4618      	mov	r0, r3
 8004768:	f002 fce4 	bl	8007134 <SEGGER_SYSVIEW_OnTaskStartReady>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	2201      	movs	r2, #1
 8004772:	409a      	lsls	r2, r3
 8004774:	4b2b      	ldr	r3, [pc, #172]	; (8004824 <xTaskResumeAll+0x128>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4313      	orrs	r3, r2
 800477a:	4a2a      	ldr	r2, [pc, #168]	; (8004824 <xTaskResumeAll+0x128>)
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4a27      	ldr	r2, [pc, #156]	; (8004828 <xTaskResumeAll+0x12c>)
 800478c:	441a      	add	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3304      	adds	r3, #4
 8004792:	4619      	mov	r1, r3
 8004794:	4610      	mov	r0, r2
 8004796:	f7fe febc 	bl	8003512 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479e:	4b23      	ldr	r3, [pc, #140]	; (800482c <xTaskResumeAll+0x130>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d302      	bcc.n	80047ae <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80047a8:	4b21      	ldr	r3, [pc, #132]	; (8004830 <xTaskResumeAll+0x134>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047ae:	4b1c      	ldr	r3, [pc, #112]	; (8004820 <xTaskResumeAll+0x124>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1c8      	bne.n	8004748 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047bc:	f000 fb82 	bl	8004ec4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80047c0:	4b1c      	ldr	r3, [pc, #112]	; (8004834 <xTaskResumeAll+0x138>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d010      	beq.n	80047ee <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047cc:	f000 f848 	bl	8004860 <xTaskIncrementTick>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d002      	beq.n	80047dc <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80047d6:	4b16      	ldr	r3, [pc, #88]	; (8004830 <xTaskResumeAll+0x134>)
 80047d8:	2201      	movs	r2, #1
 80047da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3b01      	subs	r3, #1
 80047e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1f1      	bne.n	80047cc <xTaskResumeAll+0xd0>

						xPendedTicks = 0;
 80047e8:	4b12      	ldr	r3, [pc, #72]	; (8004834 <xTaskResumeAll+0x138>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047ee:	4b10      	ldr	r3, [pc, #64]	; (8004830 <xTaskResumeAll+0x134>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d009      	beq.n	800480a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047f6:	2301      	movs	r3, #1
 80047f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047fa:	4b0f      	ldr	r3, [pc, #60]	; (8004838 <xTaskResumeAll+0x13c>)
 80047fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800480a:	f000 fdfb 	bl	8005404 <vPortExitCritical>

	return xAlreadyYielded;
 800480e:	68bb      	ldr	r3, [r7, #8]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	20000514 	.word	0x20000514
 800481c:	200004ec 	.word	0x200004ec
 8004820:	200004ac 	.word	0x200004ac
 8004824:	200004f4 	.word	0x200004f4
 8004828:	200003f0 	.word	0x200003f0
 800482c:	200003ec 	.word	0x200003ec
 8004830:	20000500 	.word	0x20000500
 8004834:	200004fc 	.word	0x200004fc
 8004838:	e000ed04 	.word	0xe000ed04

0800483c <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004842:	f000 fe99 	bl	8005578 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004846:	2300      	movs	r3, #0
 8004848:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800484a:	4b04      	ldr	r3, [pc, #16]	; (800485c <xTaskGetTickCountFromISR+0x20>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004850:	683b      	ldr	r3, [r7, #0]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	200004f0 	.word	0x200004f0

08004860 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800486a:	4b50      	ldr	r3, [pc, #320]	; (80049ac <xTaskIncrementTick+0x14c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	f040 8092 	bne.w	8004998 <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004874:	4b4e      	ldr	r3, [pc, #312]	; (80049b0 <xTaskIncrementTick+0x150>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3301      	adds	r3, #1
 800487a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800487c:	4a4c      	ldr	r2, [pc, #304]	; (80049b0 <xTaskIncrementTick+0x150>)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d120      	bne.n	80048ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004888:	4b4a      	ldr	r3, [pc, #296]	; (80049b4 <xTaskIncrementTick+0x154>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	603b      	str	r3, [r7, #0]
}
 80048a4:	bf00      	nop
 80048a6:	e7fe      	b.n	80048a6 <xTaskIncrementTick+0x46>
 80048a8:	4b42      	ldr	r3, [pc, #264]	; (80049b4 <xTaskIncrementTick+0x154>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	4b42      	ldr	r3, [pc, #264]	; (80049b8 <xTaskIncrementTick+0x158>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a40      	ldr	r2, [pc, #256]	; (80049b4 <xTaskIncrementTick+0x154>)
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	4a40      	ldr	r2, [pc, #256]	; (80049b8 <xTaskIncrementTick+0x158>)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	4b3f      	ldr	r3, [pc, #252]	; (80049bc <xTaskIncrementTick+0x15c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3301      	adds	r3, #1
 80048c2:	4a3e      	ldr	r2, [pc, #248]	; (80049bc <xTaskIncrementTick+0x15c>)
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	f000 fafd 	bl	8004ec4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048ca:	4b3d      	ldr	r3, [pc, #244]	; (80049c0 <xTaskIncrementTick+0x160>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d34c      	bcc.n	800496e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048d4:	4b37      	ldr	r3, [pc, #220]	; (80049b4 <xTaskIncrementTick+0x154>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d104      	bne.n	80048e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048de:	4b38      	ldr	r3, [pc, #224]	; (80049c0 <xTaskIncrementTick+0x160>)
 80048e0:	f04f 32ff 	mov.w	r2, #4294967295
 80048e4:	601a      	str	r2, [r3, #0]
					break;
 80048e6:	e042      	b.n	800496e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048e8:	4b32      	ldr	r3, [pc, #200]	; (80049b4 <xTaskIncrementTick+0x154>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d203      	bcs.n	8004908 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004900:	4a2f      	ldr	r2, [pc, #188]	; (80049c0 <xTaskIncrementTick+0x160>)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004906:	e032      	b.n	800496e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	3304      	adds	r3, #4
 800490c:	4618      	mov	r0, r3
 800490e:	f7fe fe5d 	bl	80035cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	2b00      	cmp	r3, #0
 8004918:	d004      	beq.n	8004924 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	3318      	adds	r3, #24
 800491e:	4618      	mov	r0, r3
 8004920:	f7fe fe54 	bl	80035cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	4618      	mov	r0, r3
 8004928:	f002 fc04 	bl	8007134 <SEGGER_SYSVIEW_OnTaskStartReady>
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	2201      	movs	r2, #1
 8004932:	409a      	lsls	r2, r3
 8004934:	4b23      	ldr	r3, [pc, #140]	; (80049c4 <xTaskIncrementTick+0x164>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4313      	orrs	r3, r2
 800493a:	4a22      	ldr	r2, [pc, #136]	; (80049c4 <xTaskIncrementTick+0x164>)
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004942:	4613      	mov	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4a1f      	ldr	r2, [pc, #124]	; (80049c8 <xTaskIncrementTick+0x168>)
 800494c:	441a      	add	r2, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	3304      	adds	r3, #4
 8004952:	4619      	mov	r1, r3
 8004954:	4610      	mov	r0, r2
 8004956:	f7fe fddc 	bl	8003512 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495e:	4b1b      	ldr	r3, [pc, #108]	; (80049cc <xTaskIncrementTick+0x16c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	429a      	cmp	r2, r3
 8004966:	d3b5      	bcc.n	80048d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004968:	2301      	movs	r3, #1
 800496a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800496c:	e7b2      	b.n	80048d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800496e:	4b17      	ldr	r3, [pc, #92]	; (80049cc <xTaskIncrementTick+0x16c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004974:	4914      	ldr	r1, [pc, #80]	; (80049c8 <xTaskIncrementTick+0x168>)
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	440b      	add	r3, r1
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d901      	bls.n	800498a <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 8004986:	2301      	movs	r3, #1
 8004988:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800498a:	4b11      	ldr	r3, [pc, #68]	; (80049d0 <xTaskIncrementTick+0x170>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d007      	beq.n	80049a2 <xTaskIncrementTick+0x142>
			{
				xSwitchRequired = pdTRUE;
 8004992:	2301      	movs	r3, #1
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	e004      	b.n	80049a2 <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004998:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <xTaskIncrementTick+0x174>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3301      	adds	r3, #1
 800499e:	4a0d      	ldr	r2, [pc, #52]	; (80049d4 <xTaskIncrementTick+0x174>)
 80049a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80049a2:	697b      	ldr	r3, [r7, #20]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	20000514 	.word	0x20000514
 80049b0:	200004f0 	.word	0x200004f0
 80049b4:	200004a4 	.word	0x200004a4
 80049b8:	200004a8 	.word	0x200004a8
 80049bc:	20000504 	.word	0x20000504
 80049c0:	2000050c 	.word	0x2000050c
 80049c4:	200004f4 	.word	0x200004f4
 80049c8:	200003f0 	.word	0x200003f0
 80049cc:	200003ec 	.word	0x200003ec
 80049d0:	20000500 	.word	0x20000500
 80049d4:	200004fc 	.word	0x200004fc

080049d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049de:	4b32      	ldr	r3, [pc, #200]	; (8004aa8 <vTaskSwitchContext+0xd0>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049e6:	4b31      	ldr	r3, [pc, #196]	; (8004aac <vTaskSwitchContext+0xd4>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049ec:	e057      	b.n	8004a9e <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 80049ee:	4b2f      	ldr	r3, [pc, #188]	; (8004aac <vTaskSwitchContext+0xd4>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049f4:	4b2e      	ldr	r3, [pc, #184]	; (8004ab0 <vTaskSwitchContext+0xd8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	fab3 f383 	clz	r3, r3
 8004a00:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004a02:	7afb      	ldrb	r3, [r7, #11]
 8004a04:	f1c3 031f 	rsb	r3, r3, #31
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	492a      	ldr	r1, [pc, #168]	; (8004ab4 <vTaskSwitchContext+0xdc>)
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	440b      	add	r3, r1
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	607b      	str	r3, [r7, #4]
}
 8004a30:	bf00      	nop
 8004a32:	e7fe      	b.n	8004a32 <vTaskSwitchContext+0x5a>
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4613      	mov	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4a1d      	ldr	r2, [pc, #116]	; (8004ab4 <vTaskSwitchContext+0xdc>)
 8004a40:	4413      	add	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	3308      	adds	r3, #8
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d104      	bne.n	8004a64 <vTaskSwitchContext+0x8c>
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	605a      	str	r2, [r3, #4]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	4a13      	ldr	r2, [pc, #76]	; (8004ab8 <vTaskSwitchContext+0xe0>)
 8004a6c:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8004a6e:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <vTaskSwitchContext+0xe0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3334      	adds	r3, #52	; 0x34
 8004a74:	2205      	movs	r2, #5
 8004a76:	4911      	ldr	r1, [pc, #68]	; (8004abc <vTaskSwitchContext+0xe4>)
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f002 fe19 	bl	80076b0 <memcmp>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d005      	beq.n	8004a90 <vTaskSwitchContext+0xb8>
 8004a84:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <vTaskSwitchContext+0xe0>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f002 fb11 	bl	80070b0 <SEGGER_SYSVIEW_OnTaskStartExec>
 8004a8e:	e001      	b.n	8004a94 <vTaskSwitchContext+0xbc>
 8004a90:	f002 fab0 	bl	8006ff4 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a94:	4b08      	ldr	r3, [pc, #32]	; (8004ab8 <vTaskSwitchContext+0xe0>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3354      	adds	r3, #84	; 0x54
 8004a9a:	4a09      	ldr	r2, [pc, #36]	; (8004ac0 <vTaskSwitchContext+0xe8>)
 8004a9c:	6013      	str	r3, [r2, #0]
}
 8004a9e:	bf00      	nop
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000514 	.word	0x20000514
 8004aac:	20000500 	.word	0x20000500
 8004ab0:	200004f4 	.word	0x200004f4
 8004ab4:	200003f0 	.word	0x200003f0
 8004ab8:	200003ec 	.word	0x200003ec
 8004abc:	08007934 	.word	0x08007934
 8004ac0:	20000010 	.word	0x20000010

08004ac4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10a      	bne.n	8004aea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	60fb      	str	r3, [r7, #12]
}
 8004ae6:	bf00      	nop
 8004ae8:	e7fe      	b.n	8004ae8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004aea:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <vTaskPlaceOnEventList+0x44>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3318      	adds	r3, #24
 8004af0:	4619      	mov	r1, r3
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fe fd31 	bl	800355a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004af8:	2101      	movs	r1, #1
 8004afa:	6838      	ldr	r0, [r7, #0]
 8004afc:	f000 faaa 	bl	8005054 <prvAddCurrentTaskToDelayedList>
}
 8004b00:	bf00      	nop
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	200003ec 	.word	0x200003ec

08004b0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10a      	bne.n	8004b38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	60fb      	str	r3, [r7, #12]
}
 8004b34:	bf00      	nop
 8004b36:	e7fe      	b.n	8004b36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	3318      	adds	r3, #24
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fe fd45 	bl	80035cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b42:	4b1f      	ldr	r3, [pc, #124]	; (8004bc0 <xTaskRemoveFromEventList+0xb4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d120      	bne.n	8004b8c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fe fd3c 	bl	80035cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f002 faec 	bl	8007134 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	2201      	movs	r2, #1
 8004b62:	409a      	lsls	r2, r3
 8004b64:	4b17      	ldr	r3, [pc, #92]	; (8004bc4 <xTaskRemoveFromEventList+0xb8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	4a16      	ldr	r2, [pc, #88]	; (8004bc4 <xTaskRemoveFromEventList+0xb8>)
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b72:	4613      	mov	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4a13      	ldr	r2, [pc, #76]	; (8004bc8 <xTaskRemoveFromEventList+0xbc>)
 8004b7c:	441a      	add	r2, r3
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	3304      	adds	r3, #4
 8004b82:	4619      	mov	r1, r3
 8004b84:	4610      	mov	r0, r2
 8004b86:	f7fe fcc4 	bl	8003512 <vListInsertEnd>
 8004b8a:	e005      	b.n	8004b98 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	3318      	adds	r3, #24
 8004b90:	4619      	mov	r1, r3
 8004b92:	480e      	ldr	r0, [pc, #56]	; (8004bcc <xTaskRemoveFromEventList+0xc0>)
 8004b94:	f7fe fcbd 	bl	8003512 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9c:	4b0c      	ldr	r3, [pc, #48]	; (8004bd0 <xTaskRemoveFromEventList+0xc4>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d905      	bls.n	8004bb2 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004baa:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <xTaskRemoveFromEventList+0xc8>)
 8004bac:	2201      	movs	r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	e001      	b.n	8004bb6 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004bb6:	697b      	ldr	r3, [r7, #20]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20000514 	.word	0x20000514
 8004bc4:	200004f4 	.word	0x200004f4
 8004bc8:	200003f0 	.word	0x200003f0
 8004bcc:	200004ac 	.word	0x200004ac
 8004bd0:	200003ec 	.word	0x200003ec
 8004bd4:	20000500 	.word	0x20000500

08004bd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004be0:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <vTaskInternalSetTimeOutState+0x24>)
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <vTaskInternalSetTimeOutState+0x28>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	605a      	str	r2, [r3, #4]
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	20000504 	.word	0x20000504
 8004c00:	200004f0 	.word	0x200004f0

08004c04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b088      	sub	sp, #32
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	613b      	str	r3, [r7, #16]
}
 8004c26:	bf00      	nop
 8004c28:	e7fe      	b.n	8004c28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10a      	bne.n	8004c46 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	60fb      	str	r3, [r7, #12]
}
 8004c42:	bf00      	nop
 8004c44:	e7fe      	b.n	8004c44 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004c46:	f000 fbad 	bl	80053a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c4a:	4b1d      	ldr	r3, [pc, #116]	; (8004cc0 <xTaskCheckForTimeOut+0xbc>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c62:	d102      	bne.n	8004c6a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c64:	2300      	movs	r3, #0
 8004c66:	61fb      	str	r3, [r7, #28]
 8004c68:	e023      	b.n	8004cb2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	4b15      	ldr	r3, [pc, #84]	; (8004cc4 <xTaskCheckForTimeOut+0xc0>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d007      	beq.n	8004c86 <xTaskCheckForTimeOut+0x82>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d302      	bcc.n	8004c86 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c80:	2301      	movs	r3, #1
 8004c82:	61fb      	str	r3, [r7, #28]
 8004c84:	e015      	b.n	8004cb2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d20b      	bcs.n	8004ca8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	1ad2      	subs	r2, r2, r3
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7ff ff9b 	bl	8004bd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61fb      	str	r3, [r7, #28]
 8004ca6:	e004      	b.n	8004cb2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004cb2:	f000 fba7 	bl	8005404 <vPortExitCritical>

	return xReturn;
 8004cb6:	69fb      	ldr	r3, [r7, #28]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3720      	adds	r7, #32
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	200004f0 	.word	0x200004f0
 8004cc4:	20000504 	.word	0x20000504

08004cc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ccc:	4b03      	ldr	r3, [pc, #12]	; (8004cdc <vTaskMissedYield+0x14>)
 8004cce:	2201      	movs	r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
}
 8004cd2:	bf00      	nop
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	20000500 	.word	0x20000500

08004ce0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ce8:	f000 f852 	bl	8004d90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004cec:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <prvIdleTask+0x28>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d9f9      	bls.n	8004ce8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004cf4:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <prvIdleTask+0x2c>)
 8004cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d04:	e7f0      	b.n	8004ce8 <prvIdleTask+0x8>
 8004d06:	bf00      	nop
 8004d08:	200003f0 	.word	0x200003f0
 8004d0c:	e000ed04 	.word	0xe000ed04

08004d10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d16:	2300      	movs	r3, #0
 8004d18:	607b      	str	r3, [r7, #4]
 8004d1a:	e00c      	b.n	8004d36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4a12      	ldr	r2, [pc, #72]	; (8004d70 <prvInitialiseTaskLists+0x60>)
 8004d28:	4413      	add	r3, r2
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fe fbc4 	bl	80034b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3301      	adds	r3, #1
 8004d34:	607b      	str	r3, [r7, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b06      	cmp	r3, #6
 8004d3a:	d9ef      	bls.n	8004d1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d3c:	480d      	ldr	r0, [pc, #52]	; (8004d74 <prvInitialiseTaskLists+0x64>)
 8004d3e:	f7fe fbbb 	bl	80034b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d42:	480d      	ldr	r0, [pc, #52]	; (8004d78 <prvInitialiseTaskLists+0x68>)
 8004d44:	f7fe fbb8 	bl	80034b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d48:	480c      	ldr	r0, [pc, #48]	; (8004d7c <prvInitialiseTaskLists+0x6c>)
 8004d4a:	f7fe fbb5 	bl	80034b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d4e:	480c      	ldr	r0, [pc, #48]	; (8004d80 <prvInitialiseTaskLists+0x70>)
 8004d50:	f7fe fbb2 	bl	80034b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d54:	480b      	ldr	r0, [pc, #44]	; (8004d84 <prvInitialiseTaskLists+0x74>)
 8004d56:	f7fe fbaf 	bl	80034b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d5a:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <prvInitialiseTaskLists+0x78>)
 8004d5c:	4a05      	ldr	r2, [pc, #20]	; (8004d74 <prvInitialiseTaskLists+0x64>)
 8004d5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d60:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <prvInitialiseTaskLists+0x7c>)
 8004d62:	4a05      	ldr	r2, [pc, #20]	; (8004d78 <prvInitialiseTaskLists+0x68>)
 8004d64:	601a      	str	r2, [r3, #0]
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	200003f0 	.word	0x200003f0
 8004d74:	2000047c 	.word	0x2000047c
 8004d78:	20000490 	.word	0x20000490
 8004d7c:	200004ac 	.word	0x200004ac
 8004d80:	200004c0 	.word	0x200004c0
 8004d84:	200004d8 	.word	0x200004d8
 8004d88:	200004a4 	.word	0x200004a4
 8004d8c:	200004a8 	.word	0x200004a8

08004d90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d96:	e019      	b.n	8004dcc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d98:	f000 fb04 	bl	80053a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d9c:	4b10      	ldr	r3, [pc, #64]	; (8004de0 <prvCheckTasksWaitingTermination+0x50>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3304      	adds	r3, #4
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fe fc0f 	bl	80035cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004dae:	4b0d      	ldr	r3, [pc, #52]	; (8004de4 <prvCheckTasksWaitingTermination+0x54>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	4a0b      	ldr	r2, [pc, #44]	; (8004de4 <prvCheckTasksWaitingTermination+0x54>)
 8004db6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004db8:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <prvCheckTasksWaitingTermination+0x58>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	4a0a      	ldr	r2, [pc, #40]	; (8004de8 <prvCheckTasksWaitingTermination+0x58>)
 8004dc0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004dc2:	f000 fb1f 	bl	8005404 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f848 	bl	8004e5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dcc:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <prvCheckTasksWaitingTermination+0x58>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e1      	bne.n	8004d98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	200004c0 	.word	0x200004c0
 8004de4:	200004ec 	.word	0x200004ec
 8004de8:	200004d4 	.word	0x200004d4

08004dec <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004df8:	e005      	b.n	8004e06 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	607b      	str	r3, [r7, #4]
			ulCount++;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	3301      	adds	r3, #1
 8004e04:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2ba5      	cmp	r3, #165	; 0xa5
 8004e0c:	d0f5      	beq.n	8004dfa <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	089b      	lsrs	r3, r3, #2
 8004e12:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	b29b      	uxth	r3, r3
	}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d102      	bne.n	8004e38 <uxTaskGetStackHighWaterMark+0x14>
 8004e32:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <uxTaskGetStackHighWaterMark+0x34>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	e000      	b.n	8004e3a <uxTaskGetStackHighWaterMark+0x16>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e40:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8004e42:	6938      	ldr	r0, [r7, #16]
 8004e44:	f7ff ffd2 	bl	8004dec <prvTaskCheckFreeStackSpace>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
	}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	200003ec 	.word	0x200003ec

08004e5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3354      	adds	r3, #84	; 0x54
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f002 fca1 	bl	80077b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d108      	bne.n	8004e8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fcdf 	bl	8005840 <vPortFree>
				vPortFree( pxTCB );
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fcdc 	bl	8005840 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e88:	e018      	b.n	8004ebc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d103      	bne.n	8004e9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fcd3 	bl	8005840 <vPortFree>
	}
 8004e9a:	e00f      	b.n	8004ebc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d00a      	beq.n	8004ebc <prvDeleteTCB+0x60>
	__asm volatile
 8004ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eaa:	f383 8811 	msr	BASEPRI, r3
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f3bf 8f4f 	dsb	sy
 8004eb6:	60fb      	str	r3, [r7, #12]
}
 8004eb8:	bf00      	nop
 8004eba:	e7fe      	b.n	8004eba <prvDeleteTCB+0x5e>
	}
 8004ebc:	bf00      	nop
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eca:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <prvResetNextTaskUnblockTime+0x38>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d104      	bne.n	8004ede <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ed4:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <prvResetNextTaskUnblockTime+0x3c>)
 8004ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004edc:	e008      	b.n	8004ef0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ede:	4b07      	ldr	r3, [pc, #28]	; (8004efc <prvResetNextTaskUnblockTime+0x38>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	4a04      	ldr	r2, [pc, #16]	; (8004f00 <prvResetNextTaskUnblockTime+0x3c>)
 8004eee:	6013      	str	r3, [r2, #0]
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	200004a4 	.word	0x200004a4
 8004f00:	2000050c 	.word	0x2000050c

08004f04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f0a:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <xTaskGetSchedulerState+0x34>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d102      	bne.n	8004f18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f12:	2301      	movs	r3, #1
 8004f14:	607b      	str	r3, [r7, #4]
 8004f16:	e008      	b.n	8004f2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f18:	4b08      	ldr	r3, [pc, #32]	; (8004f3c <xTaskGetSchedulerState+0x38>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d102      	bne.n	8004f26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f20:	2302      	movs	r3, #2
 8004f22:	607b      	str	r3, [r7, #4]
 8004f24:	e001      	b.n	8004f2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f26:	2300      	movs	r3, #0
 8004f28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f2a:	687b      	ldr	r3, [r7, #4]
	}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	200004f8 	.word	0x200004f8
 8004f3c:	20000514 	.word	0x20000514

08004f40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d073      	beq.n	800503e <xTaskPriorityDisinherit+0xfe>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f56:	4b3c      	ldr	r3, [pc, #240]	; (8005048 <xTaskPriorityDisinherit+0x108>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d00a      	beq.n	8004f76 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	60fb      	str	r3, [r7, #12]
}
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10a      	bne.n	8004f94 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	60bb      	str	r3, [r7, #8]
}
 8004f90:	bf00      	nop
 8004f92:	e7fe      	b.n	8004f92 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f98:	1e5a      	subs	r2, r3, #1
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d049      	beq.n	800503e <xTaskPriorityDisinherit+0xfe>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d145      	bne.n	800503e <xTaskPriorityDisinherit+0xfe>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fe fb08 	bl	80035cc <uxListRemove>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d115      	bne.n	8004fee <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc6:	4921      	ldr	r1, [pc, #132]	; (800504c <xTaskPriorityDisinherit+0x10c>)
 8004fc8:	4613      	mov	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10a      	bne.n	8004fee <xTaskPriorityDisinherit+0xae>
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fdc:	2201      	movs	r2, #1
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	43da      	mvns	r2, r3
 8004fe4:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <xTaskPriorityDisinherit+0x110>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	4a19      	ldr	r2, [pc, #100]	; (8005050 <xTaskPriorityDisinherit+0x110>)
 8004fec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	204a      	movs	r0, #74	; 0x4a
 8004ff4:	f001 fb1c 	bl	8006630 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	f1c3 0207 	rsb	r2, r3, #7
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB ); //SEGGER
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	2201      	movs	r2, #1
 8005012:	409a      	lsls	r2, r3
 8005014:	4b0e      	ldr	r3, [pc, #56]	; (8005050 <xTaskPriorityDisinherit+0x110>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4313      	orrs	r3, r2
 800501a:	4a0d      	ldr	r2, [pc, #52]	; (8005050 <xTaskPriorityDisinherit+0x110>)
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005022:	4613      	mov	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4a08      	ldr	r2, [pc, #32]	; (800504c <xTaskPriorityDisinherit+0x10c>)
 800502c:	441a      	add	r2, r3
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	3304      	adds	r3, #4
 8005032:	4619      	mov	r1, r3
 8005034:	4610      	mov	r0, r2
 8005036:	f7fe fa6c 	bl	8003512 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800503a:	2301      	movs	r3, #1
 800503c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800503e:	697b      	ldr	r3, [r7, #20]
	}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	200003ec 	.word	0x200003ec
 800504c:	200003f0 	.word	0x200003f0
 8005050:	200004f4 	.word	0x200004f4

08005054 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800505e:	4b32      	ldr	r3, [pc, #200]	; (8005128 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005064:	4b31      	ldr	r3, [pc, #196]	; (800512c <prvAddCurrentTaskToDelayedList+0xd8>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3304      	adds	r3, #4
 800506a:	4618      	mov	r0, r3
 800506c:	f7fe faae 	bl	80035cc <uxListRemove>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10b      	bne.n	800508e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005076:	4b2d      	ldr	r3, [pc, #180]	; (800512c <prvAddCurrentTaskToDelayedList+0xd8>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507c:	2201      	movs	r2, #1
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	43da      	mvns	r2, r3
 8005084:	4b2a      	ldr	r3, [pc, #168]	; (8005130 <prvAddCurrentTaskToDelayedList+0xdc>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4013      	ands	r3, r2
 800508a:	4a29      	ldr	r2, [pc, #164]	; (8005130 <prvAddCurrentTaskToDelayedList+0xdc>)
 800508c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005094:	d110      	bne.n	80050b8 <prvAddCurrentTaskToDelayedList+0x64>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00d      	beq.n	80050b8 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB); //SEGGER
 800509c:	4b23      	ldr	r3, [pc, #140]	; (800512c <prvAddCurrentTaskToDelayedList+0xd8>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	211b      	movs	r1, #27
 80050a2:	4618      	mov	r0, r3
 80050a4:	f002 f888 	bl	80071b8 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050a8:	4b20      	ldr	r3, [pc, #128]	; (800512c <prvAddCurrentTaskToDelayedList+0xd8>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3304      	adds	r3, #4
 80050ae:	4619      	mov	r1, r3
 80050b0:	4820      	ldr	r0, [pc, #128]	; (8005134 <prvAddCurrentTaskToDelayedList+0xe0>)
 80050b2:	f7fe fa2e 	bl	8003512 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050b6:	e032      	b.n	800511e <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4413      	add	r3, r2
 80050be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050c0:	4b1a      	ldr	r3, [pc, #104]	; (800512c <prvAddCurrentTaskToDelayedList+0xd8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d20f      	bcs.n	80050f0 <prvAddCurrentTaskToDelayedList+0x9c>
				traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST(); //SEGGER
 80050d0:	4b16      	ldr	r3, [pc, #88]	; (800512c <prvAddCurrentTaskToDelayedList+0xd8>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2104      	movs	r1, #4
 80050d6:	4618      	mov	r0, r3
 80050d8:	f002 f86e 	bl	80071b8 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050dc:	4b16      	ldr	r3, [pc, #88]	; (8005138 <prvAddCurrentTaskToDelayedList+0xe4>)
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	4b12      	ldr	r3, [pc, #72]	; (800512c <prvAddCurrentTaskToDelayedList+0xd8>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3304      	adds	r3, #4
 80050e6:	4619      	mov	r1, r3
 80050e8:	4610      	mov	r0, r2
 80050ea:	f7fe fa36 	bl	800355a <vListInsert>
}
 80050ee:	e016      	b.n	800511e <prvAddCurrentTaskToDelayedList+0xca>
				traceMOVED_TASK_TO_DELAYED_LIST(); //SEGGER
 80050f0:	4b0e      	ldr	r3, [pc, #56]	; (800512c <prvAddCurrentTaskToDelayedList+0xd8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2104      	movs	r1, #4
 80050f6:	4618      	mov	r0, r3
 80050f8:	f002 f85e 	bl	80071b8 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050fc:	4b0f      	ldr	r3, [pc, #60]	; (800513c <prvAddCurrentTaskToDelayedList+0xe8>)
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	4b0a      	ldr	r3, [pc, #40]	; (800512c <prvAddCurrentTaskToDelayedList+0xd8>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3304      	adds	r3, #4
 8005106:	4619      	mov	r1, r3
 8005108:	4610      	mov	r0, r2
 800510a:	f7fe fa26 	bl	800355a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800510e:	4b0c      	ldr	r3, [pc, #48]	; (8005140 <prvAddCurrentTaskToDelayedList+0xec>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	429a      	cmp	r2, r3
 8005116:	d202      	bcs.n	800511e <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8005118:	4a09      	ldr	r2, [pc, #36]	; (8005140 <prvAddCurrentTaskToDelayedList+0xec>)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	6013      	str	r3, [r2, #0]
}
 800511e:	bf00      	nop
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	200004f0 	.word	0x200004f0
 800512c:	200003ec 	.word	0x200003ec
 8005130:	200004f4 	.word	0x200004f4
 8005134:	200004d8 	.word	0x200004d8
 8005138:	200004a8 	.word	0x200004a8
 800513c:	200004a4 	.word	0x200004a4
 8005140:	2000050c 	.word	0x2000050c

08005144 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	3b04      	subs	r3, #4
 8005154:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800515c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3b04      	subs	r3, #4
 8005162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f023 0201 	bic.w	r2, r3, #1
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	3b04      	subs	r3, #4
 8005172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005174:	4a0c      	ldr	r2, [pc, #48]	; (80051a8 <pxPortInitialiseStack+0x64>)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	3b14      	subs	r3, #20
 800517e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	3b04      	subs	r3, #4
 800518a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f06f 0202 	mvn.w	r2, #2
 8005192:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3b20      	subs	r3, #32
 8005198:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800519a:	68fb      	ldr	r3, [r7, #12]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	080051ad 	.word	0x080051ad

080051ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80051b2:	2300      	movs	r3, #0
 80051b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051b6:	4b12      	ldr	r3, [pc, #72]	; (8005200 <prvTaskExitError+0x54>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051be:	d00a      	beq.n	80051d6 <prvTaskExitError+0x2a>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	60fb      	str	r3, [r7, #12]
}
 80051d2:	bf00      	nop
 80051d4:	e7fe      	b.n	80051d4 <prvTaskExitError+0x28>
	__asm volatile
 80051d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051da:	f383 8811 	msr	BASEPRI, r3
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f3bf 8f4f 	dsb	sy
 80051e6:	60bb      	str	r3, [r7, #8]
}
 80051e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80051ea:	bf00      	nop
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0fc      	beq.n	80051ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051f2:	bf00      	nop
 80051f4:	bf00      	nop
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	2000000c 	.word	0x2000000c
	...

08005210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005210:	4b07      	ldr	r3, [pc, #28]	; (8005230 <pxCurrentTCBConst2>)
 8005212:	6819      	ldr	r1, [r3, #0]
 8005214:	6808      	ldr	r0, [r1, #0]
 8005216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521a:	f380 8809 	msr	PSP, r0
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f04f 0000 	mov.w	r0, #0
 8005226:	f380 8811 	msr	BASEPRI, r0
 800522a:	4770      	bx	lr
 800522c:	f3af 8000 	nop.w

08005230 <pxCurrentTCBConst2>:
 8005230:	200003ec 	.word	0x200003ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop

08005238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005238:	4808      	ldr	r0, [pc, #32]	; (800525c <prvPortStartFirstTask+0x24>)
 800523a:	6800      	ldr	r0, [r0, #0]
 800523c:	6800      	ldr	r0, [r0, #0]
 800523e:	f380 8808 	msr	MSP, r0
 8005242:	f04f 0000 	mov.w	r0, #0
 8005246:	f380 8814 	msr	CONTROL, r0
 800524a:	b662      	cpsie	i
 800524c:	b661      	cpsie	f
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	df00      	svc	0
 8005258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800525a:	bf00      	nop
 800525c:	e000ed08 	.word	0xe000ed08

08005260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005266:	4b46      	ldr	r3, [pc, #280]	; (8005380 <xPortStartScheduler+0x120>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a46      	ldr	r2, [pc, #280]	; (8005384 <xPortStartScheduler+0x124>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d10a      	bne.n	8005286 <xPortStartScheduler+0x26>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	613b      	str	r3, [r7, #16]
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005286:	4b3e      	ldr	r3, [pc, #248]	; (8005380 <xPortStartScheduler+0x120>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a3f      	ldr	r2, [pc, #252]	; (8005388 <xPortStartScheduler+0x128>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d10a      	bne.n	80052a6 <xPortStartScheduler+0x46>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	60fb      	str	r3, [r7, #12]
}
 80052a2:	bf00      	nop
 80052a4:	e7fe      	b.n	80052a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052a6:	4b39      	ldr	r3, [pc, #228]	; (800538c <xPortStartScheduler+0x12c>)
 80052a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	22ff      	movs	r2, #255	; 0xff
 80052b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	4b31      	ldr	r3, [pc, #196]	; (8005390 <xPortStartScheduler+0x130>)
 80052cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052ce:	4b31      	ldr	r3, [pc, #196]	; (8005394 <xPortStartScheduler+0x134>)
 80052d0:	2207      	movs	r2, #7
 80052d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052d4:	e009      	b.n	80052ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80052d6:	4b2f      	ldr	r3, [pc, #188]	; (8005394 <xPortStartScheduler+0x134>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3b01      	subs	r3, #1
 80052dc:	4a2d      	ldr	r2, [pc, #180]	; (8005394 <xPortStartScheduler+0x134>)
 80052de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052ea:	78fb      	ldrb	r3, [r7, #3]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f2:	2b80      	cmp	r3, #128	; 0x80
 80052f4:	d0ef      	beq.n	80052d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052f6:	4b27      	ldr	r3, [pc, #156]	; (8005394 <xPortStartScheduler+0x134>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f1c3 0307 	rsb	r3, r3, #7
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d00a      	beq.n	8005318 <xPortStartScheduler+0xb8>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	60bb      	str	r3, [r7, #8]
}
 8005314:	bf00      	nop
 8005316:	e7fe      	b.n	8005316 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005318:	4b1e      	ldr	r3, [pc, #120]	; (8005394 <xPortStartScheduler+0x134>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	021b      	lsls	r3, r3, #8
 800531e:	4a1d      	ldr	r2, [pc, #116]	; (8005394 <xPortStartScheduler+0x134>)
 8005320:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005322:	4b1c      	ldr	r3, [pc, #112]	; (8005394 <xPortStartScheduler+0x134>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800532a:	4a1a      	ldr	r2, [pc, #104]	; (8005394 <xPortStartScheduler+0x134>)
 800532c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	b2da      	uxtb	r2, r3
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005336:	4b18      	ldr	r3, [pc, #96]	; (8005398 <xPortStartScheduler+0x138>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a17      	ldr	r2, [pc, #92]	; (8005398 <xPortStartScheduler+0x138>)
 800533c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005340:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005342:	4b15      	ldr	r3, [pc, #84]	; (8005398 <xPortStartScheduler+0x138>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a14      	ldr	r2, [pc, #80]	; (8005398 <xPortStartScheduler+0x138>)
 8005348:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800534c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800534e:	f000 f8e5 	bl	800551c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005352:	4b12      	ldr	r3, [pc, #72]	; (800539c <xPortStartScheduler+0x13c>)
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005358:	f000 f904 	bl	8005564 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800535c:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <xPortStartScheduler+0x140>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a0f      	ldr	r2, [pc, #60]	; (80053a0 <xPortStartScheduler+0x140>)
 8005362:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005366:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005368:	f7ff ff66 	bl	8005238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800536c:	f7ff fb34 	bl	80049d8 <vTaskSwitchContext>
	prvTaskExitError();
 8005370:	f7ff ff1c 	bl	80051ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	e000ed00 	.word	0xe000ed00
 8005384:	410fc271 	.word	0x410fc271
 8005388:	410fc270 	.word	0x410fc270
 800538c:	e000e400 	.word	0xe000e400
 8005390:	20000518 	.word	0x20000518
 8005394:	2000051c 	.word	0x2000051c
 8005398:	e000ed20 	.word	0xe000ed20
 800539c:	2000000c 	.word	0x2000000c
 80053a0:	e000ef34 	.word	0xe000ef34

080053a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
	__asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	607b      	str	r3, [r7, #4]
}
 80053bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053be:	4b0f      	ldr	r3, [pc, #60]	; (80053fc <vPortEnterCritical+0x58>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3301      	adds	r3, #1
 80053c4:	4a0d      	ldr	r2, [pc, #52]	; (80053fc <vPortEnterCritical+0x58>)
 80053c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053c8:	4b0c      	ldr	r3, [pc, #48]	; (80053fc <vPortEnterCritical+0x58>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d10f      	bne.n	80053f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053d0:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <vPortEnterCritical+0x5c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80053da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	603b      	str	r3, [r7, #0]
}
 80053ec:	bf00      	nop
 80053ee:	e7fe      	b.n	80053ee <vPortEnterCritical+0x4a>
	}
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	2000000c 	.word	0x2000000c
 8005400:	e000ed04 	.word	0xe000ed04

08005404 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800540a:	4b12      	ldr	r3, [pc, #72]	; (8005454 <vPortExitCritical+0x50>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10a      	bne.n	8005428 <vPortExitCritical+0x24>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	607b      	str	r3, [r7, #4]
}
 8005424:	bf00      	nop
 8005426:	e7fe      	b.n	8005426 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005428:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <vPortExitCritical+0x50>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3b01      	subs	r3, #1
 800542e:	4a09      	ldr	r2, [pc, #36]	; (8005454 <vPortExitCritical+0x50>)
 8005430:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005432:	4b08      	ldr	r3, [pc, #32]	; (8005454 <vPortExitCritical+0x50>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d105      	bne.n	8005446 <vPortExitCritical+0x42>
 800543a:	2300      	movs	r3, #0
 800543c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	f383 8811 	msr	BASEPRI, r3
}
 8005444:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	2000000c 	.word	0x2000000c
	...

08005460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005460:	f3ef 8009 	mrs	r0, PSP
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	4b15      	ldr	r3, [pc, #84]	; (80054c0 <pxCurrentTCBConst>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	f01e 0f10 	tst.w	lr, #16
 8005470:	bf08      	it	eq
 8005472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547a:	6010      	str	r0, [r2, #0]
 800547c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005480:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005484:	f380 8811 	msr	BASEPRI, r0
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f7ff faa2 	bl	80049d8 <vTaskSwitchContext>
 8005494:	f04f 0000 	mov.w	r0, #0
 8005498:	f380 8811 	msr	BASEPRI, r0
 800549c:	bc09      	pop	{r0, r3}
 800549e:	6819      	ldr	r1, [r3, #0]
 80054a0:	6808      	ldr	r0, [r1, #0]
 80054a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a6:	f01e 0f10 	tst.w	lr, #16
 80054aa:	bf08      	it	eq
 80054ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054b0:	f380 8809 	msr	PSP, r0
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	f3af 8000 	nop.w

080054c0 <pxCurrentTCBConst>:
 80054c0:	200003ec 	.word	0x200003ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop

080054c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	607b      	str	r3, [r7, #4]
}
 80054e0:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. (SEGGER PATCHED) */
	portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80054e2:	f001 fd0d 	bl	8006f00 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054e6:	f7ff f9bb 	bl	8004860 <xTaskIncrementTick>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d006      	beq.n	80054fe <SysTick_Handler+0x36>
		{
			traceISR_EXIT_TO_SCHEDULER();
 80054f0:	f001 fd64 	bl	8006fbc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054f4:	4b08      	ldr	r3, [pc, #32]	; (8005518 <SysTick_Handler+0x50>)
 80054f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	e001      	b.n	8005502 <SysTick_Handler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 80054fe:	f001 fd41 	bl	8006f84 <SEGGER_SYSVIEW_RecordExitISR>
 8005502:	2300      	movs	r3, #0
 8005504:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	f383 8811 	msr	BASEPRI, r3
}
 800550c:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800550e:	bf00      	nop
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	e000ed04 	.word	0xe000ed04

0800551c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005520:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <vPortSetupTimerInterrupt+0x34>)
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005526:	4b0b      	ldr	r3, [pc, #44]	; (8005554 <vPortSetupTimerInterrupt+0x38>)
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800552c:	4b0a      	ldr	r3, [pc, #40]	; (8005558 <vPortSetupTimerInterrupt+0x3c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a0a      	ldr	r2, [pc, #40]	; (800555c <vPortSetupTimerInterrupt+0x40>)
 8005532:	fba2 2303 	umull	r2, r3, r2, r3
 8005536:	095b      	lsrs	r3, r3, #5
 8005538:	4a09      	ldr	r2, [pc, #36]	; (8005560 <vPortSetupTimerInterrupt+0x44>)
 800553a:	3b01      	subs	r3, #1
 800553c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800553e:	4b04      	ldr	r3, [pc, #16]	; (8005550 <vPortSetupTimerInterrupt+0x34>)
 8005540:	2207      	movs	r2, #7
 8005542:	601a      	str	r2, [r3, #0]
}
 8005544:	bf00      	nop
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	e000e010 	.word	0xe000e010
 8005554:	e000e018 	.word	0xe000e018
 8005558:	20000000 	.word	0x20000000
 800555c:	51eb851f 	.word	0x51eb851f
 8005560:	e000e014 	.word	0xe000e014

08005564 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005564:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005574 <vPortEnableVFP+0x10>
 8005568:	6801      	ldr	r1, [r0, #0]
 800556a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800556e:	6001      	str	r1, [r0, #0]
 8005570:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005572:	bf00      	nop
 8005574:	e000ed88 	.word	0xe000ed88

08005578 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800557e:	f3ef 8305 	mrs	r3, IPSR
 8005582:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b0f      	cmp	r3, #15
 8005588:	d914      	bls.n	80055b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800558a:	4a17      	ldr	r2, [pc, #92]	; (80055e8 <vPortValidateInterruptPriority+0x70>)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4413      	add	r3, r2
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005594:	4b15      	ldr	r3, [pc, #84]	; (80055ec <vPortValidateInterruptPriority+0x74>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	7afa      	ldrb	r2, [r7, #11]
 800559a:	429a      	cmp	r2, r3
 800559c:	d20a      	bcs.n	80055b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	607b      	str	r3, [r7, #4]
}
 80055b0:	bf00      	nop
 80055b2:	e7fe      	b.n	80055b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80055b4:	4b0e      	ldr	r3, [pc, #56]	; (80055f0 <vPortValidateInterruptPriority+0x78>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055bc:	4b0d      	ldr	r3, [pc, #52]	; (80055f4 <vPortValidateInterruptPriority+0x7c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d90a      	bls.n	80055da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	603b      	str	r3, [r7, #0]
}
 80055d6:	bf00      	nop
 80055d8:	e7fe      	b.n	80055d8 <vPortValidateInterruptPriority+0x60>
	}
 80055da:	bf00      	nop
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	e000e3f0 	.word	0xe000e3f0
 80055ec:	20000518 	.word	0x20000518
 80055f0:	e000ed0c 	.word	0xe000ed0c
 80055f4:	2000051c 	.word	0x2000051c

080055f8 <vSetVarulMaxPRIGROUPValue>:

	//SEGGER Manually patched - Sozza

#if( configASSERT_DEFINED == 1)
	void vSetVarulMaxPRIGROUPValue( void ){
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80055fe:	4b27      	ldr	r3, [pc, #156]	; (800569c <vSetVarulMaxPRIGROUPValue+0xa4>)
 8005600:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	b2db      	uxtb	r3, r3
 8005608:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	22ff      	movs	r2, #255	; 0xff
 800560e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	b2db      	uxtb	r3, r3
 8005616:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005618:	78fb      	ldrb	r3, [r7, #3]
 800561a:	b2db      	uxtb	r3, r3
 800561c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005620:	b2da      	uxtb	r2, r3
 8005622:	4b1f      	ldr	r3, [pc, #124]	; (80056a0 <vSetVarulMaxPRIGROUPValue+0xa8>)
 8005624:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005626:	4b1f      	ldr	r3, [pc, #124]	; (80056a4 <vSetVarulMaxPRIGROUPValue+0xac>)
 8005628:	2207      	movs	r2, #7
 800562a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800562c:	e009      	b.n	8005642 <vSetVarulMaxPRIGROUPValue+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800562e:	4b1d      	ldr	r3, [pc, #116]	; (80056a4 <vSetVarulMaxPRIGROUPValue+0xac>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3b01      	subs	r3, #1
 8005634:	4a1b      	ldr	r2, [pc, #108]	; (80056a4 <vSetVarulMaxPRIGROUPValue+0xac>)
 8005636:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005638:	78fb      	ldrb	r3, [r7, #3]
 800563a:	b2db      	uxtb	r3, r3
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	b2db      	uxtb	r3, r3
 8005640:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005642:	78fb      	ldrb	r3, [r7, #3]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564a:	2b80      	cmp	r3, #128	; 0x80
 800564c:	d0ef      	beq.n	800562e <vSetVarulMaxPRIGROUPValue+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800564e:	4b15      	ldr	r3, [pc, #84]	; (80056a4 <vSetVarulMaxPRIGROUPValue+0xac>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f1c3 0307 	rsb	r3, r3, #7
 8005656:	2b04      	cmp	r3, #4
 8005658:	d00a      	beq.n	8005670 <vSetVarulMaxPRIGROUPValue+0x78>
	__asm volatile
 800565a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	60bb      	str	r3, [r7, #8]
}
 800566c:	bf00      	nop
 800566e:	e7fe      	b.n	800566e <vSetVarulMaxPRIGROUPValue+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005670:	4b0c      	ldr	r3, [pc, #48]	; (80056a4 <vSetVarulMaxPRIGROUPValue+0xac>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	021b      	lsls	r3, r3, #8
 8005676:	4a0b      	ldr	r2, [pc, #44]	; (80056a4 <vSetVarulMaxPRIGROUPValue+0xac>)
 8005678:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800567a:	4b0a      	ldr	r3, [pc, #40]	; (80056a4 <vSetVarulMaxPRIGROUPValue+0xac>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005682:	4a08      	ldr	r2, [pc, #32]	; (80056a4 <vSetVarulMaxPRIGROUPValue+0xac>)
 8005684:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	b2da      	uxtb	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	}
 800568e:	bf00      	nop
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	e000e400 	.word	0xe000e400
 80056a0:	20000518 	.word	0x20000518
 80056a4:	2000051c 	.word	0x2000051c

080056a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08a      	sub	sp, #40	; 0x28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80056b0:	2300      	movs	r3, #0
 80056b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80056b4:	f7ff f814 	bl	80046e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80056b8:	4b5b      	ldr	r3, [pc, #364]	; (8005828 <pvPortMalloc+0x180>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80056c0:	f000 f920 	bl	8005904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80056c4:	4b59      	ldr	r3, [pc, #356]	; (800582c <pvPortMalloc+0x184>)
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4013      	ands	r3, r2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f040 8093 	bne.w	80057f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d01d      	beq.n	8005714 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80056d8:	2208      	movs	r2, #8
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4413      	add	r3, r2
 80056de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d014      	beq.n	8005714 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f023 0307 	bic.w	r3, r3, #7
 80056f0:	3308      	adds	r3, #8
 80056f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <pvPortMalloc+0x6c>
	__asm volatile
 80056fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	617b      	str	r3, [r7, #20]
}
 8005710:	bf00      	nop
 8005712:	e7fe      	b.n	8005712 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d06e      	beq.n	80057f8 <pvPortMalloc+0x150>
 800571a:	4b45      	ldr	r3, [pc, #276]	; (8005830 <pvPortMalloc+0x188>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	429a      	cmp	r2, r3
 8005722:	d869      	bhi.n	80057f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005724:	4b43      	ldr	r3, [pc, #268]	; (8005834 <pvPortMalloc+0x18c>)
 8005726:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005728:	4b42      	ldr	r3, [pc, #264]	; (8005834 <pvPortMalloc+0x18c>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800572e:	e004      	b.n	800573a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	429a      	cmp	r2, r3
 8005742:	d903      	bls.n	800574c <pvPortMalloc+0xa4>
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f1      	bne.n	8005730 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800574c:	4b36      	ldr	r3, [pc, #216]	; (8005828 <pvPortMalloc+0x180>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005752:	429a      	cmp	r2, r3
 8005754:	d050      	beq.n	80057f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2208      	movs	r2, #8
 800575c:	4413      	add	r3, r2
 800575e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	1ad2      	subs	r2, r2, r3
 8005770:	2308      	movs	r3, #8
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	429a      	cmp	r2, r3
 8005776:	d91f      	bls.n	80057b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4413      	add	r3, r2
 800577e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <pvPortMalloc+0xf8>
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	613b      	str	r3, [r7, #16]
}
 800579c:	bf00      	nop
 800579e:	e7fe      	b.n	800579e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	1ad2      	subs	r2, r2, r3
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057b2:	69b8      	ldr	r0, [r7, #24]
 80057b4:	f000 f908 	bl	80059c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057b8:	4b1d      	ldr	r3, [pc, #116]	; (8005830 <pvPortMalloc+0x188>)
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	4a1b      	ldr	r2, [pc, #108]	; (8005830 <pvPortMalloc+0x188>)
 80057c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80057c6:	4b1a      	ldr	r3, [pc, #104]	; (8005830 <pvPortMalloc+0x188>)
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	4b1b      	ldr	r3, [pc, #108]	; (8005838 <pvPortMalloc+0x190>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d203      	bcs.n	80057da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80057d2:	4b17      	ldr	r3, [pc, #92]	; (8005830 <pvPortMalloc+0x188>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a18      	ldr	r2, [pc, #96]	; (8005838 <pvPortMalloc+0x190>)
 80057d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	4b13      	ldr	r3, [pc, #76]	; (800582c <pvPortMalloc+0x184>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	431a      	orrs	r2, r3
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	2200      	movs	r2, #0
 80057ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80057ee:	4b13      	ldr	r3, [pc, #76]	; (800583c <pvPortMalloc+0x194>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3301      	adds	r3, #1
 80057f4:	4a11      	ldr	r2, [pc, #68]	; (800583c <pvPortMalloc+0x194>)
 80057f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80057f8:	f7fe ff80 	bl	80046fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	f003 0307 	and.w	r3, r3, #7
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <pvPortMalloc+0x174>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	60fb      	str	r3, [r7, #12]
}
 8005818:	bf00      	nop
 800581a:	e7fe      	b.n	800581a <pvPortMalloc+0x172>
	return pvReturn;
 800581c:	69fb      	ldr	r3, [r7, #28]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3728      	adds	r7, #40	; 0x28
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	20004128 	.word	0x20004128
 800582c:	2000413c 	.word	0x2000413c
 8005830:	2000412c 	.word	0x2000412c
 8005834:	20004120 	.word	0x20004120
 8005838:	20004130 	.word	0x20004130
 800583c:	20004134 	.word	0x20004134

08005840 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d04d      	beq.n	80058ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005852:	2308      	movs	r3, #8
 8005854:	425b      	negs	r3, r3
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	4413      	add	r3, r2
 800585a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	4b24      	ldr	r3, [pc, #144]	; (80058f8 <vPortFree+0xb8>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4013      	ands	r3, r2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10a      	bne.n	8005884 <vPortFree+0x44>
	__asm volatile
 800586e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	60fb      	str	r3, [r7, #12]
}
 8005880:	bf00      	nop
 8005882:	e7fe      	b.n	8005882 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <vPortFree+0x62>
	__asm volatile
 800588c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	60bb      	str	r3, [r7, #8]
}
 800589e:	bf00      	nop
 80058a0:	e7fe      	b.n	80058a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	4b14      	ldr	r3, [pc, #80]	; (80058f8 <vPortFree+0xb8>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4013      	ands	r3, r2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d01e      	beq.n	80058ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d11a      	bne.n	80058ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	4b0e      	ldr	r3, [pc, #56]	; (80058f8 <vPortFree+0xb8>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	43db      	mvns	r3, r3
 80058c2:	401a      	ands	r2, r3
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80058c8:	f7fe ff0a 	bl	80046e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	4b0a      	ldr	r3, [pc, #40]	; (80058fc <vPortFree+0xbc>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4413      	add	r3, r2
 80058d6:	4a09      	ldr	r2, [pc, #36]	; (80058fc <vPortFree+0xbc>)
 80058d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058da:	6938      	ldr	r0, [r7, #16]
 80058dc:	f000 f874 	bl	80059c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80058e0:	4b07      	ldr	r3, [pc, #28]	; (8005900 <vPortFree+0xc0>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3301      	adds	r3, #1
 80058e6:	4a06      	ldr	r2, [pc, #24]	; (8005900 <vPortFree+0xc0>)
 80058e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80058ea:	f7fe ff07 	bl	80046fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058ee:	bf00      	nop
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	2000413c 	.word	0x2000413c
 80058fc:	2000412c 	.word	0x2000412c
 8005900:	20004138 	.word	0x20004138

08005904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800590a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800590e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005910:	4b27      	ldr	r3, [pc, #156]	; (80059b0 <prvHeapInit+0xac>)
 8005912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00c      	beq.n	8005938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3307      	adds	r3, #7
 8005922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f023 0307 	bic.w	r3, r3, #7
 800592a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	4a1f      	ldr	r2, [pc, #124]	; (80059b0 <prvHeapInit+0xac>)
 8005934:	4413      	add	r3, r2
 8005936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800593c:	4a1d      	ldr	r2, [pc, #116]	; (80059b4 <prvHeapInit+0xb0>)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005942:	4b1c      	ldr	r3, [pc, #112]	; (80059b4 <prvHeapInit+0xb0>)
 8005944:	2200      	movs	r2, #0
 8005946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	4413      	add	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005950:	2208      	movs	r2, #8
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	1a9b      	subs	r3, r3, r2
 8005956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0307 	bic.w	r3, r3, #7
 800595e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4a15      	ldr	r2, [pc, #84]	; (80059b8 <prvHeapInit+0xb4>)
 8005964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005966:	4b14      	ldr	r3, [pc, #80]	; (80059b8 <prvHeapInit+0xb4>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2200      	movs	r2, #0
 800596c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800596e:	4b12      	ldr	r3, [pc, #72]	; (80059b8 <prvHeapInit+0xb4>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2200      	movs	r2, #0
 8005974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	1ad2      	subs	r2, r2, r3
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005984:	4b0c      	ldr	r3, [pc, #48]	; (80059b8 <prvHeapInit+0xb4>)
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	4a0a      	ldr	r2, [pc, #40]	; (80059bc <prvHeapInit+0xb8>)
 8005992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	4a09      	ldr	r2, [pc, #36]	; (80059c0 <prvHeapInit+0xbc>)
 800599a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800599c:	4b09      	ldr	r3, [pc, #36]	; (80059c4 <prvHeapInit+0xc0>)
 800599e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80059a2:	601a      	str	r2, [r3, #0]
}
 80059a4:	bf00      	nop
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	20000520 	.word	0x20000520
 80059b4:	20004120 	.word	0x20004120
 80059b8:	20004128 	.word	0x20004128
 80059bc:	20004130 	.word	0x20004130
 80059c0:	2000412c 	.word	0x2000412c
 80059c4:	2000413c 	.word	0x2000413c

080059c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80059d0:	4b28      	ldr	r3, [pc, #160]	; (8005a74 <prvInsertBlockIntoFreeList+0xac>)
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	e002      	b.n	80059dc <prvInsertBlockIntoFreeList+0x14>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d8f7      	bhi.n	80059d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	4413      	add	r3, r2
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d108      	bne.n	8005a0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	441a      	add	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	441a      	add	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d118      	bne.n	8005a50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	4b15      	ldr	r3, [pc, #84]	; (8005a78 <prvInsertBlockIntoFreeList+0xb0>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d00d      	beq.n	8005a46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	441a      	add	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	e008      	b.n	8005a58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a46:	4b0c      	ldr	r3, [pc, #48]	; (8005a78 <prvInsertBlockIntoFreeList+0xb0>)
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	e003      	b.n	8005a58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d002      	beq.n	8005a66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a66:	bf00      	nop
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	20004120 	.word	0x20004120
 8005a78:	20004128 	.word	0x20004128

08005a7c <LED1_toggle>:

#include "gpio.h"
#include "module_led.h"

void LED1_toggle()
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8005a80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a84:	4802      	ldr	r0, [pc, #8]	; (8005a90 <LED1_toggle+0x14>)
 8005a86:	f7fb fbe2 	bl	800124e <HAL_GPIO_TogglePin>
}
 8005a8a:	bf00      	nop
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	40021400 	.word	0x40021400

08005a94 <LED2_toggle>:

void LED2_toggle()
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8005a98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a9c:	4802      	ldr	r0, [pc, #8]	; (8005aa8 <LED2_toggle+0x14>)
 8005a9e:	f7fb fbd6 	bl	800124e <HAL_GPIO_TogglePin>
}
 8005aa2:	bf00      	nop
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	40021400 	.word	0x40021400

08005aac <UART_printMsg>:
	  free(testStrCat);
	  free(numberStr);
}

void UART_printMsg(char *msg)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
	  USART2_addToQueue(msg);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f001 fd83 	bl	80075c0 <USART2_addToQueue>
}
 8005aba:	bf00      	nop
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
	...

08005ac4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005ac8:	4803      	ldr	r0, [pc, #12]	; (8005ad8 <_cbSendSystemDesc+0x14>)
 8005aca:	f001 f9c3 	bl	8006e54 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005ace:	4803      	ldr	r0, [pc, #12]	; (8005adc <_cbSendSystemDesc+0x18>)
 8005ad0:	f001 f9c0 	bl	8006e54 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005ad4:	bf00      	nop
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	0800793c 	.word	0x0800793c
 8005adc:	08007978 	.word	0x08007978

08005ae0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005ae4:	4b06      	ldr	r3, [pc, #24]	; (8005b00 <SEGGER_SYSVIEW_Conf+0x20>)
 8005ae6:	6818      	ldr	r0, [r3, #0]
 8005ae8:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <SEGGER_SYSVIEW_Conf+0x20>)
 8005aea:	6819      	ldr	r1, [r3, #0]
 8005aec:	4b05      	ldr	r3, [pc, #20]	; (8005b04 <SEGGER_SYSVIEW_Conf+0x24>)
 8005aee:	4a06      	ldr	r2, [pc, #24]	; (8005b08 <SEGGER_SYSVIEW_Conf+0x28>)
 8005af0:	f000 fd2c 	bl	800654c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005af4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005af8:	f000 fd6c 	bl	80065d4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005afc:	bf00      	nop
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	20000000 	.word	0x20000000
 8005b04:	08005ac5 	.word	0x08005ac5
 8005b08:	08007a18 	.word	0x08007a18

08005b0c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005b12:	2300      	movs	r3, #0
 8005b14:	607b      	str	r3, [r7, #4]
 8005b16:	e048      	b.n	8005baa <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8005b18:	4929      	ldr	r1, [pc, #164]	; (8005bc0 <_cbSendTaskList+0xb4>)
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff f97b 	bl	8004e24 <uxTaskGetStackHighWaterMark>
 8005b2e:	4601      	mov	r1, r0
 8005b30:	4823      	ldr	r0, [pc, #140]	; (8005bc0 <_cbSendTaskList+0xb4>)
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	4613      	mov	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4403      	add	r3, r0
 8005b3e:	3310      	adds	r3, #16
 8005b40:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005b42:	491f      	ldr	r1, [pc, #124]	; (8005bc0 <_cbSendTaskList+0xb4>)
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	4613      	mov	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	440b      	add	r3, r1
 8005b50:	6818      	ldr	r0, [r3, #0]
 8005b52:	491b      	ldr	r1, [pc, #108]	; (8005bc0 <_cbSendTaskList+0xb4>)
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	4613      	mov	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	440b      	add	r3, r1
 8005b60:	3304      	adds	r3, #4
 8005b62:	6819      	ldr	r1, [r3, #0]
 8005b64:	4c16      	ldr	r4, [pc, #88]	; (8005bc0 <_cbSendTaskList+0xb4>)
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4423      	add	r3, r4
 8005b72:	3308      	adds	r3, #8
 8005b74:	681c      	ldr	r4, [r3, #0]
 8005b76:	4d12      	ldr	r5, [pc, #72]	; (8005bc0 <_cbSendTaskList+0xb4>)
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	442b      	add	r3, r5
 8005b84:	330c      	adds	r3, #12
 8005b86:	681d      	ldr	r5, [r3, #0]
 8005b88:	4e0d      	ldr	r6, [pc, #52]	; (8005bc0 <_cbSendTaskList+0xb4>)
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4433      	add	r3, r6
 8005b96:	3310      	adds	r3, #16
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	462b      	mov	r3, r5
 8005b9e:	4622      	mov	r2, r4
 8005ba0:	f000 f8de 	bl	8005d60 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	607b      	str	r3, [r7, #4]
 8005baa:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <_cbSendTaskList+0xb8>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d3b1      	bcc.n	8005b18 <_cbSendTaskList+0xc>
  }
}
 8005bb4:	bf00      	nop
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20004140 	.word	0x20004140
 8005bc4:	200041e0 	.word	0x200041e0

08005bc8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bcc:	b086      	sub	sp, #24
 8005bce:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005bd0:	f7fe fe34 	bl	800483c <xTaskGetTickCountFromISR>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	60bb      	str	r3, [r7, #8]
 8005bda:	60fa      	str	r2, [r7, #12]
 8005bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005be0:	e9c7 2304 	strd	r2, r3, [r7, #16]
  Time *= portTICK_PERIOD_MS;
 8005be4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005be8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005bec:	f04f 0000 	mov.w	r0, #0
 8005bf0:	f04f 0100 	mov.w	r1, #0
 8005bf4:	0099      	lsls	r1, r3, #2
 8005bf6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8005bfa:	0090      	lsls	r0, r2, #2
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	68b9      	ldr	r1, [r7, #8]
 8005c02:	eb12 0801 	adds.w	r8, r2, r1
 8005c06:	68f9      	ldr	r1, [r7, #12]
 8005c08:	eb43 0901 	adc.w	r9, r3, r1
 8005c0c:	eb18 0308 	adds.w	r3, r8, r8
 8005c10:	603b      	str	r3, [r7, #0]
 8005c12:	eb49 0309 	adc.w	r3, r9, r9
 8005c16:	607b      	str	r3, [r7, #4]
 8005c18:	e9d7 8900 	ldrd	r8, r9, [r7]
 8005c1c:	e9c7 8904 	strd	r8, r9, [r7, #16]
  Time *= 1000;
 8005c20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	f04f 0800 	mov.w	r8, #0
 8005c2c:	f04f 0900 	mov.w	r9, #0
 8005c30:	ea4f 1943 	mov.w	r9, r3, lsl #5
 8005c34:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
 8005c38:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8005c3c:	4642      	mov	r2, r8
 8005c3e:	464b      	mov	r3, r9
 8005c40:	1a14      	subs	r4, r2, r0
 8005c42:	eb63 0501 	sbc.w	r5, r3, r1
 8005c46:	f04f 0200 	mov.w	r2, #0
 8005c4a:	f04f 0300 	mov.w	r3, #0
 8005c4e:	00ab      	lsls	r3, r5, #2
 8005c50:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005c54:	00a2      	lsls	r2, r4, #2
 8005c56:	4614      	mov	r4, r2
 8005c58:	461d      	mov	r5, r3
 8005c5a:	eb14 0a00 	adds.w	sl, r4, r0
 8005c5e:	eb45 0b01 	adc.w	fp, r5, r1
 8005c62:	f04f 0200 	mov.w	r2, #0
 8005c66:	f04f 0300 	mov.w	r3, #0
 8005c6a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c6e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c76:	4692      	mov	sl, r2
 8005c78:	469b      	mov	fp, r3
 8005c7a:	e9c7 ab04 	strd	sl, fp, [r7, #16]
  return Time;
 8005c7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8005c82:	4610      	mov	r0, r2
 8005c84:	4619      	mov	r1, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005c90 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af02      	add	r7, sp, #8
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005c9e:	2205      	movs	r2, #5
 8005ca0:	492b      	ldr	r1, [pc, #172]	; (8005d50 <SYSVIEW_AddTask+0xc0>)
 8005ca2:	68b8      	ldr	r0, [r7, #8]
 8005ca4:	f001 fd04 	bl	80076b0 <memcmp>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d04b      	beq.n	8005d46 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005cae:	4b29      	ldr	r3, [pc, #164]	; (8005d54 <SYSVIEW_AddTask+0xc4>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b07      	cmp	r3, #7
 8005cb4:	d903      	bls.n	8005cbe <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005cb6:	4828      	ldr	r0, [pc, #160]	; (8005d58 <SYSVIEW_AddTask+0xc8>)
 8005cb8:	f001 fc26 	bl	8007508 <SEGGER_SYSVIEW_Warn>
    return;
 8005cbc:	e044      	b.n	8005d48 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005cbe:	4b25      	ldr	r3, [pc, #148]	; (8005d54 <SYSVIEW_AddTask+0xc4>)
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	4926      	ldr	r1, [pc, #152]	; (8005d5c <SYSVIEW_AddTask+0xcc>)
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	440b      	add	r3, r1
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005cd2:	4b20      	ldr	r3, [pc, #128]	; (8005d54 <SYSVIEW_AddTask+0xc4>)
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4921      	ldr	r1, [pc, #132]	; (8005d5c <SYSVIEW_AddTask+0xcc>)
 8005cd8:	4613      	mov	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	440b      	add	r3, r1
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005ce8:	4b1a      	ldr	r3, [pc, #104]	; (8005d54 <SYSVIEW_AddTask+0xc4>)
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	491b      	ldr	r1, [pc, #108]	; (8005d5c <SYSVIEW_AddTask+0xcc>)
 8005cee:	4613      	mov	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	440b      	add	r3, r1
 8005cf8:	3308      	adds	r3, #8
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005cfe:	4b15      	ldr	r3, [pc, #84]	; (8005d54 <SYSVIEW_AddTask+0xc4>)
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	4916      	ldr	r1, [pc, #88]	; (8005d5c <SYSVIEW_AddTask+0xcc>)
 8005d04:	4613      	mov	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	440b      	add	r3, r1
 8005d0e:	330c      	adds	r3, #12
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005d14:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <SYSVIEW_AddTask+0xc4>)
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	4910      	ldr	r1, [pc, #64]	; (8005d5c <SYSVIEW_AddTask+0xcc>)
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	440b      	add	r3, r1
 8005d24:	3310      	adds	r3, #16
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005d2a:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <SYSVIEW_AddTask+0xc4>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	4a08      	ldr	r2, [pc, #32]	; (8005d54 <SYSVIEW_AddTask+0xc4>)
 8005d32:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	68b9      	ldr	r1, [r7, #8]
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 f80e 	bl	8005d60 <SYSVIEW_SendTaskInfo>
 8005d44:	e000      	b.n	8005d48 <SYSVIEW_AddTask+0xb8>
    return;
 8005d46:	bf00      	nop

}
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	08007988 	.word	0x08007988
 8005d54:	200041e0 	.word	0x200041e0
 8005d58:	08007990 	.word	0x08007990
 8005d5c:	20004140 	.word	0x20004140

08005d60 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08a      	sub	sp, #40	; 0x28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
 8005d6c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005d6e:	f107 0314 	add.w	r3, r7, #20
 8005d72:	2214      	movs	r2, #20
 8005d74:	2100      	movs	r1, #0
 8005d76:	4618      	mov	r0, r3
 8005d78:	f001 fcb8 	bl	80076ec <memset>
  TaskInfo.TaskID     = TaskID;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005d90:	f107 0314 	add.w	r3, r7, #20
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 ff65 	bl	8006c64 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005d9a:	bf00      	nop
 8005d9c:	3728      	adds	r7, #40	; 0x28
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005daa:	4b24      	ldr	r3, [pc, #144]	; (8005e3c <_DoInit+0x98>)
 8005dac:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2203      	movs	r2, #3
 8005db2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2203      	movs	r2, #3
 8005db8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a20      	ldr	r2, [pc, #128]	; (8005e40 <_DoInit+0x9c>)
 8005dbe:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a20      	ldr	r2, [pc, #128]	; (8005e44 <_DoInit+0xa0>)
 8005dc4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005dcc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a17      	ldr	r2, [pc, #92]	; (8005e40 <_DoInit+0x9c>)
 8005de4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a17      	ldr	r2, [pc, #92]	; (8005e48 <_DoInit+0xa4>)
 8005dea:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2210      	movs	r2, #16
 8005df0:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3307      	adds	r3, #7
 8005e08:	4a10      	ldr	r2, [pc, #64]	; (8005e4c <_DoInit+0xa8>)
 8005e0a:	6810      	ldr	r0, [r2, #0]
 8005e0c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005e0e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a0e      	ldr	r2, [pc, #56]	; (8005e50 <_DoInit+0xac>)
 8005e16:	6810      	ldr	r0, [r2, #0]
 8005e18:	6018      	str	r0, [r3, #0]
 8005e1a:	8891      	ldrh	r1, [r2, #4]
 8005e1c:	7992      	ldrb	r2, [r2, #6]
 8005e1e:	8099      	strh	r1, [r3, #4]
 8005e20:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005e22:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005e2c:	f3bf 8f5f 	dmb	sy
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	200041e4 	.word	0x200041e4
 8005e40:	080079e0 	.word	0x080079e0
 8005e44:	2000428c 	.word	0x2000428c
 8005e48:	2000468c 	.word	0x2000468c
 8005e4c:	080079ec 	.word	0x080079ec
 8005e50:	080079f0 	.word	0x080079f0

08005e54 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08c      	sub	sp, #48	; 0x30
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005e60:	4b3e      	ldr	r3, [pc, #248]	; (8005f5c <SEGGER_RTT_ReadNoLock+0x108>)
 8005e62:	623b      	str	r3, [r7, #32]
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <SEGGER_RTT_ReadNoLock+0x1e>
 8005e6e:	f7ff ff99 	bl	8005da4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	4613      	mov	r3, r2
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	4413      	add	r3, r2
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	3360      	adds	r3, #96	; 0x60
 8005e7e:	4a37      	ldr	r2, [pc, #220]	; (8005f5c <SEGGER_RTT_ReadNoLock+0x108>)
 8005e80:	4413      	add	r3, r2
 8005e82:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005e94:	2300      	movs	r3, #0
 8005e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d92b      	bls.n	8005ef8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	bf28      	it	cs
 8005eb2:	4613      	movcs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebc:	4413      	add	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	6939      	ldr	r1, [r7, #16]
 8005ec4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ec6:	f001 fc03 	bl	80076d0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	4413      	add	r3, r2
 8005ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d101      	bne.n	8005ef8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4293      	cmp	r3, r2
 8005f06:	bf28      	it	cs
 8005f08:	4613      	movcs	r3, r2
 8005f0a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d019      	beq.n	8005f46 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f18:	4413      	add	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	6939      	ldr	r1, [r7, #16]
 8005f20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f22:	f001 fbd5 	bl	80076d0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	4413      	add	r3, r2
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	4413      	add	r3, r2
 8005f44:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f50:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3730      	adds	r7, #48	; 0x30
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	200041e4 	.word	0x200041e4

08005f60 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b088      	sub	sp, #32
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
 8005f6c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005f6e:	4b3d      	ldr	r3, [pc, #244]	; (8006064 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005f70:	61bb      	str	r3, [r7, #24]
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005f7c:	f7ff ff12 	bl	8005da4 <_DoInit>
  SEGGER_RTT_LOCK();
 8005f80:	f3ef 8311 	mrs	r3, BASEPRI
 8005f84:	f04f 0120 	mov.w	r1, #32
 8005f88:	f381 8811 	msr	BASEPRI, r1
 8005f8c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005f8e:	4b35      	ldr	r3, [pc, #212]	; (8006064 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005f90:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005f92:	2300      	movs	r3, #0
 8005f94:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005f96:	6939      	ldr	r1, [r7, #16]
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	4413      	add	r3, r2
 8005fa2:	00db      	lsls	r3, r3, #3
 8005fa4:	440b      	add	r3, r1
 8005fa6:	3304      	adds	r3, #4
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d008      	beq.n	8005fc0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	69fa      	ldr	r2, [r7, #28]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	dbeb      	blt.n	8005f96 <SEGGER_RTT_AllocUpBuffer+0x36>
 8005fbe:	e000      	b.n	8005fc2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005fc0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	69fa      	ldr	r2, [r7, #28]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	da3f      	bge.n	800604c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005fcc:	6939      	ldr	r1, [r7, #16]
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	4413      	add	r3, r2
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	440b      	add	r3, r1
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005fe0:	6939      	ldr	r1, [r7, #16]
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	1c5a      	adds	r2, r3, #1
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	005b      	lsls	r3, r3, #1
 8005fea:	4413      	add	r3, r2
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	440b      	add	r3, r1
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005ff6:	6939      	ldr	r1, [r7, #16]
 8005ff8:	69fa      	ldr	r2, [r7, #28]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	4413      	add	r3, r2
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	440b      	add	r3, r1
 8006004:	3320      	adds	r3, #32
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800600a:	6939      	ldr	r1, [r7, #16]
 800600c:	69fa      	ldr	r2, [r7, #28]
 800600e:	4613      	mov	r3, r2
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	4413      	add	r3, r2
 8006014:	00db      	lsls	r3, r3, #3
 8006016:	440b      	add	r3, r1
 8006018:	3328      	adds	r3, #40	; 0x28
 800601a:	2200      	movs	r2, #0
 800601c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800601e:	6939      	ldr	r1, [r7, #16]
 8006020:	69fa      	ldr	r2, [r7, #28]
 8006022:	4613      	mov	r3, r2
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	4413      	add	r3, r2
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	440b      	add	r3, r1
 800602c:	3324      	adds	r3, #36	; 0x24
 800602e:	2200      	movs	r2, #0
 8006030:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8006032:	6939      	ldr	r1, [r7, #16]
 8006034:	69fa      	ldr	r2, [r7, #28]
 8006036:	4613      	mov	r3, r2
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	4413      	add	r3, r2
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	440b      	add	r3, r1
 8006040:	332c      	adds	r3, #44	; 0x2c
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006046:	f3bf 8f5f 	dmb	sy
 800604a:	e002      	b.n	8006052 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800604c:	f04f 33ff 	mov.w	r3, #4294967295
 8006050:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8006058:	69fb      	ldr	r3, [r7, #28]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3720      	adds	r7, #32
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	200041e4 	.word	0x200041e4

08006068 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006068:	b580      	push	{r7, lr}
 800606a:	b08a      	sub	sp, #40	; 0x28
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8006076:	4b21      	ldr	r3, [pc, #132]	; (80060fc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8006078:	623b      	str	r3, [r7, #32]
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8006084:	f7ff fe8e 	bl	8005da4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006088:	4b1c      	ldr	r3, [pc, #112]	; (80060fc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800608a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b02      	cmp	r3, #2
 8006090:	d82c      	bhi.n	80060ec <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8006092:	f3ef 8311 	mrs	r3, BASEPRI
 8006096:	f04f 0120 	mov.w	r1, #32
 800609a:	f381 8811 	msr	BASEPRI, r1
 800609e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	4613      	mov	r3, r2
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	4413      	add	r3, r2
 80060a8:	00db      	lsls	r3, r3, #3
 80060aa:	3360      	adds	r3, #96	; 0x60
 80060ac:	69fa      	ldr	r2, [r7, #28]
 80060ae:	4413      	add	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00e      	beq.n	80060d6 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2200      	movs	r2, #0
 80060ce:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	2200      	movs	r2, #0
 80060d4:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060da:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80060dc:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80060e6:	2300      	movs	r3, #0
 80060e8:	627b      	str	r3, [r7, #36]	; 0x24
 80060ea:	e002      	b.n	80060f2 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80060ec:	f04f 33ff 	mov.w	r3, #4294967295
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3728      	adds	r7, #40	; 0x28
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	200041e4 	.word	0x200041e4

08006100 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800610c:	2300      	movs	r3, #0
 800610e:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00f      	beq.n	8006136 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8006116:	e002      	b.n	800611e <_EncodeStr+0x1e>
      Len++;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	3301      	adds	r3, #1
 800611c:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	4413      	add	r3, r2
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1f6      	bne.n	8006118 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	429a      	cmp	r2, r3
 8006130:	d901      	bls.n	8006136 <_EncodeStr+0x36>
      Len = Limit;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	2bfe      	cmp	r3, #254	; 0xfe
 800613a:	d806      	bhi.n	800614a <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	60fa      	str	r2, [r7, #12]
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	701a      	strb	r2, [r3, #0]
 8006148:	e011      	b.n	800616e <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	60fa      	str	r2, [r7, #12]
 8006150:	22ff      	movs	r2, #255	; 0xff
 8006152:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	60fa      	str	r2, [r7, #12]
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	b2d2      	uxtb	r2, r2
 800615e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	0a19      	lsrs	r1, r3, #8
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	60fa      	str	r2, [r7, #12]
 800616a:	b2ca      	uxtb	r2, r1
 800616c:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800616e:	2300      	movs	r3, #0
 8006170:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006172:	e00a      	b.n	800618a <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	1c53      	adds	r3, r2, #1
 8006178:	60bb      	str	r3, [r7, #8]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	1c59      	adds	r1, r3, #1
 800617e:	60f9      	str	r1, [r7, #12]
 8006180:	7812      	ldrb	r2, [r2, #0]
 8006182:	701a      	strb	r2, [r3, #0]
    n++;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	3301      	adds	r3, #1
 8006188:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	429a      	cmp	r2, r3
 8006190:	d3f0      	bcc.n	8006174 <_EncodeStr+0x74>
  }
  return pPayload;
 8006192:	68fb      	ldr	r3, [r7, #12]
}
 8006194:	4618      	mov	r0, r3
 8006196:	371c      	adds	r7, #28
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3304      	adds	r3, #4
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80061be:	4b36      	ldr	r3, [pc, #216]	; (8006298 <_HandleIncomingPacket+0xe0>)
 80061c0:	7e1b      	ldrb	r3, [r3, #24]
 80061c2:	4618      	mov	r0, r3
 80061c4:	1cfb      	adds	r3, r7, #3
 80061c6:	2201      	movs	r2, #1
 80061c8:	4619      	mov	r1, r3
 80061ca:	f7ff fe43 	bl	8005e54 <SEGGER_RTT_ReadNoLock>
 80061ce:	4603      	mov	r3, r0
 80061d0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	dd54      	ble.n	8006282 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80061d8:	78fb      	ldrb	r3, [r7, #3]
 80061da:	2b80      	cmp	r3, #128	; 0x80
 80061dc:	d032      	beq.n	8006244 <_HandleIncomingPacket+0x8c>
 80061de:	2b80      	cmp	r3, #128	; 0x80
 80061e0:	dc42      	bgt.n	8006268 <_HandleIncomingPacket+0xb0>
 80061e2:	2b07      	cmp	r3, #7
 80061e4:	dc16      	bgt.n	8006214 <_HandleIncomingPacket+0x5c>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	dd3e      	ble.n	8006268 <_HandleIncomingPacket+0xb0>
 80061ea:	3b01      	subs	r3, #1
 80061ec:	2b06      	cmp	r3, #6
 80061ee:	d83b      	bhi.n	8006268 <_HandleIncomingPacket+0xb0>
 80061f0:	a201      	add	r2, pc, #4	; (adr r2, 80061f8 <_HandleIncomingPacket+0x40>)
 80061f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f6:	bf00      	nop
 80061f8:	0800621b 	.word	0x0800621b
 80061fc:	08006221 	.word	0x08006221
 8006200:	08006227 	.word	0x08006227
 8006204:	0800622d 	.word	0x0800622d
 8006208:	08006233 	.word	0x08006233
 800620c:	08006239 	.word	0x08006239
 8006210:	0800623f 	.word	0x0800623f
 8006214:	2b7f      	cmp	r3, #127	; 0x7f
 8006216:	d036      	beq.n	8006286 <_HandleIncomingPacket+0xce>
 8006218:	e026      	b.n	8006268 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800621a:	f000 fba7 	bl	800696c <SEGGER_SYSVIEW_Start>
      break;
 800621e:	e037      	b.n	8006290 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006220:	f000 fc60 	bl	8006ae4 <SEGGER_SYSVIEW_Stop>
      break;
 8006224:	e034      	b.n	8006290 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006226:	f000 fe39 	bl	8006e9c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800622a:	e031      	b.n	8006290 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800622c:	f000 fdfe 	bl	8006e2c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006230:	e02e      	b.n	8006290 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006232:	f000 fc7d 	bl	8006b30 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006236:	e02b      	b.n	8006290 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006238:	f001 f8cc 	bl	80073d4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800623c:	e028      	b.n	8006290 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800623e:	f001 f8ab 	bl	8007398 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006242:	e025      	b.n	8006290 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006244:	4b14      	ldr	r3, [pc, #80]	; (8006298 <_HandleIncomingPacket+0xe0>)
 8006246:	7e1b      	ldrb	r3, [r3, #24]
 8006248:	4618      	mov	r0, r3
 800624a:	1cfb      	adds	r3, r7, #3
 800624c:	2201      	movs	r2, #1
 800624e:	4619      	mov	r1, r3
 8006250:	f7ff fe00 	bl	8005e54 <SEGGER_RTT_ReadNoLock>
 8006254:	4603      	mov	r3, r0
 8006256:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	dd15      	ble.n	800628a <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800625e:	78fb      	ldrb	r3, [r7, #3]
 8006260:	4618      	mov	r0, r3
 8006262:	f001 f819 	bl	8007298 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006266:	e010      	b.n	800628a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006268:	78fb      	ldrb	r3, [r7, #3]
 800626a:	b25b      	sxtb	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	da0e      	bge.n	800628e <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006270:	4b09      	ldr	r3, [pc, #36]	; (8006298 <_HandleIncomingPacket+0xe0>)
 8006272:	7e1b      	ldrb	r3, [r3, #24]
 8006274:	4618      	mov	r0, r3
 8006276:	1cfb      	adds	r3, r7, #3
 8006278:	2201      	movs	r2, #1
 800627a:	4619      	mov	r1, r3
 800627c:	f7ff fdea 	bl	8005e54 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006280:	e005      	b.n	800628e <_HandleIncomingPacket+0xd6>
    }
  }
 8006282:	bf00      	nop
 8006284:	e004      	b.n	8006290 <_HandleIncomingPacket+0xd8>
      break;
 8006286:	bf00      	nop
 8006288:	e002      	b.n	8006290 <_HandleIncomingPacket+0xd8>
      break;
 800628a:	bf00      	nop
 800628c:	e000      	b.n	8006290 <_HandleIncomingPacket+0xd8>
      break;
 800628e:	bf00      	nop
}
 8006290:	bf00      	nop
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	200066a4 	.word	0x200066a4

0800629c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800629c:	b580      	push	{r7, lr}
 800629e:	b08c      	sub	sp, #48	; 0x30
 80062a0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80062a2:	2301      	movs	r3, #1
 80062a4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80062a6:	1d3b      	adds	r3, r7, #4
 80062a8:	3301      	adds	r3, #1
 80062aa:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062b0:	4b31      	ldr	r3, [pc, #196]	; (8006378 <_TrySendOverflowPacket+0xdc>)
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80062b6:	e00b      	b.n	80062d0 <_TrySendOverflowPacket+0x34>
 80062b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062be:	1c59      	adds	r1, r3, #1
 80062c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80062c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062cc:	09db      	lsrs	r3, r3, #7
 80062ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	2b7f      	cmp	r3, #127	; 0x7f
 80062d4:	d8f0      	bhi.n	80062b8 <_TrySendOverflowPacket+0x1c>
 80062d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]
 80062e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80062e6:	4b25      	ldr	r3, [pc, #148]	; (800637c <_TrySendOverflowPacket+0xe0>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80062ec:	4b22      	ldr	r3, [pc, #136]	; (8006378 <_TrySendOverflowPacket+0xdc>)
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	623b      	str	r3, [r7, #32]
 80062fe:	e00b      	b.n	8006318 <_TrySendOverflowPacket+0x7c>
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	b2da      	uxtb	r2, r3
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	1c59      	adds	r1, r3, #1
 8006308:	6279      	str	r1, [r7, #36]	; 0x24
 800630a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800630e:	b2d2      	uxtb	r2, r2
 8006310:	701a      	strb	r2, [r3, #0]
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	09db      	lsrs	r3, r3, #7
 8006316:	623b      	str	r3, [r7, #32]
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	2b7f      	cmp	r3, #127	; 0x7f
 800631c:	d8f0      	bhi.n	8006300 <_TrySendOverflowPacket+0x64>
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	1c5a      	adds	r2, r3, #1
 8006322:	627a      	str	r2, [r7, #36]	; 0x24
 8006324:	6a3a      	ldr	r2, [r7, #32]
 8006326:	b2d2      	uxtb	r2, r2
 8006328:	701a      	strb	r2, [r3, #0]
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800632e:	4b12      	ldr	r3, [pc, #72]	; (8006378 <_TrySendOverflowPacket+0xdc>)
 8006330:	785b      	ldrb	r3, [r3, #1]
 8006332:	4618      	mov	r0, r3
 8006334:	1d3b      	adds	r3, r7, #4
 8006336:	69fa      	ldr	r2, [r7, #28]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	461a      	mov	r2, r3
 800633c:	1d3b      	adds	r3, r7, #4
 800633e:	4619      	mov	r1, r3
 8006340:	f7f9 ff46 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006344:	4603      	mov	r3, r0
 8006346:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d009      	beq.n	8006362 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800634e:	4a0a      	ldr	r2, [pc, #40]	; (8006378 <_TrySendOverflowPacket+0xdc>)
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006354:	4b08      	ldr	r3, [pc, #32]	; (8006378 <_TrySendOverflowPacket+0xdc>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	3b01      	subs	r3, #1
 800635a:	b2da      	uxtb	r2, r3
 800635c:	4b06      	ldr	r3, [pc, #24]	; (8006378 <_TrySendOverflowPacket+0xdc>)
 800635e:	701a      	strb	r2, [r3, #0]
 8006360:	e004      	b.n	800636c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006362:	4b05      	ldr	r3, [pc, #20]	; (8006378 <_TrySendOverflowPacket+0xdc>)
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	3301      	adds	r3, #1
 8006368:	4a03      	ldr	r2, [pc, #12]	; (8006378 <_TrySendOverflowPacket+0xdc>)
 800636a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800636c:	693b      	ldr	r3, [r7, #16]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3730      	adds	r7, #48	; 0x30
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	200066a4 	.word	0x200066a4
 800637c:	e0001004 	.word	0xe0001004

08006380 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006380:	b580      	push	{r7, lr}
 8006382:	b08a      	sub	sp, #40	; 0x28
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800638c:	4b6c      	ldr	r3, [pc, #432]	; (8006540 <_SendPacket+0x1c0>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d010      	beq.n	80063b6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006394:	4b6a      	ldr	r3, [pc, #424]	; (8006540 <_SendPacket+0x1c0>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 80a3 	beq.w	80064e4 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800639e:	4b68      	ldr	r3, [pc, #416]	; (8006540 <_SendPacket+0x1c0>)
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d109      	bne.n	80063ba <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80063a6:	f7ff ff79 	bl	800629c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80063aa:	4b65      	ldr	r3, [pc, #404]	; (8006540 <_SendPacket+0x1c0>)
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	f040 809a 	bne.w	80064e8 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80063b4:	e001      	b.n	80063ba <_SendPacket+0x3a>
    goto Send;
 80063b6:	bf00      	nop
 80063b8:	e000      	b.n	80063bc <_SendPacket+0x3c>
Send:
 80063ba:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b1f      	cmp	r3, #31
 80063c0:	d809      	bhi.n	80063d6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80063c2:	4b5f      	ldr	r3, [pc, #380]	; (8006540 <_SendPacket+0x1c0>)
 80063c4:	69da      	ldr	r2, [r3, #28]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	fa22 f303 	lsr.w	r3, r2, r3
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f040 808b 	bne.w	80064ec <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b17      	cmp	r3, #23
 80063da:	d807      	bhi.n	80063ec <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	3b01      	subs	r3, #1
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	e03d      	b.n	8006468 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	2b7f      	cmp	r3, #127	; 0x7f
 80063f8:	d912      	bls.n	8006420 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	09da      	lsrs	r2, r3, #7
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3b01      	subs	r3, #1
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	b2d2      	uxtb	r2, r2
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	b2db      	uxtb	r3, r3
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	3a01      	subs	r2, #1
 8006412:	60fa      	str	r2, [r7, #12]
 8006414:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006418:	b2da      	uxtb	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	e006      	b.n	800642e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	3b01      	subs	r3, #1
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	b2da      	uxtb	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b7f      	cmp	r3, #127	; 0x7f
 8006432:	d912      	bls.n	800645a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	09da      	lsrs	r2, r3, #7
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3b01      	subs	r3, #1
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	b2db      	uxtb	r3, r3
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	3a01      	subs	r2, #1
 800644c:	60fa      	str	r2, [r7, #12]
 800644e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006452:	b2da      	uxtb	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	e006      	b.n	8006468 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	3b01      	subs	r3, #1
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	b2da      	uxtb	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006468:	4b36      	ldr	r3, [pc, #216]	; (8006544 <_SendPacket+0x1c4>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800646e:	4b34      	ldr	r3, [pc, #208]	; (8006540 <_SendPacket+0x1c0>)
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	627b      	str	r3, [r7, #36]	; 0x24
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	623b      	str	r3, [r7, #32]
 8006480:	e00b      	b.n	800649a <_SendPacket+0x11a>
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	b2da      	uxtb	r2, r3
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	1c59      	adds	r1, r3, #1
 800648a:	6279      	str	r1, [r7, #36]	; 0x24
 800648c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006490:	b2d2      	uxtb	r2, r2
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	09db      	lsrs	r3, r3, #7
 8006498:	623b      	str	r3, [r7, #32]
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	2b7f      	cmp	r3, #127	; 0x7f
 800649e:	d8f0      	bhi.n	8006482 <_SendPacket+0x102>
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	627a      	str	r2, [r7, #36]	; 0x24
 80064a6:	6a3a      	ldr	r2, [r7, #32]
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	701a      	strb	r2, [r3, #0]
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80064b0:	4b23      	ldr	r3, [pc, #140]	; (8006540 <_SendPacket+0x1c0>)
 80064b2:	785b      	ldrb	r3, [r3, #1]
 80064b4:	4618      	mov	r0, r3
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	461a      	mov	r2, r3
 80064be:	68f9      	ldr	r1, [r7, #12]
 80064c0:	f7f9 fe86 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80064c4:	4603      	mov	r3, r0
 80064c6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80064ce:	4a1c      	ldr	r2, [pc, #112]	; (8006540 <_SendPacket+0x1c0>)
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	60d3      	str	r3, [r2, #12]
 80064d4:	e00b      	b.n	80064ee <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80064d6:	4b1a      	ldr	r3, [pc, #104]	; (8006540 <_SendPacket+0x1c0>)
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	3301      	adds	r3, #1
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	4b18      	ldr	r3, [pc, #96]	; (8006540 <_SendPacket+0x1c0>)
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	e004      	b.n	80064ee <_SendPacket+0x16e>
    goto SendDone;
 80064e4:	bf00      	nop
 80064e6:	e002      	b.n	80064ee <_SendPacket+0x16e>
      goto SendDone;
 80064e8:	bf00      	nop
 80064ea:	e000      	b.n	80064ee <_SendPacket+0x16e>
      goto SendDone;
 80064ec:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80064ee:	4b14      	ldr	r3, [pc, #80]	; (8006540 <_SendPacket+0x1c0>)
 80064f0:	7e1b      	ldrb	r3, [r3, #24]
 80064f2:	4619      	mov	r1, r3
 80064f4:	4a14      	ldr	r2, [pc, #80]	; (8006548 <_SendPacket+0x1c8>)
 80064f6:	460b      	mov	r3, r1
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	440b      	add	r3, r1
 80064fc:	00db      	lsls	r3, r3, #3
 80064fe:	4413      	add	r3, r2
 8006500:	336c      	adds	r3, #108	; 0x6c
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	4b0e      	ldr	r3, [pc, #56]	; (8006540 <_SendPacket+0x1c0>)
 8006506:	7e1b      	ldrb	r3, [r3, #24]
 8006508:	4618      	mov	r0, r3
 800650a:	490f      	ldr	r1, [pc, #60]	; (8006548 <_SendPacket+0x1c8>)
 800650c:	4603      	mov	r3, r0
 800650e:	005b      	lsls	r3, r3, #1
 8006510:	4403      	add	r3, r0
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	440b      	add	r3, r1
 8006516:	3370      	adds	r3, #112	; 0x70
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d00b      	beq.n	8006536 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800651e:	4b08      	ldr	r3, [pc, #32]	; (8006540 <_SendPacket+0x1c0>)
 8006520:	789b      	ldrb	r3, [r3, #2]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d107      	bne.n	8006536 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006526:	4b06      	ldr	r3, [pc, #24]	; (8006540 <_SendPacket+0x1c0>)
 8006528:	2201      	movs	r2, #1
 800652a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800652c:	f7ff fe44 	bl	80061b8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006530:	4b03      	ldr	r3, [pc, #12]	; (8006540 <_SendPacket+0x1c0>)
 8006532:	2200      	movs	r2, #0
 8006534:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006536:	bf00      	nop
 8006538:	3728      	adds	r7, #40	; 0x28
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	200066a4 	.word	0x200066a4
 8006544:	e0001004 	.word	0xe0001004
 8006548:	200041e4 	.word	0x200041e4

0800654c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af02      	add	r7, sp, #8
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800655a:	2300      	movs	r3, #0
 800655c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006560:	4917      	ldr	r1, [pc, #92]	; (80065c0 <SEGGER_SYSVIEW_Init+0x74>)
 8006562:	4818      	ldr	r0, [pc, #96]	; (80065c4 <SEGGER_SYSVIEW_Init+0x78>)
 8006564:	f7ff fcfc 	bl	8005f60 <SEGGER_RTT_AllocUpBuffer>
 8006568:	4603      	mov	r3, r0
 800656a:	b2da      	uxtb	r2, r3
 800656c:	4b16      	ldr	r3, [pc, #88]	; (80065c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800656e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006570:	4b15      	ldr	r3, [pc, #84]	; (80065c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006572:	785a      	ldrb	r2, [r3, #1]
 8006574:	4b14      	ldr	r3, [pc, #80]	; (80065c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006576:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006578:	4b13      	ldr	r3, [pc, #76]	; (80065c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800657a:	7e1b      	ldrb	r3, [r3, #24]
 800657c:	4618      	mov	r0, r3
 800657e:	2300      	movs	r3, #0
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	2308      	movs	r3, #8
 8006584:	4a11      	ldr	r2, [pc, #68]	; (80065cc <SEGGER_SYSVIEW_Init+0x80>)
 8006586:	490f      	ldr	r1, [pc, #60]	; (80065c4 <SEGGER_SYSVIEW_Init+0x78>)
 8006588:	f7ff fd6e 	bl	8006068 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800658c:	4b0e      	ldr	r3, [pc, #56]	; (80065c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800658e:	2200      	movs	r2, #0
 8006590:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006592:	4b0f      	ldr	r3, [pc, #60]	; (80065d0 <SEGGER_SYSVIEW_Init+0x84>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a0c      	ldr	r2, [pc, #48]	; (80065c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006598:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800659a:	4a0b      	ldr	r2, [pc, #44]	; (80065c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80065a0:	4a09      	ldr	r2, [pc, #36]	; (80065c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80065a6:	4a08      	ldr	r2, [pc, #32]	; (80065c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80065ac:	4a06      	ldr	r2, [pc, #24]	; (80065c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80065b2:	4b05      	ldr	r3, [pc, #20]	; (80065c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80065b8:	bf00      	nop
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	2000469c 	.word	0x2000469c
 80065c4:	080079f8 	.word	0x080079f8
 80065c8:	200066a4 	.word	0x200066a4
 80065cc:	2000669c 	.word	0x2000669c
 80065d0:	e0001004 	.word	0xe0001004

080065d4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80065dc:	4a04      	ldr	r2, [pc, #16]	; (80065f0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6113      	str	r3, [r2, #16]
}
 80065e2:	bf00      	nop
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	200066a4 	.word	0x200066a4

080065f4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80065fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006600:	f04f 0120 	mov.w	r1, #32
 8006604:	f381 8811 	msr	BASEPRI, r1
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	4808      	ldr	r0, [pc, #32]	; (800662c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800660c:	f7ff fdc8 	bl	80061a0 <_PreparePacket>
 8006610:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	68b9      	ldr	r1, [r7, #8]
 8006616:	68b8      	ldr	r0, [r7, #8]
 8006618:	f7ff feb2 	bl	8006380 <_SendPacket>
  RECORD_END();
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f383 8811 	msr	BASEPRI, r3
}
 8006622:	bf00      	nop
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	200066d4 	.word	0x200066d4

08006630 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006630:	b580      	push	{r7, lr}
 8006632:	b088      	sub	sp, #32
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800663a:	f3ef 8311 	mrs	r3, BASEPRI
 800663e:	f04f 0120 	mov.w	r1, #32
 8006642:	f381 8811 	msr	BASEPRI, r1
 8006646:	617b      	str	r3, [r7, #20]
 8006648:	4816      	ldr	r0, [pc, #88]	; (80066a4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800664a:	f7ff fda9 	bl	80061a0 <_PreparePacket>
 800664e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	61fb      	str	r3, [r7, #28]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	61bb      	str	r3, [r7, #24]
 800665c:	e00b      	b.n	8006676 <SEGGER_SYSVIEW_RecordU32+0x46>
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	b2da      	uxtb	r2, r3
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	1c59      	adds	r1, r3, #1
 8006666:	61f9      	str	r1, [r7, #28]
 8006668:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800666c:	b2d2      	uxtb	r2, r2
 800666e:	701a      	strb	r2, [r3, #0]
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	09db      	lsrs	r3, r3, #7
 8006674:	61bb      	str	r3, [r7, #24]
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	2b7f      	cmp	r3, #127	; 0x7f
 800667a:	d8f0      	bhi.n	800665e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	1c5a      	adds	r2, r3, #1
 8006680:	61fa      	str	r2, [r7, #28]
 8006682:	69ba      	ldr	r2, [r7, #24]
 8006684:	b2d2      	uxtb	r2, r2
 8006686:	701a      	strb	r2, [r3, #0]
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	68f9      	ldr	r1, [r7, #12]
 8006690:	6938      	ldr	r0, [r7, #16]
 8006692:	f7ff fe75 	bl	8006380 <_SendPacket>
  RECORD_END();
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f383 8811 	msr	BASEPRI, r3
}
 800669c:	bf00      	nop
 800669e:	3720      	adds	r7, #32
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	200066d4 	.word	0x200066d4

080066a8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b08c      	sub	sp, #48	; 0x30
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80066b4:	f3ef 8311 	mrs	r3, BASEPRI
 80066b8:	f04f 0120 	mov.w	r1, #32
 80066bc:	f381 8811 	msr	BASEPRI, r1
 80066c0:	61fb      	str	r3, [r7, #28]
 80066c2:	4825      	ldr	r0, [pc, #148]	; (8006758 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80066c4:	f7ff fd6c 	bl	80061a0 <_PreparePacket>
 80066c8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80066d6:	e00b      	b.n	80066f0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80066d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066de:	1c59      	adds	r1, r3, #1
 80066e0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80066e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066e6:	b2d2      	uxtb	r2, r2
 80066e8:	701a      	strb	r2, [r3, #0]
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	09db      	lsrs	r3, r3, #7
 80066ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80066f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f2:	2b7f      	cmp	r3, #127	; 0x7f
 80066f4:	d8f0      	bhi.n	80066d8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80066f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066fe:	b2d2      	uxtb	r2, r2
 8006700:	701a      	strb	r2, [r3, #0]
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	623b      	str	r3, [r7, #32]
 800670e:	e00b      	b.n	8006728 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006710:	6a3b      	ldr	r3, [r7, #32]
 8006712:	b2da      	uxtb	r2, r3
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	1c59      	adds	r1, r3, #1
 8006718:	6279      	str	r1, [r7, #36]	; 0x24
 800671a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800671e:	b2d2      	uxtb	r2, r2
 8006720:	701a      	strb	r2, [r3, #0]
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	09db      	lsrs	r3, r3, #7
 8006726:	623b      	str	r3, [r7, #32]
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	2b7f      	cmp	r3, #127	; 0x7f
 800672c:	d8f0      	bhi.n	8006710 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	627a      	str	r2, [r7, #36]	; 0x24
 8006734:	6a3a      	ldr	r2, [r7, #32]
 8006736:	b2d2      	uxtb	r2, r2
 8006738:	701a      	strb	r2, [r3, #0]
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	6979      	ldr	r1, [r7, #20]
 8006742:	69b8      	ldr	r0, [r7, #24]
 8006744:	f7ff fe1c 	bl	8006380 <_SendPacket>
  RECORD_END();
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	f383 8811 	msr	BASEPRI, r3
}
 800674e:	bf00      	nop
 8006750:	3730      	adds	r7, #48	; 0x30
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	200066d4 	.word	0x200066d4

0800675c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800675c:	b580      	push	{r7, lr}
 800675e:	b08e      	sub	sp, #56	; 0x38
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
 8006768:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800676a:	f3ef 8311 	mrs	r3, BASEPRI
 800676e:	f04f 0120 	mov.w	r1, #32
 8006772:	f381 8811 	msr	BASEPRI, r1
 8006776:	61fb      	str	r3, [r7, #28]
 8006778:	4832      	ldr	r0, [pc, #200]	; (8006844 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800677a:	f7ff fd11 	bl	80061a0 <_PreparePacket>
 800677e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	637b      	str	r3, [r7, #52]	; 0x34
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	633b      	str	r3, [r7, #48]	; 0x30
 800678c:	e00b      	b.n	80067a6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	b2da      	uxtb	r2, r3
 8006792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006794:	1c59      	adds	r1, r3, #1
 8006796:	6379      	str	r1, [r7, #52]	; 0x34
 8006798:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800679c:	b2d2      	uxtb	r2, r2
 800679e:	701a      	strb	r2, [r3, #0]
 80067a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a2:	09db      	lsrs	r3, r3, #7
 80067a4:	633b      	str	r3, [r7, #48]	; 0x30
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	2b7f      	cmp	r3, #127	; 0x7f
 80067aa:	d8f0      	bhi.n	800678e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80067ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ae:	1c5a      	adds	r2, r3, #1
 80067b0:	637a      	str	r2, [r7, #52]	; 0x34
 80067b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067b4:	b2d2      	uxtb	r2, r2
 80067b6:	701a      	strb	r2, [r3, #0]
 80067b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80067c4:	e00b      	b.n	80067de <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80067c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067cc:	1c59      	adds	r1, r3, #1
 80067ce:	62f9      	str	r1, [r7, #44]	; 0x2c
 80067d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	701a      	strb	r2, [r3, #0]
 80067d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067da:	09db      	lsrs	r3, r3, #7
 80067dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80067de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e0:	2b7f      	cmp	r3, #127	; 0x7f
 80067e2:	d8f0      	bhi.n	80067c6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80067e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067ec:	b2d2      	uxtb	r2, r2
 80067ee:	701a      	strb	r2, [r3, #0]
 80067f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	627b      	str	r3, [r7, #36]	; 0x24
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	623b      	str	r3, [r7, #32]
 80067fc:	e00b      	b.n	8006816 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	b2da      	uxtb	r2, r3
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	1c59      	adds	r1, r3, #1
 8006806:	6279      	str	r1, [r7, #36]	; 0x24
 8006808:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800680c:	b2d2      	uxtb	r2, r2
 800680e:	701a      	strb	r2, [r3, #0]
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	09db      	lsrs	r3, r3, #7
 8006814:	623b      	str	r3, [r7, #32]
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	2b7f      	cmp	r3, #127	; 0x7f
 800681a:	d8f0      	bhi.n	80067fe <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	627a      	str	r2, [r7, #36]	; 0x24
 8006822:	6a3a      	ldr	r2, [r7, #32]
 8006824:	b2d2      	uxtb	r2, r2
 8006826:	701a      	strb	r2, [r3, #0]
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	6979      	ldr	r1, [r7, #20]
 8006830:	69b8      	ldr	r0, [r7, #24]
 8006832:	f7ff fda5 	bl	8006380 <_SendPacket>
  RECORD_END();
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	f383 8811 	msr	BASEPRI, r3
}
 800683c:	bf00      	nop
 800683e:	3738      	adds	r7, #56	; 0x38
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	200066d4 	.word	0x200066d4

08006848 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006848:	b580      	push	{r7, lr}
 800684a:	b090      	sub	sp, #64	; 0x40
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
 8006854:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006856:	f3ef 8311 	mrs	r3, BASEPRI
 800685a:	f04f 0120 	mov.w	r1, #32
 800685e:	f381 8811 	msr	BASEPRI, r1
 8006862:	61fb      	str	r3, [r7, #28]
 8006864:	4840      	ldr	r0, [pc, #256]	; (8006968 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006866:	f7ff fc9b 	bl	80061a0 <_PreparePacket>
 800686a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	63bb      	str	r3, [r7, #56]	; 0x38
 8006878:	e00b      	b.n	8006892 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800687a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687c:	b2da      	uxtb	r2, r3
 800687e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006880:	1c59      	adds	r1, r3, #1
 8006882:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006884:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006888:	b2d2      	uxtb	r2, r2
 800688a:	701a      	strb	r2, [r3, #0]
 800688c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688e:	09db      	lsrs	r3, r3, #7
 8006890:	63bb      	str	r3, [r7, #56]	; 0x38
 8006892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006894:	2b7f      	cmp	r3, #127	; 0x7f
 8006896:	d8f0      	bhi.n	800687a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800689e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068a0:	b2d2      	uxtb	r2, r2
 80068a2:	701a      	strb	r2, [r3, #0]
 80068a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	637b      	str	r3, [r7, #52]	; 0x34
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	633b      	str	r3, [r7, #48]	; 0x30
 80068b0:	e00b      	b.n	80068ca <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80068b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b4:	b2da      	uxtb	r2, r3
 80068b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b8:	1c59      	adds	r1, r3, #1
 80068ba:	6379      	str	r1, [r7, #52]	; 0x34
 80068bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068c0:	b2d2      	uxtb	r2, r2
 80068c2:	701a      	strb	r2, [r3, #0]
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c6:	09db      	lsrs	r3, r3, #7
 80068c8:	633b      	str	r3, [r7, #48]	; 0x30
 80068ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068cc:	2b7f      	cmp	r3, #127	; 0x7f
 80068ce:	d8f0      	bhi.n	80068b2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80068d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	637a      	str	r2, [r7, #52]	; 0x34
 80068d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068d8:	b2d2      	uxtb	r2, r2
 80068da:	701a      	strb	r2, [r3, #0]
 80068dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80068e8:	e00b      	b.n	8006902 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80068ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f0:	1c59      	adds	r1, r3, #1
 80068f2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80068f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068f8:	b2d2      	uxtb	r2, r2
 80068fa:	701a      	strb	r2, [r3, #0]
 80068fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fe:	09db      	lsrs	r3, r3, #7
 8006900:	62bb      	str	r3, [r7, #40]	; 0x28
 8006902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006904:	2b7f      	cmp	r3, #127	; 0x7f
 8006906:	d8f0      	bhi.n	80068ea <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690a:	1c5a      	adds	r2, r3, #1
 800690c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800690e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006910:	b2d2      	uxtb	r2, r2
 8006912:	701a      	strb	r2, [r3, #0]
 8006914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006916:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	627b      	str	r3, [r7, #36]	; 0x24
 800691c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800691e:	623b      	str	r3, [r7, #32]
 8006920:	e00b      	b.n	800693a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	b2da      	uxtb	r2, r3
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	1c59      	adds	r1, r3, #1
 800692a:	6279      	str	r1, [r7, #36]	; 0x24
 800692c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006930:	b2d2      	uxtb	r2, r2
 8006932:	701a      	strb	r2, [r3, #0]
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	09db      	lsrs	r3, r3, #7
 8006938:	623b      	str	r3, [r7, #32]
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	2b7f      	cmp	r3, #127	; 0x7f
 800693e:	d8f0      	bhi.n	8006922 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	1c5a      	adds	r2, r3, #1
 8006944:	627a      	str	r2, [r7, #36]	; 0x24
 8006946:	6a3a      	ldr	r2, [r7, #32]
 8006948:	b2d2      	uxtb	r2, r2
 800694a:	701a      	strb	r2, [r3, #0]
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	6979      	ldr	r1, [r7, #20]
 8006954:	69b8      	ldr	r0, [r7, #24]
 8006956:	f7ff fd13 	bl	8006380 <_SendPacket>
  RECORD_END();
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	f383 8811 	msr	BASEPRI, r3
}
 8006960:	bf00      	nop
 8006962:	3740      	adds	r7, #64	; 0x40
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	200066d4 	.word	0x200066d4

0800696c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800696c:	b580      	push	{r7, lr}
 800696e:	b08c      	sub	sp, #48	; 0x30
 8006970:	af00      	add	r7, sp, #0

	vSetVarulMaxPRIGROUPValue(); // Adjust priorities for not getting stuck (Sozza)
 8006972:	f7fe fe41 	bl	80055f8 <vSetVarulMaxPRIGROUPValue>

#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006976:	4b58      	ldr	r3, [pc, #352]	; (8006ad8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006978:	2201      	movs	r2, #1
 800697a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800697c:	f3ef 8311 	mrs	r3, BASEPRI
 8006980:	f04f 0120 	mov.w	r1, #32
 8006984:	f381 8811 	msr	BASEPRI, r1
 8006988:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800698a:	4b53      	ldr	r3, [pc, #332]	; (8006ad8 <SEGGER_SYSVIEW_Start+0x16c>)
 800698c:	785b      	ldrb	r3, [r3, #1]
 800698e:	220a      	movs	r2, #10
 8006990:	4952      	ldr	r1, [pc, #328]	; (8006adc <SEGGER_SYSVIEW_Start+0x170>)
 8006992:	4618      	mov	r0, r3
 8006994:	f7f9 fc1c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800699e:	200a      	movs	r0, #10
 80069a0:	f7ff fe28 	bl	80065f4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80069a4:	f3ef 8311 	mrs	r3, BASEPRI
 80069a8:	f04f 0120 	mov.w	r1, #32
 80069ac:	f381 8811 	msr	BASEPRI, r1
 80069b0:	60bb      	str	r3, [r7, #8]
 80069b2:	484b      	ldr	r0, [pc, #300]	; (8006ae0 <SEGGER_SYSVIEW_Start+0x174>)
 80069b4:	f7ff fbf4 	bl	80061a0 <_PreparePacket>
 80069b8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069c2:	4b45      	ldr	r3, [pc, #276]	; (8006ad8 <SEGGER_SYSVIEW_Start+0x16c>)
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80069c8:	e00b      	b.n	80069e2 <SEGGER_SYSVIEW_Start+0x76>
 80069ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d0:	1c59      	adds	r1, r3, #1
 80069d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80069d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069d8:	b2d2      	uxtb	r2, r2
 80069da:	701a      	strb	r2, [r3, #0]
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	09db      	lsrs	r3, r3, #7
 80069e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	2b7f      	cmp	r3, #127	; 0x7f
 80069e6:	d8f0      	bhi.n	80069ca <SEGGER_SYSVIEW_Start+0x5e>
 80069e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ea:	1c5a      	adds	r2, r3, #1
 80069ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069f0:	b2d2      	uxtb	r2, r2
 80069f2:	701a      	strb	r2, [r3, #0]
 80069f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	627b      	str	r3, [r7, #36]	; 0x24
 80069fc:	4b36      	ldr	r3, [pc, #216]	; (8006ad8 <SEGGER_SYSVIEW_Start+0x16c>)
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	623b      	str	r3, [r7, #32]
 8006a02:	e00b      	b.n	8006a1c <SEGGER_SYSVIEW_Start+0xb0>
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	1c59      	adds	r1, r3, #1
 8006a0c:	6279      	str	r1, [r7, #36]	; 0x24
 8006a0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a12:	b2d2      	uxtb	r2, r2
 8006a14:	701a      	strb	r2, [r3, #0]
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	09db      	lsrs	r3, r3, #7
 8006a1a:	623b      	str	r3, [r7, #32]
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	2b7f      	cmp	r3, #127	; 0x7f
 8006a20:	d8f0      	bhi.n	8006a04 <SEGGER_SYSVIEW_Start+0x98>
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	627a      	str	r2, [r7, #36]	; 0x24
 8006a28:	6a3a      	ldr	r2, [r7, #32]
 8006a2a:	b2d2      	uxtb	r2, r2
 8006a2c:	701a      	strb	r2, [r3, #0]
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	61fb      	str	r3, [r7, #28]
 8006a36:	4b28      	ldr	r3, [pc, #160]	; (8006ad8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	61bb      	str	r3, [r7, #24]
 8006a3c:	e00b      	b.n	8006a56 <SEGGER_SYSVIEW_Start+0xea>
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	1c59      	adds	r1, r3, #1
 8006a46:	61f9      	str	r1, [r7, #28]
 8006a48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a4c:	b2d2      	uxtb	r2, r2
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	09db      	lsrs	r3, r3, #7
 8006a54:	61bb      	str	r3, [r7, #24]
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	2b7f      	cmp	r3, #127	; 0x7f
 8006a5a:	d8f0      	bhi.n	8006a3e <SEGGER_SYSVIEW_Start+0xd2>
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	61fa      	str	r2, [r7, #28]
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	b2d2      	uxtb	r2, r2
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	617b      	str	r3, [r7, #20]
 8006a70:	2300      	movs	r3, #0
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	e00b      	b.n	8006a8e <SEGGER_SYSVIEW_Start+0x122>
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	1c59      	adds	r1, r3, #1
 8006a7e:	6179      	str	r1, [r7, #20]
 8006a80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a84:	b2d2      	uxtb	r2, r2
 8006a86:	701a      	strb	r2, [r3, #0]
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	09db      	lsrs	r3, r3, #7
 8006a8c:	613b      	str	r3, [r7, #16]
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	2b7f      	cmp	r3, #127	; 0x7f
 8006a92:	d8f0      	bhi.n	8006a76 <SEGGER_SYSVIEW_Start+0x10a>
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	617a      	str	r2, [r7, #20]
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	701a      	strb	r2, [r3, #0]
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006aa4:	2218      	movs	r2, #24
 8006aa6:	6839      	ldr	r1, [r7, #0]
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7ff fc69 	bl	8006380 <_SendPacket>
      RECORD_END();
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006ab4:	4b08      	ldr	r3, [pc, #32]	; (8006ad8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006abc:	4b06      	ldr	r3, [pc, #24]	; (8006ad8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006ac2:	f000 f9eb 	bl	8006e9c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006ac6:	f000 f9b1 	bl	8006e2c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006aca:	f000 fc83 	bl	80073d4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006ace:	bf00      	nop
 8006ad0:	3730      	adds	r7, #48	; 0x30
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	200066a4 	.word	0x200066a4
 8006adc:	08007a20 	.word	0x08007a20
 8006ae0:	200066d4 	.word	0x200066d4

08006ae4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006aea:	f3ef 8311 	mrs	r3, BASEPRI
 8006aee:	f04f 0120 	mov.w	r1, #32
 8006af2:	f381 8811 	msr	BASEPRI, r1
 8006af6:	607b      	str	r3, [r7, #4]
 8006af8:	480b      	ldr	r0, [pc, #44]	; (8006b28 <SEGGER_SYSVIEW_Stop+0x44>)
 8006afa:	f7ff fb51 	bl	80061a0 <_PreparePacket>
 8006afe:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006b00:	4b0a      	ldr	r3, [pc, #40]	; (8006b2c <SEGGER_SYSVIEW_Stop+0x48>)
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d007      	beq.n	8006b18 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006b08:	220b      	movs	r2, #11
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6838      	ldr	r0, [r7, #0]
 8006b0e:	f7ff fc37 	bl	8006380 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006b12:	4b06      	ldr	r3, [pc, #24]	; (8006b2c <SEGGER_SYSVIEW_Stop+0x48>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f383 8811 	msr	BASEPRI, r3
}
 8006b1e:	bf00      	nop
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	200066d4 	.word	0x200066d4
 8006b2c:	200066a4 	.word	0x200066a4

08006b30 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b08c      	sub	sp, #48	; 0x30
 8006b34:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b36:	f3ef 8311 	mrs	r3, BASEPRI
 8006b3a:	f04f 0120 	mov.w	r1, #32
 8006b3e:	f381 8811 	msr	BASEPRI, r1
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	4845      	ldr	r0, [pc, #276]	; (8006c5c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006b46:	f7ff fb2b 	bl	80061a0 <_PreparePacket>
 8006b4a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b54:	4b42      	ldr	r3, [pc, #264]	; (8006c60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b5a:	e00b      	b.n	8006b74 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b62:	1c59      	adds	r1, r3, #1
 8006b64:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006b66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b6a:	b2d2      	uxtb	r2, r2
 8006b6c:	701a      	strb	r2, [r3, #0]
 8006b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b70:	09db      	lsrs	r3, r3, #7
 8006b72:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b76:	2b7f      	cmp	r3, #127	; 0x7f
 8006b78:	d8f0      	bhi.n	8006b5c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	701a      	strb	r2, [r3, #0]
 8006b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b88:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b8e:	4b34      	ldr	r3, [pc, #208]	; (8006c60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	623b      	str	r3, [r7, #32]
 8006b94:	e00b      	b.n	8006bae <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	1c59      	adds	r1, r3, #1
 8006b9e:	6279      	str	r1, [r7, #36]	; 0x24
 8006ba0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ba4:	b2d2      	uxtb	r2, r2
 8006ba6:	701a      	strb	r2, [r3, #0]
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	09db      	lsrs	r3, r3, #7
 8006bac:	623b      	str	r3, [r7, #32]
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	2b7f      	cmp	r3, #127	; 0x7f
 8006bb2:	d8f0      	bhi.n	8006b96 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	1c5a      	adds	r2, r3, #1
 8006bb8:	627a      	str	r2, [r7, #36]	; 0x24
 8006bba:	6a3a      	ldr	r2, [r7, #32]
 8006bbc:	b2d2      	uxtb	r2, r2
 8006bbe:	701a      	strb	r2, [r3, #0]
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	61fb      	str	r3, [r7, #28]
 8006bc8:	4b25      	ldr	r3, [pc, #148]	; (8006c60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	61bb      	str	r3, [r7, #24]
 8006bce:	e00b      	b.n	8006be8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	1c59      	adds	r1, r3, #1
 8006bd8:	61f9      	str	r1, [r7, #28]
 8006bda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bde:	b2d2      	uxtb	r2, r2
 8006be0:	701a      	strb	r2, [r3, #0]
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	09db      	lsrs	r3, r3, #7
 8006be6:	61bb      	str	r3, [r7, #24]
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	2b7f      	cmp	r3, #127	; 0x7f
 8006bec:	d8f0      	bhi.n	8006bd0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	61fa      	str	r2, [r7, #28]
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	b2d2      	uxtb	r2, r2
 8006bf8:	701a      	strb	r2, [r3, #0]
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	617b      	str	r3, [r7, #20]
 8006c02:	2300      	movs	r3, #0
 8006c04:	613b      	str	r3, [r7, #16]
 8006c06:	e00b      	b.n	8006c20 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	b2da      	uxtb	r2, r3
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	1c59      	adds	r1, r3, #1
 8006c10:	6179      	str	r1, [r7, #20]
 8006c12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c16:	b2d2      	uxtb	r2, r2
 8006c18:	701a      	strb	r2, [r3, #0]
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	09db      	lsrs	r3, r3, #7
 8006c1e:	613b      	str	r3, [r7, #16]
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	2b7f      	cmp	r3, #127	; 0x7f
 8006c24:	d8f0      	bhi.n	8006c08 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	1c5a      	adds	r2, r3, #1
 8006c2a:	617a      	str	r2, [r7, #20]
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	b2d2      	uxtb	r2, r2
 8006c30:	701a      	strb	r2, [r3, #0]
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006c36:	2218      	movs	r2, #24
 8006c38:	6879      	ldr	r1, [r7, #4]
 8006c3a:	68b8      	ldr	r0, [r7, #8]
 8006c3c:	f7ff fba0 	bl	8006380 <_SendPacket>
  RECORD_END();
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006c46:	4b06      	ldr	r3, [pc, #24]	; (8006c60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d002      	beq.n	8006c54 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006c4e:	4b04      	ldr	r3, [pc, #16]	; (8006c60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	4798      	blx	r3
  }
}
 8006c54:	bf00      	nop
 8006c56:	3730      	adds	r7, #48	; 0x30
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	200066d4 	.word	0x200066d4
 8006c60:	200066a4 	.word	0x200066a4

08006c64 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b092      	sub	sp, #72	; 0x48
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006c6c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c70:	f04f 0120 	mov.w	r1, #32
 8006c74:	f381 8811 	msr	BASEPRI, r1
 8006c78:	617b      	str	r3, [r7, #20]
 8006c7a:	486a      	ldr	r0, [pc, #424]	; (8006e24 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006c7c:	f7ff fa90 	bl	80061a0 <_PreparePacket>
 8006c80:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	647b      	str	r3, [r7, #68]	; 0x44
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	4b66      	ldr	r3, [pc, #408]	; (8006e28 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	643b      	str	r3, [r7, #64]	; 0x40
 8006c96:	e00b      	b.n	8006cb0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c9e:	1c59      	adds	r1, r3, #1
 8006ca0:	6479      	str	r1, [r7, #68]	; 0x44
 8006ca2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	701a      	strb	r2, [r3, #0]
 8006caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cac:	09db      	lsrs	r3, r3, #7
 8006cae:	643b      	str	r3, [r7, #64]	; 0x40
 8006cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cb2:	2b7f      	cmp	r3, #127	; 0x7f
 8006cb4:	d8f0      	bhi.n	8006c98 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cb8:	1c5a      	adds	r2, r3, #1
 8006cba:	647a      	str	r2, [r7, #68]	; 0x44
 8006cbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cbe:	b2d2      	uxtb	r2, r2
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cc4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cd0:	e00b      	b.n	8006cea <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd8:	1c59      	adds	r1, r3, #1
 8006cda:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006cdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	701a      	strb	r2, [r3, #0]
 8006ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce6:	09db      	lsrs	r3, r3, #7
 8006ce8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cec:	2b7f      	cmp	r3, #127	; 0x7f
 8006cee:	d8f0      	bhi.n	8006cd2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006cf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	701a      	strb	r2, [r3, #0]
 8006cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cfe:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	2220      	movs	r2, #32
 8006d06:	4619      	mov	r1, r3
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f7ff f9f9 	bl	8006100 <_EncodeStr>
 8006d0e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006d10:	2209      	movs	r2, #9
 8006d12:	68f9      	ldr	r1, [r7, #12]
 8006d14:	6938      	ldr	r0, [r7, #16]
 8006d16:	f7ff fb33 	bl	8006380 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	637b      	str	r3, [r7, #52]	; 0x34
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	4b40      	ldr	r3, [pc, #256]	; (8006e28 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	633b      	str	r3, [r7, #48]	; 0x30
 8006d2e:	e00b      	b.n	8006d48 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d36:	1c59      	adds	r1, r3, #1
 8006d38:	6379      	str	r1, [r7, #52]	; 0x34
 8006d3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d3e:	b2d2      	uxtb	r2, r2
 8006d40:	701a      	strb	r2, [r3, #0]
 8006d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d44:	09db      	lsrs	r3, r3, #7
 8006d46:	633b      	str	r3, [r7, #48]	; 0x30
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d4c:	d8f0      	bhi.n	8006d30 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d50:	1c5a      	adds	r2, r3, #1
 8006d52:	637a      	str	r2, [r7, #52]	; 0x34
 8006d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d56:	b2d2      	uxtb	r2, r2
 8006d58:	701a      	strb	r2, [r3, #0]
 8006d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d68:	e00b      	b.n	8006d82 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d70:	1c59      	adds	r1, r3, #1
 8006d72:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006d74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d78:	b2d2      	uxtb	r2, r2
 8006d7a:	701a      	strb	r2, [r3, #0]
 8006d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7e:	09db      	lsrs	r3, r3, #7
 8006d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d84:	2b7f      	cmp	r3, #127	; 0x7f
 8006d86:	d8f0      	bhi.n	8006d6a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8a:	1c5a      	adds	r2, r3, #1
 8006d8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d90:	b2d2      	uxtb	r2, r2
 8006d92:	701a      	strb	r2, [r3, #0]
 8006d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d96:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	623b      	str	r3, [r7, #32]
 8006da2:	e00b      	b.n	8006dbc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	1c59      	adds	r1, r3, #1
 8006dac:	6279      	str	r1, [r7, #36]	; 0x24
 8006dae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006db2:	b2d2      	uxtb	r2, r2
 8006db4:	701a      	strb	r2, [r3, #0]
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	09db      	lsrs	r3, r3, #7
 8006dba:	623b      	str	r3, [r7, #32]
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8006dc0:	d8f0      	bhi.n	8006da4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	627a      	str	r2, [r7, #36]	; 0x24
 8006dc8:	6a3a      	ldr	r2, [r7, #32]
 8006dca:	b2d2      	uxtb	r2, r2
 8006dcc:	701a      	strb	r2, [r3, #0]
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	61fb      	str	r3, [r7, #28]
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	61bb      	str	r3, [r7, #24]
 8006dda:	e00b      	b.n	8006df4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	1c59      	adds	r1, r3, #1
 8006de4:	61f9      	str	r1, [r7, #28]
 8006de6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dea:	b2d2      	uxtb	r2, r2
 8006dec:	701a      	strb	r2, [r3, #0]
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	09db      	lsrs	r3, r3, #7
 8006df2:	61bb      	str	r3, [r7, #24]
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	2b7f      	cmp	r3, #127	; 0x7f
 8006df8:	d8f0      	bhi.n	8006ddc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	61fa      	str	r2, [r7, #28]
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006e0a:	2215      	movs	r2, #21
 8006e0c:	68f9      	ldr	r1, [r7, #12]
 8006e0e:	6938      	ldr	r0, [r7, #16]
 8006e10:	f7ff fab6 	bl	8006380 <_SendPacket>
  RECORD_END();
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f383 8811 	msr	BASEPRI, r3
}
 8006e1a:	bf00      	nop
 8006e1c:	3748      	adds	r7, #72	; 0x48
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	200066d4 	.word	0x200066d4
 8006e28:	200066a4 	.word	0x200066a4

08006e2c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006e30:	4b07      	ldr	r3, [pc, #28]	; (8006e50 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d008      	beq.n	8006e4a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006e38:	4b05      	ldr	r3, [pc, #20]	; (8006e50 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006e42:	4b03      	ldr	r3, [pc, #12]	; (8006e50 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	4798      	blx	r3
  }
}
 8006e4a:	bf00      	nop
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	200066a4 	.word	0x200066a4

08006e54 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e5c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e60:	f04f 0120 	mov.w	r1, #32
 8006e64:	f381 8811 	msr	BASEPRI, r1
 8006e68:	617b      	str	r3, [r7, #20]
 8006e6a:	480b      	ldr	r0, [pc, #44]	; (8006e98 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006e6c:	f7ff f998 	bl	80061a0 <_PreparePacket>
 8006e70:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e72:	2280      	movs	r2, #128	; 0x80
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	6938      	ldr	r0, [r7, #16]
 8006e78:	f7ff f942 	bl	8006100 <_EncodeStr>
 8006e7c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006e7e:	220e      	movs	r2, #14
 8006e80:	68f9      	ldr	r1, [r7, #12]
 8006e82:	6938      	ldr	r0, [r7, #16]
 8006e84:	f7ff fa7c 	bl	8006380 <_SendPacket>
  RECORD_END();
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f383 8811 	msr	BASEPRI, r3
}
 8006e8e:	bf00      	nop
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	200066d4 	.word	0x200066d4

08006e9c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006e9c:	b590      	push	{r4, r7, lr}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006ea2:	4b15      	ldr	r3, [pc, #84]	; (8006ef8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d01a      	beq.n	8006ee0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006eaa:	4b13      	ldr	r3, [pc, #76]	; (8006ef8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d015      	beq.n	8006ee0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006eb4:	4b10      	ldr	r3, [pc, #64]	; (8006ef8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4798      	blx	r3
 8006ebc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006ec0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006ec2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ec6:	f04f 0200 	mov.w	r2, #0
 8006eca:	f04f 0300 	mov.w	r3, #0
 8006ece:	000a      	movs	r2, r1
 8006ed0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	200d      	movs	r0, #13
 8006eda:	f7ff fbe5 	bl	80066a8 <SEGGER_SYSVIEW_RecordU32x2>
 8006ede:	e006      	b.n	8006eee <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006ee0:	4b06      	ldr	r3, [pc, #24]	; (8006efc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	200c      	movs	r0, #12
 8006ee8:	f7ff fba2 	bl	8006630 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006eec:	bf00      	nop
 8006eee:	bf00      	nop
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd90      	pop	{r4, r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	200066a4 	.word	0x200066a4
 8006efc:	e0001004 	.word	0xe0001004

08006f00 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f06:	f3ef 8311 	mrs	r3, BASEPRI
 8006f0a:	f04f 0120 	mov.w	r1, #32
 8006f0e:	f381 8811 	msr	BASEPRI, r1
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	4819      	ldr	r0, [pc, #100]	; (8006f7c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006f16:	f7ff f943 	bl	80061a0 <_PreparePacket>
 8006f1a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006f20:	4b17      	ldr	r3, [pc, #92]	; (8006f80 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f28:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	617b      	str	r3, [r7, #20]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	613b      	str	r3, [r7, #16]
 8006f32:	e00b      	b.n	8006f4c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	1c59      	adds	r1, r3, #1
 8006f3c:	6179      	str	r1, [r7, #20]
 8006f3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f42:	b2d2      	uxtb	r2, r2
 8006f44:	701a      	strb	r2, [r3, #0]
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	09db      	lsrs	r3, r3, #7
 8006f4a:	613b      	str	r3, [r7, #16]
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	2b7f      	cmp	r3, #127	; 0x7f
 8006f50:	d8f0      	bhi.n	8006f34 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	1c5a      	adds	r2, r3, #1
 8006f56:	617a      	str	r2, [r7, #20]
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	b2d2      	uxtb	r2, r2
 8006f5c:	701a      	strb	r2, [r3, #0]
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006f62:	2202      	movs	r2, #2
 8006f64:	6879      	ldr	r1, [r7, #4]
 8006f66:	68b8      	ldr	r0, [r7, #8]
 8006f68:	f7ff fa0a 	bl	8006380 <_SendPacket>
  RECORD_END();
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f383 8811 	msr	BASEPRI, r3
}
 8006f72:	bf00      	nop
 8006f74:	3718      	adds	r7, #24
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	200066d4 	.word	0x200066d4
 8006f80:	e000ed04 	.word	0xe000ed04

08006f84 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006f8a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f8e:	f04f 0120 	mov.w	r1, #32
 8006f92:	f381 8811 	msr	BASEPRI, r1
 8006f96:	607b      	str	r3, [r7, #4]
 8006f98:	4807      	ldr	r0, [pc, #28]	; (8006fb8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006f9a:	f7ff f901 	bl	80061a0 <_PreparePacket>
 8006f9e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006fa0:	2203      	movs	r2, #3
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6838      	ldr	r0, [r7, #0]
 8006fa6:	f7ff f9eb 	bl	8006380 <_SendPacket>
  RECORD_END();
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f383 8811 	msr	BASEPRI, r3
}
 8006fb0:	bf00      	nop
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	200066d4 	.word	0x200066d4

08006fbc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006fc2:	f3ef 8311 	mrs	r3, BASEPRI
 8006fc6:	f04f 0120 	mov.w	r1, #32
 8006fca:	f381 8811 	msr	BASEPRI, r1
 8006fce:	607b      	str	r3, [r7, #4]
 8006fd0:	4807      	ldr	r0, [pc, #28]	; (8006ff0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006fd2:	f7ff f8e5 	bl	80061a0 <_PreparePacket>
 8006fd6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006fd8:	2212      	movs	r2, #18
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6838      	ldr	r0, [r7, #0]
 8006fde:	f7ff f9cf 	bl	8006380 <_SendPacket>
  RECORD_END();
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f383 8811 	msr	BASEPRI, r3
}
 8006fe8:	bf00      	nop
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	200066d4 	.word	0x200066d4

08006ff4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006ffa:	f3ef 8311 	mrs	r3, BASEPRI
 8006ffe:	f04f 0120 	mov.w	r1, #32
 8007002:	f381 8811 	msr	BASEPRI, r1
 8007006:	607b      	str	r3, [r7, #4]
 8007008:	4807      	ldr	r0, [pc, #28]	; (8007028 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800700a:	f7ff f8c9 	bl	80061a0 <_PreparePacket>
 800700e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007010:	2211      	movs	r2, #17
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	6838      	ldr	r0, [r7, #0]
 8007016:	f7ff f9b3 	bl	8006380 <_SendPacket>
  RECORD_END();
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f383 8811 	msr	BASEPRI, r3
}
 8007020:	bf00      	nop
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	200066d4 	.word	0x200066d4

0800702c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800702c:	b580      	push	{r7, lr}
 800702e:	b088      	sub	sp, #32
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007034:	f3ef 8311 	mrs	r3, BASEPRI
 8007038:	f04f 0120 	mov.w	r1, #32
 800703c:	f381 8811 	msr	BASEPRI, r1
 8007040:	617b      	str	r3, [r7, #20]
 8007042:	4819      	ldr	r0, [pc, #100]	; (80070a8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007044:	f7ff f8ac 	bl	80061a0 <_PreparePacket>
 8007048:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800704e:	4b17      	ldr	r3, [pc, #92]	; (80070ac <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	61fb      	str	r3, [r7, #28]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	61bb      	str	r3, [r7, #24]
 8007060:	e00b      	b.n	800707a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	b2da      	uxtb	r2, r3
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	1c59      	adds	r1, r3, #1
 800706a:	61f9      	str	r1, [r7, #28]
 800706c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007070:	b2d2      	uxtb	r2, r2
 8007072:	701a      	strb	r2, [r3, #0]
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	09db      	lsrs	r3, r3, #7
 8007078:	61bb      	str	r3, [r7, #24]
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	2b7f      	cmp	r3, #127	; 0x7f
 800707e:	d8f0      	bhi.n	8007062 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	61fa      	str	r2, [r7, #28]
 8007086:	69ba      	ldr	r2, [r7, #24]
 8007088:	b2d2      	uxtb	r2, r2
 800708a:	701a      	strb	r2, [r3, #0]
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007090:	2208      	movs	r2, #8
 8007092:	68f9      	ldr	r1, [r7, #12]
 8007094:	6938      	ldr	r0, [r7, #16]
 8007096:	f7ff f973 	bl	8006380 <_SendPacket>
  RECORD_END();
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f383 8811 	msr	BASEPRI, r3
}
 80070a0:	bf00      	nop
 80070a2:	3720      	adds	r7, #32
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	200066d4 	.word	0x200066d4
 80070ac:	200066a4 	.word	0x200066a4

080070b0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b088      	sub	sp, #32
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80070b8:	f3ef 8311 	mrs	r3, BASEPRI
 80070bc:	f04f 0120 	mov.w	r1, #32
 80070c0:	f381 8811 	msr	BASEPRI, r1
 80070c4:	617b      	str	r3, [r7, #20]
 80070c6:	4819      	ldr	r0, [pc, #100]	; (800712c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80070c8:	f7ff f86a 	bl	80061a0 <_PreparePacket>
 80070cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80070d2:	4b17      	ldr	r3, [pc, #92]	; (8007130 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	61fb      	str	r3, [r7, #28]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	61bb      	str	r3, [r7, #24]
 80070e4:	e00b      	b.n	80070fe <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	1c59      	adds	r1, r3, #1
 80070ee:	61f9      	str	r1, [r7, #28]
 80070f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070f4:	b2d2      	uxtb	r2, r2
 80070f6:	701a      	strb	r2, [r3, #0]
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	09db      	lsrs	r3, r3, #7
 80070fc:	61bb      	str	r3, [r7, #24]
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	2b7f      	cmp	r3, #127	; 0x7f
 8007102:	d8f0      	bhi.n	80070e6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	61fa      	str	r2, [r7, #28]
 800710a:	69ba      	ldr	r2, [r7, #24]
 800710c:	b2d2      	uxtb	r2, r2
 800710e:	701a      	strb	r2, [r3, #0]
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007114:	2204      	movs	r2, #4
 8007116:	68f9      	ldr	r1, [r7, #12]
 8007118:	6938      	ldr	r0, [r7, #16]
 800711a:	f7ff f931 	bl	8006380 <_SendPacket>
  RECORD_END();
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f383 8811 	msr	BASEPRI, r3
}
 8007124:	bf00      	nop
 8007126:	3720      	adds	r7, #32
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	200066d4 	.word	0x200066d4
 8007130:	200066a4 	.word	0x200066a4

08007134 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007134:	b580      	push	{r7, lr}
 8007136:	b088      	sub	sp, #32
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800713c:	f3ef 8311 	mrs	r3, BASEPRI
 8007140:	f04f 0120 	mov.w	r1, #32
 8007144:	f381 8811 	msr	BASEPRI, r1
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	4819      	ldr	r0, [pc, #100]	; (80071b0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800714c:	f7ff f828 	bl	80061a0 <_PreparePacket>
 8007150:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007156:	4b17      	ldr	r3, [pc, #92]	; (80071b4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	61fb      	str	r3, [r7, #28]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	61bb      	str	r3, [r7, #24]
 8007168:	e00b      	b.n	8007182 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	b2da      	uxtb	r2, r3
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	1c59      	adds	r1, r3, #1
 8007172:	61f9      	str	r1, [r7, #28]
 8007174:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007178:	b2d2      	uxtb	r2, r2
 800717a:	701a      	strb	r2, [r3, #0]
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	09db      	lsrs	r3, r3, #7
 8007180:	61bb      	str	r3, [r7, #24]
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	2b7f      	cmp	r3, #127	; 0x7f
 8007186:	d8f0      	bhi.n	800716a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	1c5a      	adds	r2, r3, #1
 800718c:	61fa      	str	r2, [r7, #28]
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	b2d2      	uxtb	r2, r2
 8007192:	701a      	strb	r2, [r3, #0]
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007198:	2206      	movs	r2, #6
 800719a:	68f9      	ldr	r1, [r7, #12]
 800719c:	6938      	ldr	r0, [r7, #16]
 800719e:	f7ff f8ef 	bl	8006380 <_SendPacket>
  RECORD_END();
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f383 8811 	msr	BASEPRI, r3
}
 80071a8:	bf00      	nop
 80071aa:	3720      	adds	r7, #32
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	200066d4 	.word	0x200066d4
 80071b4:	200066a4 	.word	0x200066a4

080071b8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08a      	sub	sp, #40	; 0x28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80071c2:	f3ef 8311 	mrs	r3, BASEPRI
 80071c6:	f04f 0120 	mov.w	r1, #32
 80071ca:	f381 8811 	msr	BASEPRI, r1
 80071ce:	617b      	str	r3, [r7, #20]
 80071d0:	4827      	ldr	r0, [pc, #156]	; (8007270 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80071d2:	f7fe ffe5 	bl	80061a0 <_PreparePacket>
 80071d6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80071dc:	4b25      	ldr	r3, [pc, #148]	; (8007274 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	627b      	str	r3, [r7, #36]	; 0x24
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	623b      	str	r3, [r7, #32]
 80071ee:	e00b      	b.n	8007208 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80071f0:	6a3b      	ldr	r3, [r7, #32]
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	1c59      	adds	r1, r3, #1
 80071f8:	6279      	str	r1, [r7, #36]	; 0x24
 80071fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071fe:	b2d2      	uxtb	r2, r2
 8007200:	701a      	strb	r2, [r3, #0]
 8007202:	6a3b      	ldr	r3, [r7, #32]
 8007204:	09db      	lsrs	r3, r3, #7
 8007206:	623b      	str	r3, [r7, #32]
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	2b7f      	cmp	r3, #127	; 0x7f
 800720c:	d8f0      	bhi.n	80071f0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	1c5a      	adds	r2, r3, #1
 8007212:	627a      	str	r2, [r7, #36]	; 0x24
 8007214:	6a3a      	ldr	r2, [r7, #32]
 8007216:	b2d2      	uxtb	r2, r2
 8007218:	701a      	strb	r2, [r3, #0]
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	61fb      	str	r3, [r7, #28]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	61bb      	str	r3, [r7, #24]
 8007226:	e00b      	b.n	8007240 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	b2da      	uxtb	r2, r3
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	1c59      	adds	r1, r3, #1
 8007230:	61f9      	str	r1, [r7, #28]
 8007232:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007236:	b2d2      	uxtb	r2, r2
 8007238:	701a      	strb	r2, [r3, #0]
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	09db      	lsrs	r3, r3, #7
 800723e:	61bb      	str	r3, [r7, #24]
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	2b7f      	cmp	r3, #127	; 0x7f
 8007244:	d8f0      	bhi.n	8007228 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	61fa      	str	r2, [r7, #28]
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	b2d2      	uxtb	r2, r2
 8007250:	701a      	strb	r2, [r3, #0]
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007256:	2207      	movs	r2, #7
 8007258:	68f9      	ldr	r1, [r7, #12]
 800725a:	6938      	ldr	r0, [r7, #16]
 800725c:	f7ff f890 	bl	8006380 <_SendPacket>
  RECORD_END();
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f383 8811 	msr	BASEPRI, r3
}
 8007266:	bf00      	nop
 8007268:	3728      	adds	r7, #40	; 0x28
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	200066d4 	.word	0x200066d4
 8007274:	200066a4 	.word	0x200066a4

08007278 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007280:	4b04      	ldr	r3, [pc, #16]	; (8007294 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	1ad3      	subs	r3, r2, r3
}
 8007288:	4618      	mov	r0, r3
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	200066a4 	.word	0x200066a4

08007298 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007298:	b580      	push	{r7, lr}
 800729a:	b08c      	sub	sp, #48	; 0x30
 800729c:	af00      	add	r7, sp, #0
 800729e:	4603      	mov	r3, r0
 80072a0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80072a2:	4b3b      	ldr	r3, [pc, #236]	; (8007390 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d06d      	beq.n	8007386 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80072aa:	4b39      	ldr	r3, [pc, #228]	; (8007390 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80072b0:	2300      	movs	r3, #0
 80072b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80072b4:	e008      	b.n	80072c8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80072b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80072bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d007      	beq.n	80072d2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80072c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c4:	3301      	adds	r3, #1
 80072c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80072c8:	79fb      	ldrb	r3, [r7, #7]
 80072ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d3f2      	bcc.n	80072b6 <SEGGER_SYSVIEW_SendModule+0x1e>
 80072d0:	e000      	b.n	80072d4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80072d2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80072d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d055      	beq.n	8007386 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80072da:	f3ef 8311 	mrs	r3, BASEPRI
 80072de:	f04f 0120 	mov.w	r1, #32
 80072e2:	f381 8811 	msr	BASEPRI, r1
 80072e6:	617b      	str	r3, [r7, #20]
 80072e8:	482a      	ldr	r0, [pc, #168]	; (8007394 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80072ea:	f7fe ff59 	bl	80061a0 <_PreparePacket>
 80072ee:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	627b      	str	r3, [r7, #36]	; 0x24
 80072f8:	79fb      	ldrb	r3, [r7, #7]
 80072fa:	623b      	str	r3, [r7, #32]
 80072fc:	e00b      	b.n	8007316 <SEGGER_SYSVIEW_SendModule+0x7e>
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	b2da      	uxtb	r2, r3
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007304:	1c59      	adds	r1, r3, #1
 8007306:	6279      	str	r1, [r7, #36]	; 0x24
 8007308:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800730c:	b2d2      	uxtb	r2, r2
 800730e:	701a      	strb	r2, [r3, #0]
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	09db      	lsrs	r3, r3, #7
 8007314:	623b      	str	r3, [r7, #32]
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	2b7f      	cmp	r3, #127	; 0x7f
 800731a:	d8f0      	bhi.n	80072fe <SEGGER_SYSVIEW_SendModule+0x66>
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	627a      	str	r2, [r7, #36]	; 0x24
 8007322:	6a3a      	ldr	r2, [r7, #32]
 8007324:	b2d2      	uxtb	r2, r2
 8007326:	701a      	strb	r2, [r3, #0]
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	61fb      	str	r3, [r7, #28]
 8007330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	61bb      	str	r3, [r7, #24]
 8007336:	e00b      	b.n	8007350 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	b2da      	uxtb	r2, r3
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	1c59      	adds	r1, r3, #1
 8007340:	61f9      	str	r1, [r7, #28]
 8007342:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007346:	b2d2      	uxtb	r2, r2
 8007348:	701a      	strb	r2, [r3, #0]
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	09db      	lsrs	r3, r3, #7
 800734e:	61bb      	str	r3, [r7, #24]
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	2b7f      	cmp	r3, #127	; 0x7f
 8007354:	d8f0      	bhi.n	8007338 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	1c5a      	adds	r2, r3, #1
 800735a:	61fa      	str	r2, [r7, #28]
 800735c:	69ba      	ldr	r2, [r7, #24]
 800735e:	b2d2      	uxtb	r2, r2
 8007360:	701a      	strb	r2, [r3, #0]
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2280      	movs	r2, #128	; 0x80
 800736c:	4619      	mov	r1, r3
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f7fe fec6 	bl	8006100 <_EncodeStr>
 8007374:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007376:	2216      	movs	r2, #22
 8007378:	68f9      	ldr	r1, [r7, #12]
 800737a:	6938      	ldr	r0, [r7, #16]
 800737c:	f7ff f800 	bl	8006380 <_SendPacket>
      RECORD_END();
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007386:	bf00      	nop
 8007388:	3730      	adds	r7, #48	; 0x30
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	200066cc 	.word	0x200066cc
 8007394:	200066d4 	.word	0x200066d4

08007398 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800739e:	4b0c      	ldr	r3, [pc, #48]	; (80073d0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00f      	beq.n	80073c6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80073a6:	4b0a      	ldr	r3, [pc, #40]	; (80073d0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d002      	beq.n	80073ba <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1f2      	bne.n	80073ac <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80073c6:	bf00      	nop
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	200066cc 	.word	0x200066cc

080073d4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80073da:	f3ef 8311 	mrs	r3, BASEPRI
 80073de:	f04f 0120 	mov.w	r1, #32
 80073e2:	f381 8811 	msr	BASEPRI, r1
 80073e6:	60fb      	str	r3, [r7, #12]
 80073e8:	4817      	ldr	r0, [pc, #92]	; (8007448 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80073ea:	f7fe fed9 	bl	80061a0 <_PreparePacket>
 80073ee:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	617b      	str	r3, [r7, #20]
 80073f8:	4b14      	ldr	r3, [pc, #80]	; (800744c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	613b      	str	r3, [r7, #16]
 80073fe:	e00b      	b.n	8007418 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	b2da      	uxtb	r2, r3
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	1c59      	adds	r1, r3, #1
 8007408:	6179      	str	r1, [r7, #20]
 800740a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800740e:	b2d2      	uxtb	r2, r2
 8007410:	701a      	strb	r2, [r3, #0]
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	09db      	lsrs	r3, r3, #7
 8007416:	613b      	str	r3, [r7, #16]
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	2b7f      	cmp	r3, #127	; 0x7f
 800741c:	d8f0      	bhi.n	8007400 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	1c5a      	adds	r2, r3, #1
 8007422:	617a      	str	r2, [r7, #20]
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	b2d2      	uxtb	r2, r2
 8007428:	701a      	strb	r2, [r3, #0]
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800742e:	221b      	movs	r2, #27
 8007430:	6879      	ldr	r1, [r7, #4]
 8007432:	68b8      	ldr	r0, [r7, #8]
 8007434:	f7fe ffa4 	bl	8006380 <_SendPacket>
  RECORD_END();
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f383 8811 	msr	BASEPRI, r3
}
 800743e:	bf00      	nop
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	200066d4 	.word	0x200066d4
 800744c:	200066d0 	.word	0x200066d0

08007450 <SEGGER_SYSVIEW_Print>:
*    Print a string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Print(const char* s) {
 8007450:	b580      	push	{r7, lr}
 8007452:	b08a      	sub	sp, #40	; 0x28
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007458:	f3ef 8311 	mrs	r3, BASEPRI
 800745c:	f04f 0120 	mov.w	r1, #32
 8007460:	f381 8811 	msr	BASEPRI, r1
 8007464:	617b      	str	r3, [r7, #20]
 8007466:	4827      	ldr	r0, [pc, #156]	; (8007504 <SEGGER_SYSVIEW_Print+0xb4>)
 8007468:	f7fe fe9a 	bl	80061a0 <_PreparePacket>
 800746c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800746e:	2280      	movs	r2, #128	; 0x80
 8007470:	6879      	ldr	r1, [r7, #4]
 8007472:	6938      	ldr	r0, [r7, #16]
 8007474:	f7fe fe44 	bl	8006100 <_EncodeStr>
 8007478:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_LOG);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	627b      	str	r3, [r7, #36]	; 0x24
 800747e:	2300      	movs	r3, #0
 8007480:	623b      	str	r3, [r7, #32]
 8007482:	e00b      	b.n	800749c <SEGGER_SYSVIEW_Print+0x4c>
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	b2da      	uxtb	r2, r3
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	1c59      	adds	r1, r3, #1
 800748c:	6279      	str	r1, [r7, #36]	; 0x24
 800748e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007492:	b2d2      	uxtb	r2, r2
 8007494:	701a      	strb	r2, [r3, #0]
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	09db      	lsrs	r3, r3, #7
 800749a:	623b      	str	r3, [r7, #32]
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	2b7f      	cmp	r3, #127	; 0x7f
 80074a0:	d8f0      	bhi.n	8007484 <SEGGER_SYSVIEW_Print+0x34>
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a4:	1c5a      	adds	r2, r3, #1
 80074a6:	627a      	str	r2, [r7, #36]	; 0x24
 80074a8:	6a3a      	ldr	r2, [r7, #32]
 80074aa:	b2d2      	uxtb	r2, r2
 80074ac:	701a      	strb	r2, [r3, #0]
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	61fb      	str	r3, [r7, #28]
 80074b6:	2300      	movs	r3, #0
 80074b8:	61bb      	str	r3, [r7, #24]
 80074ba:	e00b      	b.n	80074d4 <SEGGER_SYSVIEW_Print+0x84>
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	1c59      	adds	r1, r3, #1
 80074c4:	61f9      	str	r1, [r7, #28]
 80074c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074ca:	b2d2      	uxtb	r2, r2
 80074cc:	701a      	strb	r2, [r3, #0]
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	09db      	lsrs	r3, r3, #7
 80074d2:	61bb      	str	r3, [r7, #24]
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	2b7f      	cmp	r3, #127	; 0x7f
 80074d8:	d8f0      	bhi.n	80074bc <SEGGER_SYSVIEW_Print+0x6c>
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	1c5a      	adds	r2, r3, #1
 80074de:	61fa      	str	r2, [r7, #28]
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	b2d2      	uxtb	r2, r2
 80074e4:	701a      	strb	r2, [r3, #0]
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80074ea:	221a      	movs	r2, #26
 80074ec:	68f9      	ldr	r1, [r7, #12]
 80074ee:	6938      	ldr	r0, [r7, #16]
 80074f0:	f7fe ff46 	bl	8006380 <_SendPacket>
  RECORD_END();
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	f383 8811 	msr	BASEPRI, r3
}
 80074fa:	bf00      	nop
 80074fc:	3728      	adds	r7, #40	; 0x28
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	200066d4 	.word	0x200066d4

08007508 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007508:	b580      	push	{r7, lr}
 800750a:	b08a      	sub	sp, #40	; 0x28
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007510:	f3ef 8311 	mrs	r3, BASEPRI
 8007514:	f04f 0120 	mov.w	r1, #32
 8007518:	f381 8811 	msr	BASEPRI, r1
 800751c:	617b      	str	r3, [r7, #20]
 800751e:	4827      	ldr	r0, [pc, #156]	; (80075bc <SEGGER_SYSVIEW_Warn+0xb4>)
 8007520:	f7fe fe3e 	bl	80061a0 <_PreparePacket>
 8007524:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007526:	2280      	movs	r2, #128	; 0x80
 8007528:	6879      	ldr	r1, [r7, #4]
 800752a:	6938      	ldr	r0, [r7, #16]
 800752c:	f7fe fde8 	bl	8006100 <_EncodeStr>
 8007530:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	627b      	str	r3, [r7, #36]	; 0x24
 8007536:	2301      	movs	r3, #1
 8007538:	623b      	str	r3, [r7, #32]
 800753a:	e00b      	b.n	8007554 <SEGGER_SYSVIEW_Warn+0x4c>
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	b2da      	uxtb	r2, r3
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	1c59      	adds	r1, r3, #1
 8007544:	6279      	str	r1, [r7, #36]	; 0x24
 8007546:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800754a:	b2d2      	uxtb	r2, r2
 800754c:	701a      	strb	r2, [r3, #0]
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	09db      	lsrs	r3, r3, #7
 8007552:	623b      	str	r3, [r7, #32]
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	2b7f      	cmp	r3, #127	; 0x7f
 8007558:	d8f0      	bhi.n	800753c <SEGGER_SYSVIEW_Warn+0x34>
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	1c5a      	adds	r2, r3, #1
 800755e:	627a      	str	r2, [r7, #36]	; 0x24
 8007560:	6a3a      	ldr	r2, [r7, #32]
 8007562:	b2d2      	uxtb	r2, r2
 8007564:	701a      	strb	r2, [r3, #0]
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007568:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	61fb      	str	r3, [r7, #28]
 800756e:	2300      	movs	r3, #0
 8007570:	61bb      	str	r3, [r7, #24]
 8007572:	e00b      	b.n	800758c <SEGGER_SYSVIEW_Warn+0x84>
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	b2da      	uxtb	r2, r3
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	1c59      	adds	r1, r3, #1
 800757c:	61f9      	str	r1, [r7, #28]
 800757e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007582:	b2d2      	uxtb	r2, r2
 8007584:	701a      	strb	r2, [r3, #0]
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	09db      	lsrs	r3, r3, #7
 800758a:	61bb      	str	r3, [r7, #24]
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	2b7f      	cmp	r3, #127	; 0x7f
 8007590:	d8f0      	bhi.n	8007574 <SEGGER_SYSVIEW_Warn+0x6c>
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	1c5a      	adds	r2, r3, #1
 8007596:	61fa      	str	r2, [r7, #28]
 8007598:	69ba      	ldr	r2, [r7, #24]
 800759a:	b2d2      	uxtb	r2, r2
 800759c:	701a      	strb	r2, [r3, #0]
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80075a2:	221a      	movs	r2, #26
 80075a4:	68f9      	ldr	r1, [r7, #12]
 80075a6:	6938      	ldr	r0, [r7, #16]
 80075a8:	f7fe feea 	bl	8006380 <_SendPacket>
  RECORD_END();
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	f383 8811 	msr	BASEPRI, r3
}
 80075b2:	bf00      	nop
 80075b4:	3728      	adds	r7, #40	; 0x28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	200066d4 	.word	0x200066d4

080075c0 <USART2_addToQueue>:
int USART2_sendString(char *msg)
{
	return 0;
}

int USART2_addToQueue(char *msg){
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
	//Add to queue
	USART2_msg2Queue = (USART_message_t*) osPoolAlloc(mpool);
 80075c8:	4b0d      	ldr	r3, [pc, #52]	; (8007600 <USART2_addToQueue+0x40>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fb fdde 	bl	800318e <osPoolAlloc>
 80075d2:	4603      	mov	r3, r0
 80075d4:	4a0b      	ldr	r2, [pc, #44]	; (8007604 <USART2_addToQueue+0x44>)
 80075d6:	6013      	str	r3, [r2, #0]
	strcpy(USART2_msg2Queue->message, msg); // Random str
 80075d8:	4b0a      	ldr	r3, [pc, #40]	; (8007604 <USART2_addToQueue+0x44>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6879      	ldr	r1, [r7, #4]
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 f942 	bl	8007868 <strcpy>
	osMessagePut(queueUSART2Handle, (uint32_t) USART2_msg2Queue, 0);
 80075e4:	4b08      	ldr	r3, [pc, #32]	; (8007608 <USART2_addToQueue+0x48>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a06      	ldr	r2, [pc, #24]	; (8007604 <USART2_addToQueue+0x44>)
 80075ea:	6812      	ldr	r2, [r2, #0]
 80075ec:	4611      	mov	r1, r2
 80075ee:	2200      	movs	r2, #0
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fb fe97 	bl	8003324 <osMessagePut>

	return 0;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	2000009c 	.word	0x2000009c
 8007604:	200067b8 	.word	0x200067b8
 8007608:	20000098 	.word	0x20000098

0800760c <USART2_printFromQueue>:

int USART2_printFromQueue(){
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
	//Consume from queue
	osEvent evt = osMessageGet(queueUSART2Handle, osWaitForever);
 8007612:	4b11      	ldr	r3, [pc, #68]	; (8007658 <USART2_printFromQueue+0x4c>)
 8007614:	6819      	ldr	r1, [r3, #0]
 8007616:	463b      	mov	r3, r7
 8007618:	f04f 32ff 	mov.w	r2, #4294967295
 800761c:	4618      	mov	r0, r3
 800761e:	f7fb fecd 	bl	80033bc <osMessageGet>

	if (evt.status == osEventMessage) {
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	2b10      	cmp	r3, #16
 8007626:	d111      	bne.n	800764c <USART2_printFromQueue+0x40>
			USART_message_t *msgFromQueue = (USART_message_t*) evt.value.p;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	60fb      	str	r3, [r7, #12]
			osPoolFree(mpool, msgFromQueue);
 800762c:	4b0b      	ldr	r3, [pc, #44]	; (800765c <USART2_printFromQueue+0x50>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68f9      	ldr	r1, [r7, #12]
 8007632:	4618      	mov	r0, r3
 8007634:	f7fb fe0d 	bl	8003252 <osPoolFree>
			#else

			//Use UART interruption to send data (not blocking)
			HAL_UART_Transmit_IT( &huart2,
										(uint8_t*) msgFromQueue,
										strlen(msgFromQueue));
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f7f8 fe13 	bl	8000264 <strlen>
 800763e:	4603      	mov	r3, r0
			HAL_UART_Transmit_IT( &huart2,
 8007640:	b29b      	uxth	r3, r3
 8007642:	461a      	mov	r2, r3
 8007644:	68f9      	ldr	r1, [r7, #12]
 8007646:	4806      	ldr	r0, [pc, #24]	; (8007660 <USART2_printFromQueue+0x54>)
 8007648:	f7fa fda1 	bl	800218e <HAL_UART_Transmit_IT>

			#endif


		}
	return 0;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	20000098 	.word	0x20000098
 800765c:	2000009c 	.word	0x2000009c
 8007660:	200003a4 	.word	0x200003a4

08007664 <__libc_init_array>:
 8007664:	b570      	push	{r4, r5, r6, lr}
 8007666:	4d0d      	ldr	r5, [pc, #52]	; (800769c <__libc_init_array+0x38>)
 8007668:	4c0d      	ldr	r4, [pc, #52]	; (80076a0 <__libc_init_array+0x3c>)
 800766a:	1b64      	subs	r4, r4, r5
 800766c:	10a4      	asrs	r4, r4, #2
 800766e:	2600      	movs	r6, #0
 8007670:	42a6      	cmp	r6, r4
 8007672:	d109      	bne.n	8007688 <__libc_init_array+0x24>
 8007674:	4d0b      	ldr	r5, [pc, #44]	; (80076a4 <__libc_init_array+0x40>)
 8007676:	4c0c      	ldr	r4, [pc, #48]	; (80076a8 <__libc_init_array+0x44>)
 8007678:	f000 f90a 	bl	8007890 <_init>
 800767c:	1b64      	subs	r4, r4, r5
 800767e:	10a4      	asrs	r4, r4, #2
 8007680:	2600      	movs	r6, #0
 8007682:	42a6      	cmp	r6, r4
 8007684:	d105      	bne.n	8007692 <__libc_init_array+0x2e>
 8007686:	bd70      	pop	{r4, r5, r6, pc}
 8007688:	f855 3b04 	ldr.w	r3, [r5], #4
 800768c:	4798      	blx	r3
 800768e:	3601      	adds	r6, #1
 8007690:	e7ee      	b.n	8007670 <__libc_init_array+0xc>
 8007692:	f855 3b04 	ldr.w	r3, [r5], #4
 8007696:	4798      	blx	r3
 8007698:	3601      	adds	r6, #1
 800769a:	e7f2      	b.n	8007682 <__libc_init_array+0x1e>
 800769c:	08007a94 	.word	0x08007a94
 80076a0:	08007a94 	.word	0x08007a94
 80076a4:	08007a94 	.word	0x08007a94
 80076a8:	08007a98 	.word	0x08007a98

080076ac <__retarget_lock_acquire_recursive>:
 80076ac:	4770      	bx	lr

080076ae <__retarget_lock_release_recursive>:
 80076ae:	4770      	bx	lr

080076b0 <memcmp>:
 80076b0:	b510      	push	{r4, lr}
 80076b2:	3901      	subs	r1, #1
 80076b4:	4402      	add	r2, r0
 80076b6:	4290      	cmp	r0, r2
 80076b8:	d101      	bne.n	80076be <memcmp+0xe>
 80076ba:	2000      	movs	r0, #0
 80076bc:	e005      	b.n	80076ca <memcmp+0x1a>
 80076be:	7803      	ldrb	r3, [r0, #0]
 80076c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80076c4:	42a3      	cmp	r3, r4
 80076c6:	d001      	beq.n	80076cc <memcmp+0x1c>
 80076c8:	1b18      	subs	r0, r3, r4
 80076ca:	bd10      	pop	{r4, pc}
 80076cc:	3001      	adds	r0, #1
 80076ce:	e7f2      	b.n	80076b6 <memcmp+0x6>

080076d0 <memcpy>:
 80076d0:	440a      	add	r2, r1
 80076d2:	4291      	cmp	r1, r2
 80076d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80076d8:	d100      	bne.n	80076dc <memcpy+0xc>
 80076da:	4770      	bx	lr
 80076dc:	b510      	push	{r4, lr}
 80076de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076e6:	4291      	cmp	r1, r2
 80076e8:	d1f9      	bne.n	80076de <memcpy+0xe>
 80076ea:	bd10      	pop	{r4, pc}

080076ec <memset>:
 80076ec:	4402      	add	r2, r0
 80076ee:	4603      	mov	r3, r0
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d100      	bne.n	80076f6 <memset+0xa>
 80076f4:	4770      	bx	lr
 80076f6:	f803 1b01 	strb.w	r1, [r3], #1
 80076fa:	e7f9      	b.n	80076f0 <memset+0x4>

080076fc <_free_r>:
 80076fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076fe:	2900      	cmp	r1, #0
 8007700:	d044      	beq.n	800778c <_free_r+0x90>
 8007702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007706:	9001      	str	r0, [sp, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	f1a1 0404 	sub.w	r4, r1, #4
 800770e:	bfb8      	it	lt
 8007710:	18e4      	addlt	r4, r4, r3
 8007712:	f000 f8b1 	bl	8007878 <__malloc_lock>
 8007716:	4a1e      	ldr	r2, [pc, #120]	; (8007790 <_free_r+0x94>)
 8007718:	9801      	ldr	r0, [sp, #4]
 800771a:	6813      	ldr	r3, [r2, #0]
 800771c:	b933      	cbnz	r3, 800772c <_free_r+0x30>
 800771e:	6063      	str	r3, [r4, #4]
 8007720:	6014      	str	r4, [r2, #0]
 8007722:	b003      	add	sp, #12
 8007724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007728:	f000 b8ac 	b.w	8007884 <__malloc_unlock>
 800772c:	42a3      	cmp	r3, r4
 800772e:	d908      	bls.n	8007742 <_free_r+0x46>
 8007730:	6825      	ldr	r5, [r4, #0]
 8007732:	1961      	adds	r1, r4, r5
 8007734:	428b      	cmp	r3, r1
 8007736:	bf01      	itttt	eq
 8007738:	6819      	ldreq	r1, [r3, #0]
 800773a:	685b      	ldreq	r3, [r3, #4]
 800773c:	1949      	addeq	r1, r1, r5
 800773e:	6021      	streq	r1, [r4, #0]
 8007740:	e7ed      	b.n	800771e <_free_r+0x22>
 8007742:	461a      	mov	r2, r3
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	b10b      	cbz	r3, 800774c <_free_r+0x50>
 8007748:	42a3      	cmp	r3, r4
 800774a:	d9fa      	bls.n	8007742 <_free_r+0x46>
 800774c:	6811      	ldr	r1, [r2, #0]
 800774e:	1855      	adds	r5, r2, r1
 8007750:	42a5      	cmp	r5, r4
 8007752:	d10b      	bne.n	800776c <_free_r+0x70>
 8007754:	6824      	ldr	r4, [r4, #0]
 8007756:	4421      	add	r1, r4
 8007758:	1854      	adds	r4, r2, r1
 800775a:	42a3      	cmp	r3, r4
 800775c:	6011      	str	r1, [r2, #0]
 800775e:	d1e0      	bne.n	8007722 <_free_r+0x26>
 8007760:	681c      	ldr	r4, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	6053      	str	r3, [r2, #4]
 8007766:	4421      	add	r1, r4
 8007768:	6011      	str	r1, [r2, #0]
 800776a:	e7da      	b.n	8007722 <_free_r+0x26>
 800776c:	d902      	bls.n	8007774 <_free_r+0x78>
 800776e:	230c      	movs	r3, #12
 8007770:	6003      	str	r3, [r0, #0]
 8007772:	e7d6      	b.n	8007722 <_free_r+0x26>
 8007774:	6825      	ldr	r5, [r4, #0]
 8007776:	1961      	adds	r1, r4, r5
 8007778:	428b      	cmp	r3, r1
 800777a:	bf04      	itt	eq
 800777c:	6819      	ldreq	r1, [r3, #0]
 800777e:	685b      	ldreq	r3, [r3, #4]
 8007780:	6063      	str	r3, [r4, #4]
 8007782:	bf04      	itt	eq
 8007784:	1949      	addeq	r1, r1, r5
 8007786:	6021      	streq	r1, [r4, #0]
 8007788:	6054      	str	r4, [r2, #4]
 800778a:	e7ca      	b.n	8007722 <_free_r+0x26>
 800778c:	b003      	add	sp, #12
 800778e:	bd30      	pop	{r4, r5, pc}
 8007790:	200067c0 	.word	0x200067c0

08007794 <cleanup_glue>:
 8007794:	b538      	push	{r3, r4, r5, lr}
 8007796:	460c      	mov	r4, r1
 8007798:	6809      	ldr	r1, [r1, #0]
 800779a:	4605      	mov	r5, r0
 800779c:	b109      	cbz	r1, 80077a2 <cleanup_glue+0xe>
 800779e:	f7ff fff9 	bl	8007794 <cleanup_glue>
 80077a2:	4621      	mov	r1, r4
 80077a4:	4628      	mov	r0, r5
 80077a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077aa:	f7ff bfa7 	b.w	80076fc <_free_r>
	...

080077b0 <_reclaim_reent>:
 80077b0:	4b2c      	ldr	r3, [pc, #176]	; (8007864 <_reclaim_reent+0xb4>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4283      	cmp	r3, r0
 80077b6:	b570      	push	{r4, r5, r6, lr}
 80077b8:	4604      	mov	r4, r0
 80077ba:	d051      	beq.n	8007860 <_reclaim_reent+0xb0>
 80077bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80077be:	b143      	cbz	r3, 80077d2 <_reclaim_reent+0x22>
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d14a      	bne.n	800785c <_reclaim_reent+0xac>
 80077c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077c8:	6819      	ldr	r1, [r3, #0]
 80077ca:	b111      	cbz	r1, 80077d2 <_reclaim_reent+0x22>
 80077cc:	4620      	mov	r0, r4
 80077ce:	f7ff ff95 	bl	80076fc <_free_r>
 80077d2:	6961      	ldr	r1, [r4, #20]
 80077d4:	b111      	cbz	r1, 80077dc <_reclaim_reent+0x2c>
 80077d6:	4620      	mov	r0, r4
 80077d8:	f7ff ff90 	bl	80076fc <_free_r>
 80077dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80077de:	b111      	cbz	r1, 80077e6 <_reclaim_reent+0x36>
 80077e0:	4620      	mov	r0, r4
 80077e2:	f7ff ff8b 	bl	80076fc <_free_r>
 80077e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80077e8:	b111      	cbz	r1, 80077f0 <_reclaim_reent+0x40>
 80077ea:	4620      	mov	r0, r4
 80077ec:	f7ff ff86 	bl	80076fc <_free_r>
 80077f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80077f2:	b111      	cbz	r1, 80077fa <_reclaim_reent+0x4a>
 80077f4:	4620      	mov	r0, r4
 80077f6:	f7ff ff81 	bl	80076fc <_free_r>
 80077fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80077fc:	b111      	cbz	r1, 8007804 <_reclaim_reent+0x54>
 80077fe:	4620      	mov	r0, r4
 8007800:	f7ff ff7c 	bl	80076fc <_free_r>
 8007804:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007806:	b111      	cbz	r1, 800780e <_reclaim_reent+0x5e>
 8007808:	4620      	mov	r0, r4
 800780a:	f7ff ff77 	bl	80076fc <_free_r>
 800780e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007810:	b111      	cbz	r1, 8007818 <_reclaim_reent+0x68>
 8007812:	4620      	mov	r0, r4
 8007814:	f7ff ff72 	bl	80076fc <_free_r>
 8007818:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800781a:	b111      	cbz	r1, 8007822 <_reclaim_reent+0x72>
 800781c:	4620      	mov	r0, r4
 800781e:	f7ff ff6d 	bl	80076fc <_free_r>
 8007822:	69a3      	ldr	r3, [r4, #24]
 8007824:	b1e3      	cbz	r3, 8007860 <_reclaim_reent+0xb0>
 8007826:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007828:	4620      	mov	r0, r4
 800782a:	4798      	blx	r3
 800782c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800782e:	b1b9      	cbz	r1, 8007860 <_reclaim_reent+0xb0>
 8007830:	4620      	mov	r0, r4
 8007832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007836:	f7ff bfad 	b.w	8007794 <cleanup_glue>
 800783a:	5949      	ldr	r1, [r1, r5]
 800783c:	b941      	cbnz	r1, 8007850 <_reclaim_reent+0xa0>
 800783e:	3504      	adds	r5, #4
 8007840:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007842:	2d80      	cmp	r5, #128	; 0x80
 8007844:	68d9      	ldr	r1, [r3, #12]
 8007846:	d1f8      	bne.n	800783a <_reclaim_reent+0x8a>
 8007848:	4620      	mov	r0, r4
 800784a:	f7ff ff57 	bl	80076fc <_free_r>
 800784e:	e7ba      	b.n	80077c6 <_reclaim_reent+0x16>
 8007850:	680e      	ldr	r6, [r1, #0]
 8007852:	4620      	mov	r0, r4
 8007854:	f7ff ff52 	bl	80076fc <_free_r>
 8007858:	4631      	mov	r1, r6
 800785a:	e7ef      	b.n	800783c <_reclaim_reent+0x8c>
 800785c:	2500      	movs	r5, #0
 800785e:	e7ef      	b.n	8007840 <_reclaim_reent+0x90>
 8007860:	bd70      	pop	{r4, r5, r6, pc}
 8007862:	bf00      	nop
 8007864:	20000010 	.word	0x20000010

08007868 <strcpy>:
 8007868:	4603      	mov	r3, r0
 800786a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800786e:	f803 2b01 	strb.w	r2, [r3], #1
 8007872:	2a00      	cmp	r2, #0
 8007874:	d1f9      	bne.n	800786a <strcpy+0x2>
 8007876:	4770      	bx	lr

08007878 <__malloc_lock>:
 8007878:	4801      	ldr	r0, [pc, #4]	; (8007880 <__malloc_lock+0x8>)
 800787a:	f7ff bf17 	b.w	80076ac <__retarget_lock_acquire_recursive>
 800787e:	bf00      	nop
 8007880:	200067bc 	.word	0x200067bc

08007884 <__malloc_unlock>:
 8007884:	4801      	ldr	r0, [pc, #4]	; (800788c <__malloc_unlock+0x8>)
 8007886:	f7ff bf12 	b.w	80076ae <__retarget_lock_release_recursive>
 800788a:	bf00      	nop
 800788c:	200067bc 	.word	0x200067bc

08007890 <_init>:
 8007890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007892:	bf00      	nop
 8007894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007896:	bc08      	pop	{r3}
 8007898:	469e      	mov	lr, r3
 800789a:	4770      	bx	lr

0800789c <_fini>:
 800789c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789e:	bf00      	nop
 80078a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078a2:	bc08      	pop	{r3}
 80078a4:	469e      	mov	lr, r3
 80078a6:	4770      	bx	lr
