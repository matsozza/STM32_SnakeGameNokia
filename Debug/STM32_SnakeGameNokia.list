
STM32_SnakeGameNokia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08007da0  08007da0  00017da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f84  08007f84  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007f84  08007f84  00017f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f8c  08007f8c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f8c  08007f8c  00017f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f90  08007f90  00017f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00006750  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200067c4  200067c4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cab9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f03  00000000  00000000  0003cb5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001750  00000000  00000000  00040a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001588  00000000  00000000  000421b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025882  00000000  00000000  00043738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c709  00000000  00000000  00068fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000daed9  00000000  00000000  000856c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016059c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063d0  00000000  00000000  001605ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d88 	.word	0x08007d88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007d88 	.word	0x08007d88

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200041e4 	.word	0x200041e4

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b974 	b.w	8000574 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468e      	mov	lr, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14d      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d969      	bls.n	800038c <__udivmoddi4+0xe8>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b152      	cbz	r2, 80002d4 <__udivmoddi4+0x30>
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	f1c2 0120 	rsb	r1, r2, #32
 80002c6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ce:	ea41 0e03 	orr.w	lr, r1, r3
 80002d2:	4094      	lsls	r4, r2
 80002d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d8:	0c21      	lsrs	r1, r4, #16
 80002da:	fbbe f6f8 	udiv	r6, lr, r8
 80002de:	fa1f f78c 	uxth.w	r7, ip
 80002e2:	fb08 e316 	mls	r3, r8, r6, lr
 80002e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ea:	fb06 f107 	mul.w	r1, r6, r7
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002fa:	f080 811f 	bcs.w	800053c <__udivmoddi4+0x298>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 811c 	bls.w	800053c <__udivmoddi4+0x298>
 8000304:	3e02      	subs	r6, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000310:	fb08 3310 	mls	r3, r8, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x92>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	1be4      	subs	r4, r4, r7
 800033c:	2600      	movs	r6, #0
 800033e:	b11d      	cbz	r5, 8000348 <__udivmoddi4+0xa4>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c5 4300 	strd	r4, r3, [r5]
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0xc2>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80ef 	beq.w	8000536 <__udivmoddi4+0x292>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x160>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xd4>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80f9 	bhi.w	800056a <__udivmoddi4+0x2c6>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0303 	sbc.w	r3, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	469e      	mov	lr, r3
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e0      	beq.n	8000348 <__udivmoddi4+0xa4>
 8000386:	e9c5 4e00 	strd	r4, lr, [r5]
 800038a:	e7dd      	b.n	8000348 <__udivmoddi4+0xa4>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xec>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f282 	clz	r2, r2
 8000394:	2a00      	cmp	r2, #0
 8000396:	f040 8092 	bne.w	80004be <__udivmoddi4+0x21a>
 800039a:	eba1 010c 	sub.w	r1, r1, ip
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f fe8c 	uxth.w	lr, ip
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ae:	fb07 1113 	mls	r1, r7, r3, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb0e f003 	mul.w	r0, lr, r3
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x12c>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x12a>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f200 80cb 	bhi.w	8000564 <__udivmoddi4+0x2c0>
 80003ce:	4643      	mov	r3, r8
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d8:	fb07 1110 	mls	r1, r7, r0, r1
 80003dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e0:	fb0e fe00 	mul.w	lr, lr, r0
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x156>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x154>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2ca>
 80003f8:	4608      	mov	r0, r1
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	e79c      	b.n	800033e <__udivmoddi4+0x9a>
 8000404:	f1c6 0720 	rsb	r7, r6, #32
 8000408:	40b3      	lsls	r3, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f407 	lsr.w	r4, r0, r7
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	431c      	orrs	r4, r3
 800041c:	40f9      	lsrs	r1, r7
 800041e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000422:	fa00 f306 	lsl.w	r3, r0, r6
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	0c20      	lsrs	r0, r4, #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fb09 1118 	mls	r1, r9, r8, r1
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	fb08 f00e 	mul.w	r0, r8, lr
 800043c:	4288      	cmp	r0, r1
 800043e:	fa02 f206 	lsl.w	r2, r2, r6
 8000442:	d90b      	bls.n	800045c <__udivmoddi4+0x1b8>
 8000444:	eb1c 0101 	adds.w	r1, ip, r1
 8000448:	f108 3aff 	add.w	sl, r8, #4294967295
 800044c:	f080 8088 	bcs.w	8000560 <__udivmoddi4+0x2bc>
 8000450:	4288      	cmp	r0, r1
 8000452:	f240 8085 	bls.w	8000560 <__udivmoddi4+0x2bc>
 8000456:	f1a8 0802 	sub.w	r8, r8, #2
 800045a:	4461      	add	r1, ip
 800045c:	1a09      	subs	r1, r1, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb1 f0f9 	udiv	r0, r1, r9
 8000464:	fb09 1110 	mls	r1, r9, r0, r1
 8000468:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000470:	458e      	cmp	lr, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x1e2>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f100 34ff 	add.w	r4, r0, #4294967295
 800047c:	d26c      	bcs.n	8000558 <__udivmoddi4+0x2b4>
 800047e:	458e      	cmp	lr, r1
 8000480:	d96a      	bls.n	8000558 <__udivmoddi4+0x2b4>
 8000482:	3802      	subs	r0, #2
 8000484:	4461      	add	r1, ip
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	fba0 9402 	umull	r9, r4, r0, r2
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	42a1      	cmp	r1, r4
 8000494:	46c8      	mov	r8, r9
 8000496:	46a6      	mov	lr, r4
 8000498:	d356      	bcc.n	8000548 <__udivmoddi4+0x2a4>
 800049a:	d053      	beq.n	8000544 <__udivmoddi4+0x2a0>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x212>
 800049e:	ebb3 0208 	subs.w	r2, r3, r8
 80004a2:	eb61 010e 	sbc.w	r1, r1, lr
 80004a6:	fa01 f707 	lsl.w	r7, r1, r7
 80004aa:	fa22 f306 	lsr.w	r3, r2, r6
 80004ae:	40f1      	lsrs	r1, r6
 80004b0:	431f      	orrs	r7, r3
 80004b2:	e9c5 7100 	strd	r7, r1, [r5]
 80004b6:	2600      	movs	r6, #0
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	40d8      	lsrs	r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa21 f303 	lsr.w	r3, r1, r3
 80004cc:	4091      	lsls	r1, r2
 80004ce:	4301      	orrs	r1, r0
 80004d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004dc:	fb07 3610 	mls	r6, r7, r0, r3
 80004e0:	0c0b      	lsrs	r3, r1, #16
 80004e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e6:	fb00 f60e 	mul.w	r6, r0, lr
 80004ea:	429e      	cmp	r6, r3
 80004ec:	fa04 f402 	lsl.w	r4, r4, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x260>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fa:	d22f      	bcs.n	800055c <__udivmoddi4+0x2b8>
 80004fc:	429e      	cmp	r6, r3
 80004fe:	d92d      	bls.n	800055c <__udivmoddi4+0x2b8>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	b289      	uxth	r1, r1
 8000508:	fbb3 f6f7 	udiv	r6, r3, r7
 800050c:	fb07 3316 	mls	r3, r7, r6, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb06 f30e 	mul.w	r3, r6, lr
 8000518:	428b      	cmp	r3, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x28a>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f106 38ff 	add.w	r8, r6, #4294967295
 8000524:	d216      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 8000526:	428b      	cmp	r3, r1
 8000528:	d914      	bls.n	8000554 <__udivmoddi4+0x2b0>
 800052a:	3e02      	subs	r6, #2
 800052c:	4461      	add	r1, ip
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000534:	e738      	b.n	80003a8 <__udivmoddi4+0x104>
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e705      	b.n	8000348 <__udivmoddi4+0xa4>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e3      	b.n	8000308 <__udivmoddi4+0x64>
 8000540:	4618      	mov	r0, r3
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x92>
 8000544:	454b      	cmp	r3, r9
 8000546:	d2a9      	bcs.n	800049c <__udivmoddi4+0x1f8>
 8000548:	ebb9 0802 	subs.w	r8, r9, r2
 800054c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000550:	3801      	subs	r0, #1
 8000552:	e7a3      	b.n	800049c <__udivmoddi4+0x1f8>
 8000554:	4646      	mov	r6, r8
 8000556:	e7ea      	b.n	800052e <__udivmoddi4+0x28a>
 8000558:	4620      	mov	r0, r4
 800055a:	e794      	b.n	8000486 <__udivmoddi4+0x1e2>
 800055c:	4640      	mov	r0, r8
 800055e:	e7d1      	b.n	8000504 <__udivmoddi4+0x260>
 8000560:	46d0      	mov	r8, sl
 8000562:	e77b      	b.n	800045c <__udivmoddi4+0x1b8>
 8000564:	3b02      	subs	r3, #2
 8000566:	4461      	add	r1, ip
 8000568:	e732      	b.n	80003d0 <__udivmoddi4+0x12c>
 800056a:	4630      	mov	r0, r6
 800056c:	e709      	b.n	8000382 <__udivmoddi4+0xde>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x156>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
	volatile uint32_t queueUSART2_msgWaiting=0;
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
	for(;;){
		// ** Check and consume USART2 queue
		queueUSART2_msgWaiting = osMessageWaiting(queueUSART2Handle);
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <vApplicationIdleHook+0x24>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4618      	mov	r0, r3
 8000588:	f002 fffa 	bl	8003580 <osMessageWaiting>
 800058c:	4603      	mov	r3, r0
 800058e:	607b      	str	r3, [r7, #4]
		if(queueUSART2_msgWaiting>0) USART2_consumeFromQueue(); //Consume USART 2 Queue items
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f5      	beq.n	8000582 <vApplicationIdleHook+0xa>
 8000596:	f007 faa9 	bl	8007aec <USART2_consumeFromQueue>
		queueUSART2_msgWaiting = osMessageWaiting(queueUSART2Handle);
 800059a:	e7f2      	b.n	8000582 <vApplicationIdleHook+0xa>
 800059c:	2000009c 	.word	0x2000009c

080005a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4a07      	ldr	r2, [pc, #28]	; (80005cc <vApplicationGetIdleTaskMemory+0x2c>)
 80005b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <vApplicationGetIdleTaskMemory+0x30>)
 80005b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	200000a0 	.word	0x200000a0
 80005d0:	2000015c 	.word	0x2000015c

080005d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b096      	sub	sp, #88	; 0x58
 80005d8:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of queueUSART2 */
  osMessageQDef(queueUSART2, 5, USART_message_t);
 80005da:	4b22      	ldr	r3, [pc, #136]	; (8000664 <MX_FREERTOS_Init+0x90>)
 80005dc:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80005e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  queueUSART2Handle = osMessageCreate(osMessageQ(queueUSART2), NULL);
 80005e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 fea5 	bl	800333c <osMessageCreate>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a1c      	ldr	r2, [pc, #112]	; (8000668 <MX_FREERTOS_Init+0x94>)
 80005f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  osPoolDef(mPoolUSART2Handle, 15, USART_message_t);
 80005f8:	4a1c      	ldr	r2, [pc, #112]	; (800066c <MX_FREERTOS_Init+0x98>)
 80005fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000600:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  mPoolUSART2Handle = osPoolCreate(osPool(mPoolUSART2Handle));
 8000604:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000608:	4618      	mov	r0, r3
 800060a:	f002 fd97 	bl	800313c <osPoolCreate>
 800060e:	4603      	mov	r3, r0
 8000610:	4a17      	ldr	r2, [pc, #92]	; (8000670 <MX_FREERTOS_Init+0x9c>)
 8000612:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task100ms */
  osThreadDef(task100ms, startTask100ms, osPriorityNormal, 0, 128);
 8000614:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_FREERTOS_Init+0xa0>)
 8000616:	f107 0420 	add.w	r4, r7, #32
 800061a:	461d      	mov	r5, r3
 800061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task100msHandle = osThreadCreate(osThread(task100ms), NULL);
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fd1d 	bl	800306e <osThreadCreate>
 8000634:	4603      	mov	r3, r0
 8000636:	4a10      	ldr	r2, [pc, #64]	; (8000678 <MX_FREERTOS_Init+0xa4>)
 8000638:	6013      	str	r3, [r2, #0]

  /* definition and creation of task500ms */
  osThreadDef(task500ms, startTask500ms, osPriorityAboveNormal, 0, 128);
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <MX_FREERTOS_Init+0xa8>)
 800063c:	1d3c      	adds	r4, r7, #4
 800063e:	461d      	mov	r5, r3
 8000640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000644:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000648:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task500msHandle = osThreadCreate(osThread(task500ms), NULL);
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f002 fd0c 	bl	800306e <osThreadCreate>
 8000656:	4603      	mov	r3, r0
 8000658:	4a09      	ldr	r2, [pc, #36]	; (8000680 <MX_FREERTOS_Init+0xac>)
 800065a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800065c:	bf00      	nop
 800065e:	3758      	adds	r7, #88	; 0x58
 8000660:	46bd      	mov	sp, r7
 8000662:	bdb0      	pop	{r4, r5, r7, pc}
 8000664:	08007db8 	.word	0x08007db8
 8000668:	2000009c 	.word	0x2000009c
 800066c:	08007dc8 	.word	0x08007dc8
 8000670:	20000090 	.word	0x20000090
 8000674:	08007dd4 	.word	0x08007dd4
 8000678:	20000094 	.word	0x20000094
 800067c:	08007df0 	.word	0x08007df0
 8000680:	20000098 	.word	0x20000098

08000684 <startTask100ms>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startTask100ms */
void startTask100ms(void const * argument)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTask100ms */
  /* Infinite loop */
	volatile uint8_t taskCounts = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	73fb      	strb	r3, [r7, #15]
	for(;;)
	{
		//Task activities
		UART_printMsg("100ms Task!\n\r");
 8000690:	4810      	ldr	r0, [pc, #64]	; (80006d4 <startTask100ms+0x50>)
 8000692:	f005 fc7b 	bl	8005f8c <UART_printMsg>
		LED2_toggle();
 8000696:	f005 fc6d 	bl	8005f74 <LED2_toggle>

		//Caller for task500ms
		taskCounts = (uint8_t)((taskCounts+1) % 5);
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	1c5a      	adds	r2, r3, #1
 80006a0:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <startTask100ms+0x54>)
 80006a2:	fb83 1302 	smull	r1, r3, r3, r2
 80006a6:	1059      	asrs	r1, r3, #1
 80006a8:	17d3      	asrs	r3, r2, #31
 80006aa:	1ac9      	subs	r1, r1, r3
 80006ac:	460b      	mov	r3, r1
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	440b      	add	r3, r1
 80006b2:	1ad1      	subs	r1, r2, r3
 80006b4:	b2cb      	uxtb	r3, r1
 80006b6:	73fb      	strb	r3, [r7, #15]
		if(taskCounts==4) osThreadResume(task500msHandle);
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	2b04      	cmp	r3, #4
 80006be:	d104      	bne.n	80006ca <startTask100ms+0x46>
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <startTask100ms+0x58>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 ff37 	bl	8003538 <osThreadResume>
		osDelay(100);
 80006ca:	2064      	movs	r0, #100	; 0x64
 80006cc:	f002 fd1c 	bl	8003108 <osDelay>
		UART_printMsg("100ms Task!\n\r");
 80006d0:	e7de      	b.n	8000690 <startTask100ms+0xc>
 80006d2:	bf00      	nop
 80006d4:	08007e0c 	.word	0x08007e0c
 80006d8:	66666667 	.word	0x66666667
 80006dc:	20000098 	.word	0x20000098

080006e0 <startTask500ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTask500ms */
void startTask500ms(void const * argument)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTask500ms */
  /* Infinite loop */
  for(;;)
  {
	//Task activities
	LED1_toggle();
 80006e8:	f005 fc38 	bl	8005f5c <LED1_toggle>
	UART_printMsg("500ms Task!\n\r");
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <startTask500ms+0x20>)
 80006ee:	f005 fc4d 	bl	8005f8c <UART_printMsg>

	osThreadSuspend(task500msHandle);
 80006f2:	4b04      	ldr	r3, [pc, #16]	; (8000704 <startTask500ms+0x24>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 ff12 	bl	8003520 <osThreadSuspend>
	LED1_toggle();
 80006fc:	e7f4      	b.n	80006e8 <startTask500ms+0x8>
 80006fe:	bf00      	nop
 8000700:	08007e1c 	.word	0x08007e1c
 8000704:	20000098 	.word	0x20000098

08000708 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <MX_GPIO_Init+0x80>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a18      	ldr	r2, [pc, #96]	; (8000788 <MX_GPIO_Init+0x80>)
 8000728:	f043 0320 	orr.w	r3, r3, #32
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_GPIO_Init+0x80>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0320 	and.w	r3, r3, #32
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_GPIO_Init+0x80>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a11      	ldr	r2, [pc, #68]	; (8000788 <MX_GPIO_Init+0x80>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_GPIO_Init+0x80>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800075c:	480b      	ldr	r0, [pc, #44]	; (800078c <MX_GPIO_Init+0x84>)
 800075e:	f000 fd91 	bl	8001284 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000762:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800076c:	2301      	movs	r3, #1
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	4619      	mov	r1, r3
 800077a:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_GPIO_Init+0x84>)
 800077c:	f000 fbe6 	bl	8000f4c <HAL_GPIO_Init>

}
 8000780:	bf00      	nop
 8000782:	3720      	adds	r7, #32
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40021400 	.word	0x40021400

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000794:	f000 fa24 	bl	8000be0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000798:	f000 f816 	bl	80007c8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079c:	f7ff ffb4 	bl	8000708 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007a0:	f000 f97a 	bl	8000a98 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // ***** SEGGER SystemView configuration *****
  DWT->CTRL |= (1<<0); //Start CYCCNT for timestamp counting (Sozza)
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <main+0x34>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a06      	ldr	r2, [pc, #24]	; (80007c4 <main+0x34>)
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 80007b0:	f005 fc06 	bl	8005fc0 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80007b4:	f006 fb4a 	bl	8006e4c <SEGGER_SYSVIEW_Start>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80007b8:	f7ff ff0c 	bl	80005d4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007bc:	f002 fc50 	bl	8003060 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {}
 80007c0:	e7fe      	b.n	80007c0 <main+0x30>
 80007c2:	bf00      	nop
 80007c4:	e0001000 	.word	0xe0001000

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b094      	sub	sp, #80	; 0x50
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	2230      	movs	r2, #48	; 0x30
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f007 fa04 	bl	8007be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	4b28      	ldr	r3, [pc, #160]	; (8000894 <SystemClock_Config+0xcc>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f4:	4a27      	ldr	r2, [pc, #156]	; (8000894 <SystemClock_Config+0xcc>)
 80007f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fa:	6413      	str	r3, [r2, #64]	; 0x40
 80007fc:	4b25      	ldr	r3, [pc, #148]	; (8000894 <SystemClock_Config+0xcc>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	4b22      	ldr	r3, [pc, #136]	; (8000898 <SystemClock_Config+0xd0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a21      	ldr	r2, [pc, #132]	; (8000898 <SystemClock_Config+0xd0>)
 8000812:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <SystemClock_Config+0xd0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000824:	2302      	movs	r3, #2
 8000826:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000828:	2301      	movs	r3, #1
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082c:	2310      	movs	r3, #16
 800082e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000830:	2302      	movs	r3, #2
 8000832:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000834:	2300      	movs	r3, #0
 8000836:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000838:	2308      	movs	r3, #8
 800083a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800083c:	23a8      	movs	r3, #168	; 0xa8
 800083e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000840:	2302      	movs	r3, #2
 8000842:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000844:	2304      	movs	r3, #4
 8000846:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000848:	f107 0320 	add.w	r3, r7, #32
 800084c:	4618      	mov	r0, r3
 800084e:	f000 fd4d 	bl	80012ec <HAL_RCC_OscConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000858:	f000 f832 	bl	80008c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	230f      	movs	r3, #15
 800085e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000860:	2302      	movs	r3, #2
 8000862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000868:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800086c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800086e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000872:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2105      	movs	r1, #5
 800087a:	4618      	mov	r0, r3
 800087c:	f000 ffae 	bl	80017dc <HAL_RCC_ClockConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000886:	f000 f81b 	bl	80008c0 <Error_Handler>
  }
}
 800088a:	bf00      	nop
 800088c:	3750      	adds	r7, #80	; 0x50
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800
 8000898:	40007000 	.word	0x40007000

0800089c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d101      	bne.n	80008b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ae:	f000 f9b9 	bl	8000c24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40010000 	.word	0x40010000

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <Error_Handler+0x8>
	...

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_MspInit+0x54>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	4a11      	ldr	r2, [pc, #68]	; (8000920 <HAL_MspInit+0x54>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e0:	6453      	str	r3, [r2, #68]	; 0x44
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_MspInit+0x54>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <HAL_MspInit+0x54>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <HAL_MspInit+0x54>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <HAL_MspInit+0x54>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	210f      	movs	r1, #15
 800090e:	f06f 0001 	mvn.w	r0, #1
 8000912:	f000 fa5f 	bl	8000dd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800

08000924 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08c      	sub	sp, #48	; 0x30
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000934:	2200      	movs	r2, #0
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	2019      	movs	r0, #25
 800093a:	f000 fa4b 	bl	8000dd4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800093e:	2019      	movs	r0, #25
 8000940:	f000 fa64 	bl	8000e0c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <HAL_InitTick+0xa4>)
 800094a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094c:	4a1e      	ldr	r2, [pc, #120]	; (80009c8 <HAL_InitTick+0xa4>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6453      	str	r3, [r2, #68]	; 0x44
 8000954:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <HAL_InitTick+0xa4>)
 8000956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000960:	f107 0210 	add.w	r2, r7, #16
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4611      	mov	r1, r2
 800096a:	4618      	mov	r0, r3
 800096c:	f001 f916 	bl	8001b9c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000970:	f001 f900 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 8000974:	4603      	mov	r3, r0
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800097a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800097c:	4a13      	ldr	r2, [pc, #76]	; (80009cc <HAL_InitTick+0xa8>)
 800097e:	fba2 2303 	umull	r2, r3, r2, r3
 8000982:	0c9b      	lsrs	r3, r3, #18
 8000984:	3b01      	subs	r3, #1
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <HAL_InitTick+0xac>)
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <HAL_InitTick+0xb0>)
 800098c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <HAL_InitTick+0xac>)
 8000990:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000994:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000996:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <HAL_InitTick+0xac>)
 8000998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800099a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <HAL_InitTick+0xac>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <HAL_InitTick+0xac>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80009a8:	4809      	ldr	r0, [pc, #36]	; (80009d0 <HAL_InitTick+0xac>)
 80009aa:	f001 f929 	bl	8001c00 <HAL_TIM_Base_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d104      	bne.n	80009be <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80009b4:	4806      	ldr	r0, [pc, #24]	; (80009d0 <HAL_InitTick+0xac>)
 80009b6:	f001 f97d 	bl	8001cb4 <HAL_TIM_Base_Start_IT>
 80009ba:	4603      	mov	r3, r0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3730      	adds	r7, #48	; 0x30
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800
 80009cc:	431bde83 	.word	0x431bde83
 80009d0:	2000035c 	.word	0x2000035c
 80009d4:	40010000 	.word	0x40010000

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <NMI_Handler+0x4>

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <MemManage_Handler+0x4>

080009ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a0a:	f001 f9c3 	bl	8001d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000035c 	.word	0x2000035c

08000a18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	//SEGGER Trace ISR
	SEGGER_SYSVIEW_RecordEnterISR();
 8000a1e:	f006 fcdf 	bl	80073e0 <SEGGER_SYSVIEW_RecordEnterISR>

	//SEGGER Trace Character sent
	char USART_TX_SEGGER[2];
    USART_TX_SEGGER[0]= *(huart2.pTxBuffPtr);
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <USART2_IRQHandler+0x58>)
 8000a24:	6a1b      	ldr	r3, [r3, #32]
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	713b      	strb	r3, [r7, #4]
    USART_TX_SEGGER[1]= 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	717b      	strb	r3, [r7, #5]
 	SEGGER_SYSVIEW_Print((char*)&USART_TX_SEGGER);
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	4618      	mov	r0, r3
 8000a32:	f006 ff7d 	bl	8007930 <SEGGER_SYSVIEW_Print>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000a36:	f3ef 8211 	mrs	r2, BASEPRI
 8000a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a3e:	f383 8811 	msr	BASEPRI, r3
 8000a42:	f3bf 8f6f 	isb	sy
 8000a46:	f3bf 8f4f 	dsb	sy
 8000a4a:	60fa      	str	r2, [r7, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000a4e:	68fb      	ldr	r3, [r7, #12]

	// Disable other FreeRTOS interruptions while communicating to USART2
	UBaseType_t uxSavedInterruptStatus;
	uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 8000a50:	617b      	str	r3, [r7, #20]
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a52:	4807      	ldr	r0, [pc, #28]	; (8000a70 <USART2_IRQHandler+0x58>)
 8000a54:	f001 fc14 	bl	8002280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	SEGGER_SYSVIEW_RecordExitISR(); //SEGGER Trace
 8000a58:	f006 fd04 	bl	8007464 <SEGGER_SYSVIEW_RecordExitISR>
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000a66:	bf00      	nop
	taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);
  /* USER CODE END USART2_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200003a4 	.word	0x200003a4

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <SystemInit+0x20>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7e:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <SystemInit+0x20>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <MX_USART2_UART_Init+0x50>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ace:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ad2:	f001 fb43 	bl	800215c <HAL_UART_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000adc:	f7ff fef0 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200003a4 	.word	0x200003a4
 8000ae8:	40004400 	.word	0x40004400

08000aec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a1d      	ldr	r2, [pc, #116]	; (8000b80 <HAL_UART_MspInit+0x94>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d133      	bne.n	8000b76 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <HAL_UART_MspInit+0x98>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <HAL_UART_MspInit+0x98>)
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_UART_MspInit+0x98>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_UART_MspInit+0x98>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <HAL_UART_MspInit+0x98>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_UART_MspInit+0x98>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b46:	230c      	movs	r3, #12
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b56:	2307      	movs	r3, #7
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4809      	ldr	r0, [pc, #36]	; (8000b88 <HAL_UART_MspInit+0x9c>)
 8000b62:	f000 f9f3 	bl	8000f4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2105      	movs	r1, #5
 8000b6a:	2026      	movs	r0, #38	; 0x26
 8000b6c:	f000 f932 	bl	8000dd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b70:	2026      	movs	r0, #38	; 0x26
 8000b72:	f000 f94b 	bl	8000e0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b76:	bf00      	nop
 8000b78:	3728      	adds	r7, #40	; 0x28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40004400 	.word	0x40004400
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020000 	.word	0x40020000

08000b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b92:	490e      	ldr	r1, [pc, #56]	; (8000bcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b94:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ba8:	4c0b      	ldr	r4, [pc, #44]	; (8000bd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bb6:	f7ff ff5d 	bl	8000a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bba:	f006 ffcf 	bl	8007b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bbe:	f7ff fde7 	bl	8000790 <main>
  bx  lr    
 8000bc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000bd0:	08007f94 	.word	0x08007f94
  ldr r2, =_sbss
 8000bd4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000bd8:	200067c4 	.word	0x200067c4

08000bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <HAL_Init+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <HAL_Init+0x40>)
 8000bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <HAL_Init+0x40>)
 8000bf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_Init+0x40>)
 8000c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f8d8 	bl	8000dbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	200f      	movs	r0, #15
 8000c10:	f7ff fe88 	bl	8000924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fe5a 	bl	80008cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023c00 	.word	0x40023c00

08000c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_IncTick+0x20>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_IncTick+0x24>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <HAL_IncTick+0x24>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000008 	.word	0x20000008
 8000c48:	200003e8 	.word	0x200003e8

08000c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <HAL_GetTick+0x14>)
 8000c52:	681b      	ldr	r3, [r3, #0]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	200003e8 	.word	0x200003e8

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db0b      	blt.n	8000cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 021f 	and.w	r2, r3, #31
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <__NVIC_EnableIRQ+0x38>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	2001      	movs	r0, #1
 8000cea:	fa00 f202 	lsl.w	r2, r0, r2
 8000cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e100 	.word	0xe000e100

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0a      	blt.n	8000d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	490c      	ldr	r1, [pc, #48]	; (8000d50 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	440b      	add	r3, r1
 8000d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d2c:	e00a      	b.n	8000d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4908      	ldr	r1, [pc, #32]	; (8000d54 <__NVIC_SetPriority+0x50>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	761a      	strb	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	; 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f1c3 0307 	rsb	r3, r3, #7
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	bf28      	it	cs
 8000d76:	2304      	movcs	r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d902      	bls.n	8000d88 <NVIC_EncodePriority+0x30>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3b03      	subs	r3, #3
 8000d86:	e000      	b.n	8000d8a <NVIC_EncodePriority+0x32>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43da      	mvns	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	4313      	orrs	r3, r2
         );
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3724      	adds	r7, #36	; 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ff4c 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de6:	f7ff ff61 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000dea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	68b9      	ldr	r1, [r7, #8]
 8000df0:	6978      	ldr	r0, [r7, #20]
 8000df2:	f7ff ffb1 	bl	8000d58 <NVIC_EncodePriority>
 8000df6:	4602      	mov	r2, r0
 8000df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff80 	bl	8000d04 <__NVIC_SetPriority>
}
 8000e04:	bf00      	nop
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ff54 	bl	8000cc8 <__NVIC_EnableIRQ>
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e36:	f7ff ff09 	bl	8000c4c <HAL_GetTick>
 8000e3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d008      	beq.n	8000e5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2280      	movs	r2, #128	; 0x80
 8000e4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e052      	b.n	8000f00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 0216 	bic.w	r2, r2, #22
 8000e68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	695a      	ldr	r2, [r3, #20]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d103      	bne.n	8000e8a <HAL_DMA_Abort+0x62>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d007      	beq.n	8000e9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f022 0208 	bic.w	r2, r2, #8
 8000e98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 0201 	bic.w	r2, r2, #1
 8000ea8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eaa:	e013      	b.n	8000ed4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000eac:	f7ff fece 	bl	8000c4c <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b05      	cmp	r3, #5
 8000eb8:	d90c      	bls.n	8000ed4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2220      	movs	r2, #32
 8000ebe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e015      	b.n	8000f00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1e4      	bne.n	8000eac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ee6:	223f      	movs	r2, #63	; 0x3f
 8000ee8:	409a      	lsls	r2, r3
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d004      	beq.n	8000f26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2280      	movs	r2, #128	; 0x80
 8000f20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e00c      	b.n	8000f40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2205      	movs	r2, #5
 8000f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 0201 	bic.w	r2, r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
 8000f66:	e16b      	b.n	8001240 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	f040 815a 	bne.w	800123a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d005      	beq.n	8000f9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d130      	bne.n	8001000 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	2203      	movs	r2, #3
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	68da      	ldr	r2, [r3, #12]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	091b      	lsrs	r3, r3, #4
 8000fea:	f003 0201 	and.w	r2, r3, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b03      	cmp	r3, #3
 800100a:	d017      	beq.n	800103c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d123      	bne.n	8001090 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	08da      	lsrs	r2, r3, #3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3208      	adds	r2, #8
 8001050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	220f      	movs	r2, #15
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	691a      	ldr	r2, [r3, #16]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	08da      	lsrs	r2, r3, #3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3208      	adds	r2, #8
 800108a:	69b9      	ldr	r1, [r7, #24]
 800108c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0203 	and.w	r2, r3, #3
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 80b4 	beq.w	800123a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	4b60      	ldr	r3, [pc, #384]	; (8001258 <HAL_GPIO_Init+0x30c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a5f      	ldr	r2, [pc, #380]	; (8001258 <HAL_GPIO_Init+0x30c>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b5d      	ldr	r3, [pc, #372]	; (8001258 <HAL_GPIO_Init+0x30c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ee:	4a5b      	ldr	r2, [pc, #364]	; (800125c <HAL_GPIO_Init+0x310>)
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3302      	adds	r3, #2
 80010f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	220f      	movs	r2, #15
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a52      	ldr	r2, [pc, #328]	; (8001260 <HAL_GPIO_Init+0x314>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d02b      	beq.n	8001172 <HAL_GPIO_Init+0x226>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a51      	ldr	r2, [pc, #324]	; (8001264 <HAL_GPIO_Init+0x318>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d025      	beq.n	800116e <HAL_GPIO_Init+0x222>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a50      	ldr	r2, [pc, #320]	; (8001268 <HAL_GPIO_Init+0x31c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d01f      	beq.n	800116a <HAL_GPIO_Init+0x21e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4f      	ldr	r2, [pc, #316]	; (800126c <HAL_GPIO_Init+0x320>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d019      	beq.n	8001166 <HAL_GPIO_Init+0x21a>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4e      	ldr	r2, [pc, #312]	; (8001270 <HAL_GPIO_Init+0x324>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d013      	beq.n	8001162 <HAL_GPIO_Init+0x216>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4d      	ldr	r2, [pc, #308]	; (8001274 <HAL_GPIO_Init+0x328>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d00d      	beq.n	800115e <HAL_GPIO_Init+0x212>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4c      	ldr	r2, [pc, #304]	; (8001278 <HAL_GPIO_Init+0x32c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d007      	beq.n	800115a <HAL_GPIO_Init+0x20e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4b      	ldr	r2, [pc, #300]	; (800127c <HAL_GPIO_Init+0x330>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_GPIO_Init+0x20a>
 8001152:	2307      	movs	r3, #7
 8001154:	e00e      	b.n	8001174 <HAL_GPIO_Init+0x228>
 8001156:	2308      	movs	r3, #8
 8001158:	e00c      	b.n	8001174 <HAL_GPIO_Init+0x228>
 800115a:	2306      	movs	r3, #6
 800115c:	e00a      	b.n	8001174 <HAL_GPIO_Init+0x228>
 800115e:	2305      	movs	r3, #5
 8001160:	e008      	b.n	8001174 <HAL_GPIO_Init+0x228>
 8001162:	2304      	movs	r3, #4
 8001164:	e006      	b.n	8001174 <HAL_GPIO_Init+0x228>
 8001166:	2303      	movs	r3, #3
 8001168:	e004      	b.n	8001174 <HAL_GPIO_Init+0x228>
 800116a:	2302      	movs	r3, #2
 800116c:	e002      	b.n	8001174 <HAL_GPIO_Init+0x228>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <HAL_GPIO_Init+0x228>
 8001172:	2300      	movs	r3, #0
 8001174:	69fa      	ldr	r2, [r7, #28]
 8001176:	f002 0203 	and.w	r2, r2, #3
 800117a:	0092      	lsls	r2, r2, #2
 800117c:	4093      	lsls	r3, r2
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001184:	4935      	ldr	r1, [pc, #212]	; (800125c <HAL_GPIO_Init+0x310>)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	3302      	adds	r3, #2
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001192:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <HAL_GPIO_Init+0x334>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011b6:	4a32      	ldr	r2, [pc, #200]	; (8001280 <HAL_GPIO_Init+0x334>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011bc:	4b30      	ldr	r3, [pc, #192]	; (8001280 <HAL_GPIO_Init+0x334>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011e0:	4a27      	ldr	r2, [pc, #156]	; (8001280 <HAL_GPIO_Init+0x334>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <HAL_GPIO_Init+0x334>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800120a:	4a1d      	ldr	r2, [pc, #116]	; (8001280 <HAL_GPIO_Init+0x334>)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <HAL_GPIO_Init+0x334>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001234:	4a12      	ldr	r2, [pc, #72]	; (8001280 <HAL_GPIO_Init+0x334>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3301      	adds	r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	2b0f      	cmp	r3, #15
 8001244:	f67f ae90 	bls.w	8000f68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3724      	adds	r7, #36	; 0x24
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	40013800 	.word	0x40013800
 8001260:	40020000 	.word	0x40020000
 8001264:	40020400 	.word	0x40020400
 8001268:	40020800 	.word	0x40020800
 800126c:	40020c00 	.word	0x40020c00
 8001270:	40021000 	.word	0x40021000
 8001274:	40021400 	.word	0x40021400
 8001278:	40021800 	.word	0x40021800
 800127c:	40021c00 	.word	0x40021c00
 8001280:	40013c00 	.word	0x40013c00

08001284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
 8001290:	4613      	mov	r3, r2
 8001292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001294:	787b      	ldrb	r3, [r7, #1]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012a0:	e003      	b.n	80012aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012a2:	887b      	ldrh	r3, [r7, #2]
 80012a4:	041a      	lsls	r2, r3, #16
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	619a      	str	r2, [r3, #24]
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b085      	sub	sp, #20
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	460b      	mov	r3, r1
 80012c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012c8:	887a      	ldrh	r2, [r7, #2]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4013      	ands	r3, r2
 80012ce:	041a      	lsls	r2, r3, #16
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	400b      	ands	r3, r1
 80012d8:	431a      	orrs	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	619a      	str	r2, [r3, #24]
}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e267      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d075      	beq.n	80013f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800130a:	4b88      	ldr	r3, [pc, #544]	; (800152c <HAL_RCC_OscConfig+0x240>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	2b04      	cmp	r3, #4
 8001314:	d00c      	beq.n	8001330 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001316:	4b85      	ldr	r3, [pc, #532]	; (800152c <HAL_RCC_OscConfig+0x240>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800131e:	2b08      	cmp	r3, #8
 8001320:	d112      	bne.n	8001348 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001322:	4b82      	ldr	r3, [pc, #520]	; (800152c <HAL_RCC_OscConfig+0x240>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800132a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800132e:	d10b      	bne.n	8001348 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001330:	4b7e      	ldr	r3, [pc, #504]	; (800152c <HAL_RCC_OscConfig+0x240>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d05b      	beq.n	80013f4 <HAL_RCC_OscConfig+0x108>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d157      	bne.n	80013f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e242      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001350:	d106      	bne.n	8001360 <HAL_RCC_OscConfig+0x74>
 8001352:	4b76      	ldr	r3, [pc, #472]	; (800152c <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a75      	ldr	r2, [pc, #468]	; (800152c <HAL_RCC_OscConfig+0x240>)
 8001358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	e01d      	b.n	800139c <HAL_RCC_OscConfig+0xb0>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001368:	d10c      	bne.n	8001384 <HAL_RCC_OscConfig+0x98>
 800136a:	4b70      	ldr	r3, [pc, #448]	; (800152c <HAL_RCC_OscConfig+0x240>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a6f      	ldr	r2, [pc, #444]	; (800152c <HAL_RCC_OscConfig+0x240>)
 8001370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	4b6d      	ldr	r3, [pc, #436]	; (800152c <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a6c      	ldr	r2, [pc, #432]	; (800152c <HAL_RCC_OscConfig+0x240>)
 800137c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	e00b      	b.n	800139c <HAL_RCC_OscConfig+0xb0>
 8001384:	4b69      	ldr	r3, [pc, #420]	; (800152c <HAL_RCC_OscConfig+0x240>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a68      	ldr	r2, [pc, #416]	; (800152c <HAL_RCC_OscConfig+0x240>)
 800138a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b66      	ldr	r3, [pc, #408]	; (800152c <HAL_RCC_OscConfig+0x240>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a65      	ldr	r2, [pc, #404]	; (800152c <HAL_RCC_OscConfig+0x240>)
 8001396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d013      	beq.n	80013cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fc52 	bl	8000c4c <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff fc4e 	bl	8000c4c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	; 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e207      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013be:	4b5b      	ldr	r3, [pc, #364]	; (800152c <HAL_RCC_OscConfig+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0xc0>
 80013ca:	e014      	b.n	80013f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fc3e 	bl	8000c4c <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d4:	f7ff fc3a 	bl	8000c4c <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b64      	cmp	r3, #100	; 0x64
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e1f3      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e6:	4b51      	ldr	r3, [pc, #324]	; (800152c <HAL_RCC_OscConfig+0x240>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0xe8>
 80013f2:	e000      	b.n	80013f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d063      	beq.n	80014ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001402:	4b4a      	ldr	r3, [pc, #296]	; (800152c <HAL_RCC_OscConfig+0x240>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00b      	beq.n	8001426 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800140e:	4b47      	ldr	r3, [pc, #284]	; (800152c <HAL_RCC_OscConfig+0x240>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001416:	2b08      	cmp	r3, #8
 8001418:	d11c      	bne.n	8001454 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800141a:	4b44      	ldr	r3, [pc, #272]	; (800152c <HAL_RCC_OscConfig+0x240>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d116      	bne.n	8001454 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001426:	4b41      	ldr	r3, [pc, #260]	; (800152c <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <HAL_RCC_OscConfig+0x152>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d001      	beq.n	800143e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e1c7      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143e:	4b3b      	ldr	r3, [pc, #236]	; (800152c <HAL_RCC_OscConfig+0x240>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	4937      	ldr	r1, [pc, #220]	; (800152c <HAL_RCC_OscConfig+0x240>)
 800144e:	4313      	orrs	r3, r2
 8001450:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001452:	e03a      	b.n	80014ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d020      	beq.n	800149e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800145c:	4b34      	ldr	r3, [pc, #208]	; (8001530 <HAL_RCC_OscConfig+0x244>)
 800145e:	2201      	movs	r2, #1
 8001460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001462:	f7ff fbf3 	bl	8000c4c <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800146a:	f7ff fbef 	bl	8000c4c <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e1a8      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147c:	4b2b      	ldr	r3, [pc, #172]	; (800152c <HAL_RCC_OscConfig+0x240>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f0      	beq.n	800146a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001488:	4b28      	ldr	r3, [pc, #160]	; (800152c <HAL_RCC_OscConfig+0x240>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4925      	ldr	r1, [pc, #148]	; (800152c <HAL_RCC_OscConfig+0x240>)
 8001498:	4313      	orrs	r3, r2
 800149a:	600b      	str	r3, [r1, #0]
 800149c:	e015      	b.n	80014ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800149e:	4b24      	ldr	r3, [pc, #144]	; (8001530 <HAL_RCC_OscConfig+0x244>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a4:	f7ff fbd2 	bl	8000c4c <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ac:	f7ff fbce 	bl	8000c4c <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e187      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014be:	4b1b      	ldr	r3, [pc, #108]	; (800152c <HAL_RCC_OscConfig+0x240>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d036      	beq.n	8001544 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d016      	beq.n	800150c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_RCC_OscConfig+0x248>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e4:	f7ff fbb2 	bl	8000c4c <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ec:	f7ff fbae 	bl	8000c4c <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e167      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_RCC_OscConfig+0x240>)
 8001500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x200>
 800150a:	e01b      	b.n	8001544 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_RCC_OscConfig+0x248>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001512:	f7ff fb9b 	bl	8000c4c <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001518:	e00e      	b.n	8001538 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800151a:	f7ff fb97 	bl	8000c4c <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d907      	bls.n	8001538 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e150      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
 800152c:	40023800 	.word	0x40023800
 8001530:	42470000 	.word	0x42470000
 8001534:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001538:	4b88      	ldr	r3, [pc, #544]	; (800175c <HAL_RCC_OscConfig+0x470>)
 800153a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1ea      	bne.n	800151a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 8097 	beq.w	8001680 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001556:	4b81      	ldr	r3, [pc, #516]	; (800175c <HAL_RCC_OscConfig+0x470>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10f      	bne.n	8001582 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	4b7d      	ldr	r3, [pc, #500]	; (800175c <HAL_RCC_OscConfig+0x470>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	4a7c      	ldr	r2, [pc, #496]	; (800175c <HAL_RCC_OscConfig+0x470>)
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001570:	6413      	str	r3, [r2, #64]	; 0x40
 8001572:	4b7a      	ldr	r3, [pc, #488]	; (800175c <HAL_RCC_OscConfig+0x470>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800157e:	2301      	movs	r3, #1
 8001580:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001582:	4b77      	ldr	r3, [pc, #476]	; (8001760 <HAL_RCC_OscConfig+0x474>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158a:	2b00      	cmp	r3, #0
 800158c:	d118      	bne.n	80015c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800158e:	4b74      	ldr	r3, [pc, #464]	; (8001760 <HAL_RCC_OscConfig+0x474>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a73      	ldr	r2, [pc, #460]	; (8001760 <HAL_RCC_OscConfig+0x474>)
 8001594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800159a:	f7ff fb57 	bl	8000c4c <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a2:	f7ff fb53 	bl	8000c4c <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e10c      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b4:	4b6a      	ldr	r3, [pc, #424]	; (8001760 <HAL_RCC_OscConfig+0x474>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d106      	bne.n	80015d6 <HAL_RCC_OscConfig+0x2ea>
 80015c8:	4b64      	ldr	r3, [pc, #400]	; (800175c <HAL_RCC_OscConfig+0x470>)
 80015ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015cc:	4a63      	ldr	r2, [pc, #396]	; (800175c <HAL_RCC_OscConfig+0x470>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6713      	str	r3, [r2, #112]	; 0x70
 80015d4:	e01c      	b.n	8001610 <HAL_RCC_OscConfig+0x324>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b05      	cmp	r3, #5
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x30c>
 80015de:	4b5f      	ldr	r3, [pc, #380]	; (800175c <HAL_RCC_OscConfig+0x470>)
 80015e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e2:	4a5e      	ldr	r2, [pc, #376]	; (800175c <HAL_RCC_OscConfig+0x470>)
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ea:	4b5c      	ldr	r3, [pc, #368]	; (800175c <HAL_RCC_OscConfig+0x470>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ee:	4a5b      	ldr	r2, [pc, #364]	; (800175c <HAL_RCC_OscConfig+0x470>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6713      	str	r3, [r2, #112]	; 0x70
 80015f6:	e00b      	b.n	8001610 <HAL_RCC_OscConfig+0x324>
 80015f8:	4b58      	ldr	r3, [pc, #352]	; (800175c <HAL_RCC_OscConfig+0x470>)
 80015fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fc:	4a57      	ldr	r2, [pc, #348]	; (800175c <HAL_RCC_OscConfig+0x470>)
 80015fe:	f023 0301 	bic.w	r3, r3, #1
 8001602:	6713      	str	r3, [r2, #112]	; 0x70
 8001604:	4b55      	ldr	r3, [pc, #340]	; (800175c <HAL_RCC_OscConfig+0x470>)
 8001606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001608:	4a54      	ldr	r2, [pc, #336]	; (800175c <HAL_RCC_OscConfig+0x470>)
 800160a:	f023 0304 	bic.w	r3, r3, #4
 800160e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d015      	beq.n	8001644 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001618:	f7ff fb18 	bl	8000c4c <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161e:	e00a      	b.n	8001636 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001620:	f7ff fb14 	bl	8000c4c <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f241 3288 	movw	r2, #5000	; 0x1388
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e0cb      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001636:	4b49      	ldr	r3, [pc, #292]	; (800175c <HAL_RCC_OscConfig+0x470>)
 8001638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0ee      	beq.n	8001620 <HAL_RCC_OscConfig+0x334>
 8001642:	e014      	b.n	800166e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001644:	f7ff fb02 	bl	8000c4c <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800164a:	e00a      	b.n	8001662 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800164c:	f7ff fafe 	bl	8000c4c <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	f241 3288 	movw	r2, #5000	; 0x1388
 800165a:	4293      	cmp	r3, r2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e0b5      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001662:	4b3e      	ldr	r3, [pc, #248]	; (800175c <HAL_RCC_OscConfig+0x470>)
 8001664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1ee      	bne.n	800164c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d105      	bne.n	8001680 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001674:	4b39      	ldr	r3, [pc, #228]	; (800175c <HAL_RCC_OscConfig+0x470>)
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	4a38      	ldr	r2, [pc, #224]	; (800175c <HAL_RCC_OscConfig+0x470>)
 800167a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800167e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 80a1 	beq.w	80017cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800168a:	4b34      	ldr	r3, [pc, #208]	; (800175c <HAL_RCC_OscConfig+0x470>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	2b08      	cmp	r3, #8
 8001694:	d05c      	beq.n	8001750 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d141      	bne.n	8001722 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169e:	4b31      	ldr	r3, [pc, #196]	; (8001764 <HAL_RCC_OscConfig+0x478>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fad2 	bl	8000c4c <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ac:	f7ff face 	bl	8000c4c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e087      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016be:	4b27      	ldr	r3, [pc, #156]	; (800175c <HAL_RCC_OscConfig+0x470>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69da      	ldr	r2, [r3, #28]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	019b      	lsls	r3, r3, #6
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e0:	085b      	lsrs	r3, r3, #1
 80016e2:	3b01      	subs	r3, #1
 80016e4:	041b      	lsls	r3, r3, #16
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	061b      	lsls	r3, r3, #24
 80016ee:	491b      	ldr	r1, [pc, #108]	; (800175c <HAL_RCC_OscConfig+0x470>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <HAL_RCC_OscConfig+0x478>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7ff faa7 	bl	8000c4c <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001702:	f7ff faa3 	bl	8000c4c <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e05c      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <HAL_RCC_OscConfig+0x470>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x416>
 8001720:	e054      	b.n	80017cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <HAL_RCC_OscConfig+0x478>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7ff fa90 	bl	8000c4c <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001730:	f7ff fa8c 	bl	8000c4c <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e045      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_RCC_OscConfig+0x470>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x444>
 800174e:	e03d      	b.n	80017cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d107      	bne.n	8001768 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e038      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
 800175c:	40023800 	.word	0x40023800
 8001760:	40007000 	.word	0x40007000
 8001764:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001768:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <HAL_RCC_OscConfig+0x4ec>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d028      	beq.n	80017c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d121      	bne.n	80017c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178e:	429a      	cmp	r2, r3
 8001790:	d11a      	bne.n	80017c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001798:	4013      	ands	r3, r2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800179e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d111      	bne.n	80017c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ae:	085b      	lsrs	r3, r3, #1
 80017b0:	3b01      	subs	r3, #1
 80017b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d107      	bne.n	80017c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800

080017dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0cc      	b.n	800198a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017f0:	4b68      	ldr	r3, [pc, #416]	; (8001994 <HAL_RCC_ClockConfig+0x1b8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d90c      	bls.n	8001818 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	4b65      	ldr	r3, [pc, #404]	; (8001994 <HAL_RCC_ClockConfig+0x1b8>)
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001806:	4b63      	ldr	r3, [pc, #396]	; (8001994 <HAL_RCC_ClockConfig+0x1b8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e0b8      	b.n	800198a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d020      	beq.n	8001866 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001830:	4b59      	ldr	r3, [pc, #356]	; (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	4a58      	ldr	r2, [pc, #352]	; (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800183a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	4a52      	ldr	r2, [pc, #328]	; (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001852:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001854:	4b50      	ldr	r3, [pc, #320]	; (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	494d      	ldr	r1, [pc, #308]	; (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	4313      	orrs	r3, r2
 8001864:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d044      	beq.n	80018fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d107      	bne.n	800188a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187a:	4b47      	ldr	r3, [pc, #284]	; (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d119      	bne.n	80018ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e07f      	b.n	800198a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d003      	beq.n	800189a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001896:	2b03      	cmp	r3, #3
 8001898:	d107      	bne.n	80018aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189a:	4b3f      	ldr	r3, [pc, #252]	; (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e06f      	b.n	800198a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018aa:	4b3b      	ldr	r3, [pc, #236]	; (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e067      	b.n	800198a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ba:	4b37      	ldr	r3, [pc, #220]	; (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f023 0203 	bic.w	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	4934      	ldr	r1, [pc, #208]	; (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018cc:	f7ff f9be 	bl	8000c4c <HAL_GetTick>
 80018d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d2:	e00a      	b.n	80018ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d4:	f7ff f9ba 	bl	8000c4c <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e04f      	b.n	800198a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ea:	4b2b      	ldr	r3, [pc, #172]	; (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 020c 	and.w	r2, r3, #12
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d1eb      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018fc:	4b25      	ldr	r3, [pc, #148]	; (8001994 <HAL_RCC_ClockConfig+0x1b8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d20c      	bcs.n	8001924 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b22      	ldr	r3, [pc, #136]	; (8001994 <HAL_RCC_ClockConfig+0x1b8>)
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <HAL_RCC_ClockConfig+0x1b8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e032      	b.n	800198a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	4916      	ldr	r1, [pc, #88]	; (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	4313      	orrs	r3, r2
 8001940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d009      	beq.n	8001962 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	490e      	ldr	r1, [pc, #56]	; (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	4313      	orrs	r3, r2
 8001960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001962:	f000 f821 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 8001966:	4602      	mov	r2, r0
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	490a      	ldr	r1, [pc, #40]	; (800199c <HAL_RCC_ClockConfig+0x1c0>)
 8001974:	5ccb      	ldrb	r3, [r1, r3]
 8001976:	fa22 f303 	lsr.w	r3, r2, r3
 800197a:	4a09      	ldr	r2, [pc, #36]	; (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 800197c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe ffce 	bl	8000924 <HAL_InitTick>

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023c00 	.word	0x40023c00
 8001998:	40023800 	.word	0x40023800
 800199c:	08007ef8 	.word	0x08007ef8
 80019a0:	20000000 	.word	0x20000000
 80019a4:	20000004 	.word	0x20000004

080019a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019ac:	b090      	sub	sp, #64	; 0x40
 80019ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	637b      	str	r3, [r7, #52]	; 0x34
 80019b4:	2300      	movs	r3, #0
 80019b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019b8:	2300      	movs	r3, #0
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019c0:	4b59      	ldr	r3, [pc, #356]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 030c 	and.w	r3, r3, #12
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d00d      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0x40>
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	f200 80a1 	bhi.w	8001b14 <HAL_RCC_GetSysClockFreq+0x16c>
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <HAL_RCC_GetSysClockFreq+0x34>
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d003      	beq.n	80019e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80019da:	e09b      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019dc:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x184>)
 80019de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80019e0:	e09b      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019e2:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x188>)
 80019e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019e6:	e098      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019e8:	4b4f      	ldr	r3, [pc, #316]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019f2:	4b4d      	ldr	r3, [pc, #308]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d028      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fe:	4b4a      	ldr	r3, [pc, #296]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	099b      	lsrs	r3, r3, #6
 8001a04:	2200      	movs	r2, #0
 8001a06:	623b      	str	r3, [r7, #32]
 8001a08:	627a      	str	r2, [r7, #36]	; 0x24
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a10:	2100      	movs	r1, #0
 8001a12:	4b47      	ldr	r3, [pc, #284]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a14:	fb03 f201 	mul.w	r2, r3, r1
 8001a18:	2300      	movs	r3, #0
 8001a1a:	fb00 f303 	mul.w	r3, r0, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a43      	ldr	r2, [pc, #268]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a22:	fba0 1202 	umull	r1, r2, r0, r2
 8001a26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a28:	460a      	mov	r2, r1
 8001a2a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a2e:	4413      	add	r3, r2
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a34:	2200      	movs	r2, #0
 8001a36:	61bb      	str	r3, [r7, #24]
 8001a38:	61fa      	str	r2, [r7, #28]
 8001a3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a42:	f7fe fc17 	bl	8000274 <__aeabi_uldivmod>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a4e:	e053      	b.n	8001af8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a50:	4b35      	ldr	r3, [pc, #212]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	099b      	lsrs	r3, r3, #6
 8001a56:	2200      	movs	r2, #0
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	617a      	str	r2, [r7, #20]
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a62:	f04f 0b00 	mov.w	fp, #0
 8001a66:	4652      	mov	r2, sl
 8001a68:	465b      	mov	r3, fp
 8001a6a:	f04f 0000 	mov.w	r0, #0
 8001a6e:	f04f 0100 	mov.w	r1, #0
 8001a72:	0159      	lsls	r1, r3, #5
 8001a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a78:	0150      	lsls	r0, r2, #5
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	ebb2 080a 	subs.w	r8, r2, sl
 8001a82:	eb63 090b 	sbc.w	r9, r3, fp
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a9a:	ebb2 0408 	subs.w	r4, r2, r8
 8001a9e:	eb63 0509 	sbc.w	r5, r3, r9
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	00eb      	lsls	r3, r5, #3
 8001aac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ab0:	00e2      	lsls	r2, r4, #3
 8001ab2:	4614      	mov	r4, r2
 8001ab4:	461d      	mov	r5, r3
 8001ab6:	eb14 030a 	adds.w	r3, r4, sl
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	eb45 030b 	adc.w	r3, r5, fp
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ace:	4629      	mov	r1, r5
 8001ad0:	028b      	lsls	r3, r1, #10
 8001ad2:	4621      	mov	r1, r4
 8001ad4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ad8:	4621      	mov	r1, r4
 8001ada:	028a      	lsls	r2, r1, #10
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	60fa      	str	r2, [r7, #12]
 8001ae8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001aec:	f7fe fbc2 	bl	8000274 <__aeabi_uldivmod>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4613      	mov	r3, r2
 8001af6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	0c1b      	lsrs	r3, r3, #16
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	3301      	adds	r3, #1
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001b08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b12:	e002      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x184>)
 8001b16:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3740      	adds	r7, #64	; 0x40
 8001b20:	46bd      	mov	sp, r7
 8001b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	00f42400 	.word	0x00f42400
 8001b30:	017d7840 	.word	0x017d7840

08001b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20000000 	.word	0x20000000

08001b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b50:	f7ff fff0 	bl	8001b34 <HAL_RCC_GetHCLKFreq>
 8001b54:	4602      	mov	r2, r0
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	0a9b      	lsrs	r3, r3, #10
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	4903      	ldr	r1, [pc, #12]	; (8001b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b62:	5ccb      	ldrb	r3, [r1, r3]
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	08007f08 	.word	0x08007f08

08001b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b78:	f7ff ffdc 	bl	8001b34 <HAL_RCC_GetHCLKFreq>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	0b5b      	lsrs	r3, r3, #13
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	4903      	ldr	r1, [pc, #12]	; (8001b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b8a:	5ccb      	ldrb	r3, [r1, r3]
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40023800 	.word	0x40023800
 8001b98:	08007f08 	.word	0x08007f08

08001b9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	220f      	movs	r2, #15
 8001baa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 0203 	and.w	r2, r3, #3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	08db      	lsrs	r3, r3, #3
 8001bd6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bde:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <HAL_RCC_GetClockConfig+0x60>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0207 	and.w	r2, r3, #7
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	601a      	str	r2, [r3, #0]
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40023c00 	.word	0x40023c00

08001c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e041      	b.n	8001c96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d106      	bne.n	8001c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f839 	bl	8001c9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4610      	mov	r0, r2
 8001c40:	f000 f9d8 	bl	8001ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d001      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e04e      	b.n	8001d6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0201 	orr.w	r2, r2, #1
 8001ce2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a23      	ldr	r2, [pc, #140]	; (8001d78 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d022      	beq.n	8001d34 <HAL_TIM_Base_Start_IT+0x80>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf6:	d01d      	beq.n	8001d34 <HAL_TIM_Base_Start_IT+0x80>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <HAL_TIM_Base_Start_IT+0xc8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d018      	beq.n	8001d34 <HAL_TIM_Base_Start_IT+0x80>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a1e      	ldr	r2, [pc, #120]	; (8001d80 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d013      	beq.n	8001d34 <HAL_TIM_Base_Start_IT+0x80>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a1c      	ldr	r2, [pc, #112]	; (8001d84 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d00e      	beq.n	8001d34 <HAL_TIM_Base_Start_IT+0x80>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a1b      	ldr	r2, [pc, #108]	; (8001d88 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d009      	beq.n	8001d34 <HAL_TIM_Base_Start_IT+0x80>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a19      	ldr	r2, [pc, #100]	; (8001d8c <HAL_TIM_Base_Start_IT+0xd8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d004      	beq.n	8001d34 <HAL_TIM_Base_Start_IT+0x80>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a18      	ldr	r2, [pc, #96]	; (8001d90 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d111      	bne.n	8001d58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b06      	cmp	r3, #6
 8001d44:	d010      	beq.n	8001d68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f042 0201 	orr.w	r2, r2, #1
 8001d54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d56:	e007      	b.n	8001d68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0201 	orr.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40010000 	.word	0x40010000
 8001d7c:	40000400 	.word	0x40000400
 8001d80:	40000800 	.word	0x40000800
 8001d84:	40000c00 	.word	0x40000c00
 8001d88:	40010400 	.word	0x40010400
 8001d8c:	40014000 	.word	0x40014000
 8001d90:	40001800 	.word	0x40001800

08001d94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d122      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d11b      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0202 	mvn.w	r2, #2
 8001dc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f8ee 	bl	8001fb8 <HAL_TIM_IC_CaptureCallback>
 8001ddc:	e005      	b.n	8001dea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f8e0 	bl	8001fa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f8f1 	bl	8001fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d122      	bne.n	8001e44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d11b      	bne.n	8001e44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0204 	mvn.w	r2, #4
 8001e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2202      	movs	r2, #2
 8001e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f8c4 	bl	8001fb8 <HAL_TIM_IC_CaptureCallback>
 8001e30:	e005      	b.n	8001e3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f8b6 	bl	8001fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f8c7 	bl	8001fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d122      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d11b      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0208 	mvn.w	r2, #8
 8001e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f89a 	bl	8001fb8 <HAL_TIM_IC_CaptureCallback>
 8001e84:	e005      	b.n	8001e92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f88c 	bl	8001fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f89d 	bl	8001fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	2b10      	cmp	r3, #16
 8001ea4:	d122      	bne.n	8001eec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 0310 	and.w	r3, r3, #16
 8001eb0:	2b10      	cmp	r3, #16
 8001eb2:	d11b      	bne.n	8001eec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0210 	mvn.w	r2, #16
 8001ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2208      	movs	r2, #8
 8001ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f870 	bl	8001fb8 <HAL_TIM_IC_CaptureCallback>
 8001ed8:	e005      	b.n	8001ee6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f862 	bl	8001fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f873 	bl	8001fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d10e      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d107      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0201 	mvn.w	r2, #1
 8001f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7fe fcc2 	bl	800089c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f22:	2b80      	cmp	r3, #128	; 0x80
 8001f24:	d10e      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f30:	2b80      	cmp	r3, #128	; 0x80
 8001f32:	d107      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f902 	bl	8002148 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4e:	2b40      	cmp	r3, #64	; 0x40
 8001f50:	d10e      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5c:	2b40      	cmp	r3, #64	; 0x40
 8001f5e:	d107      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f838 	bl	8001fe0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	f003 0320 	and.w	r3, r3, #32
 8001f7a:	2b20      	cmp	r3, #32
 8001f7c:	d10e      	bne.n	8001f9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f003 0320 	and.w	r3, r3, #32
 8001f88:	2b20      	cmp	r3, #32
 8001f8a:	d107      	bne.n	8001f9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f06f 0220 	mvn.w	r2, #32
 8001f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f8cc 	bl	8002134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a40      	ldr	r2, [pc, #256]	; (8002108 <TIM_Base_SetConfig+0x114>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d013      	beq.n	8002034 <TIM_Base_SetConfig+0x40>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002012:	d00f      	beq.n	8002034 <TIM_Base_SetConfig+0x40>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a3d      	ldr	r2, [pc, #244]	; (800210c <TIM_Base_SetConfig+0x118>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d00b      	beq.n	8002034 <TIM_Base_SetConfig+0x40>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a3c      	ldr	r2, [pc, #240]	; (8002110 <TIM_Base_SetConfig+0x11c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d007      	beq.n	8002034 <TIM_Base_SetConfig+0x40>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3b      	ldr	r2, [pc, #236]	; (8002114 <TIM_Base_SetConfig+0x120>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d003      	beq.n	8002034 <TIM_Base_SetConfig+0x40>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a3a      	ldr	r2, [pc, #232]	; (8002118 <TIM_Base_SetConfig+0x124>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d108      	bne.n	8002046 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800203a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4313      	orrs	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a2f      	ldr	r2, [pc, #188]	; (8002108 <TIM_Base_SetConfig+0x114>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d02b      	beq.n	80020a6 <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002054:	d027      	beq.n	80020a6 <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a2c      	ldr	r2, [pc, #176]	; (800210c <TIM_Base_SetConfig+0x118>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d023      	beq.n	80020a6 <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a2b      	ldr	r2, [pc, #172]	; (8002110 <TIM_Base_SetConfig+0x11c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d01f      	beq.n	80020a6 <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a2a      	ldr	r2, [pc, #168]	; (8002114 <TIM_Base_SetConfig+0x120>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d01b      	beq.n	80020a6 <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a29      	ldr	r2, [pc, #164]	; (8002118 <TIM_Base_SetConfig+0x124>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d017      	beq.n	80020a6 <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a28      	ldr	r2, [pc, #160]	; (800211c <TIM_Base_SetConfig+0x128>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d013      	beq.n	80020a6 <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a27      	ldr	r2, [pc, #156]	; (8002120 <TIM_Base_SetConfig+0x12c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00f      	beq.n	80020a6 <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a26      	ldr	r2, [pc, #152]	; (8002124 <TIM_Base_SetConfig+0x130>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00b      	beq.n	80020a6 <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a25      	ldr	r2, [pc, #148]	; (8002128 <TIM_Base_SetConfig+0x134>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d007      	beq.n	80020a6 <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a24      	ldr	r2, [pc, #144]	; (800212c <TIM_Base_SetConfig+0x138>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d003      	beq.n	80020a6 <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a23      	ldr	r2, [pc, #140]	; (8002130 <TIM_Base_SetConfig+0x13c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d108      	bne.n	80020b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <TIM_Base_SetConfig+0x114>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d003      	beq.n	80020ec <TIM_Base_SetConfig+0xf8>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a0c      	ldr	r2, [pc, #48]	; (8002118 <TIM_Base_SetConfig+0x124>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d103      	bne.n	80020f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	615a      	str	r2, [r3, #20]
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40010000 	.word	0x40010000
 800210c:	40000400 	.word	0x40000400
 8002110:	40000800 	.word	0x40000800
 8002114:	40000c00 	.word	0x40000c00
 8002118:	40010400 	.word	0x40010400
 800211c:	40014000 	.word	0x40014000
 8002120:	40014400 	.word	0x40014400
 8002124:	40014800 	.word	0x40014800
 8002128:	40001800 	.word	0x40001800
 800212c:	40001c00 	.word	0x40001c00
 8002130:	40002000 	.word	0x40002000

08002134 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e03f      	b.n	80021ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7fe fcb2 	bl	8000aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2224      	movs	r2, #36	; 0x24
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800219e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 fcbf 	bl	8002b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b085      	sub	sp, #20
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	4613      	mov	r3, r2
 8002202:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b20      	cmp	r3, #32
 800220e:	d130      	bne.n	8002272 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <HAL_UART_Transmit_IT+0x26>
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e029      	b.n	8002274 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002226:	2b01      	cmp	r3, #1
 8002228:	d101      	bne.n	800222e <HAL_UART_Transmit_IT+0x38>
 800222a:	2302      	movs	r3, #2
 800222c:	e022      	b.n	8002274 <HAL_UART_Transmit_IT+0x7e>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	88fa      	ldrh	r2, [r7, #6]
 8002240:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	88fa      	ldrh	r2, [r7, #6]
 8002246:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2221      	movs	r2, #33	; 0x21
 8002252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800226c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	e000      	b.n	8002274 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002272:	2302      	movs	r3, #2
  }
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b0ba      	sub	sp, #232	; 0xe8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80022be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10f      	bne.n	80022e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d009      	beq.n	80022e6 <HAL_UART_IRQHandler+0x66>
 80022d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022d6:	f003 0320 	and.w	r3, r3, #32
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fb65 	bl	80029ae <UART_Receive_IT>
      return;
 80022e4:	e256      	b.n	8002794 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80022e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 80de 	beq.w	80024ac <HAL_UART_IRQHandler+0x22c>
 80022f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d106      	bne.n	800230a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002300:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 80d1 	beq.w	80024ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800230a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00b      	beq.n	800232e <HAL_UART_IRQHandler+0xae>
 8002316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800231a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f043 0201 	orr.w	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800232e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00b      	beq.n	8002352 <HAL_UART_IRQHandler+0xd2>
 800233a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f043 0202 	orr.w	r2, r3, #2
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00b      	beq.n	8002376 <HAL_UART_IRQHandler+0xf6>
 800235e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f043 0204 	orr.w	r2, r3, #4
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d011      	beq.n	80023a6 <HAL_UART_IRQHandler+0x126>
 8002382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	2b00      	cmp	r3, #0
 800238c:	d105      	bne.n	800239a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800238e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d005      	beq.n	80023a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f043 0208 	orr.w	r2, r3, #8
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 81ed 	beq.w	800278a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_UART_IRQHandler+0x14e>
 80023bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 faf0 	bl	80029ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d8:	2b40      	cmp	r3, #64	; 0x40
 80023da:	bf0c      	ite	eq
 80023dc:	2301      	moveq	r3, #1
 80023de:	2300      	movne	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d103      	bne.n	80023fa <HAL_UART_IRQHandler+0x17a>
 80023f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d04f      	beq.n	800249a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f9f8 	bl	80027f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240a:	2b40      	cmp	r3, #64	; 0x40
 800240c:	d141      	bne.n	8002492 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	3314      	adds	r3, #20
 8002414:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002418:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800241c:	e853 3f00 	ldrex	r3, [r3]
 8002420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002424:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800242c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	3314      	adds	r3, #20
 8002436:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800243a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800243e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002442:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002446:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800244a:	e841 2300 	strex	r3, r2, [r1]
 800244e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1d9      	bne.n	800240e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245e:	2b00      	cmp	r3, #0
 8002460:	d013      	beq.n	800248a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002466:	4a7d      	ldr	r2, [pc, #500]	; (800265c <HAL_UART_IRQHandler+0x3dc>)
 8002468:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fd4a 	bl	8000f08 <HAL_DMA_Abort_IT>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d016      	beq.n	80024a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002484:	4610      	mov	r0, r2
 8002486:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002488:	e00e      	b.n	80024a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f99a 	bl	80027c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002490:	e00a      	b.n	80024a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f996 	bl	80027c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002498:	e006      	b.n	80024a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f992 	bl	80027c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80024a6:	e170      	b.n	800278a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a8:	bf00      	nop
    return;
 80024aa:	e16e      	b.n	800278a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	f040 814a 	bne.w	800274a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80024b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 8143 	beq.w	800274a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80024c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 813c 	beq.w	800274a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	2b40      	cmp	r3, #64	; 0x40
 80024f4:	f040 80b4 	bne.w	8002660 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002504:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8140 	beq.w	800278e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002516:	429a      	cmp	r2, r3
 8002518:	f080 8139 	bcs.w	800278e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002522:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800252e:	f000 8088 	beq.w	8002642 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	330c      	adds	r3, #12
 8002538:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800253c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002540:	e853 3f00 	ldrex	r3, [r3]
 8002544:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002548:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800254c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002550:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	330c      	adds	r3, #12
 800255a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800255e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002566:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800256a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800256e:	e841 2300 	strex	r3, r2, [r1]
 8002572:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002576:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1d9      	bne.n	8002532 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	3314      	adds	r3, #20
 8002584:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002588:	e853 3f00 	ldrex	r3, [r3]
 800258c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800258e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	3314      	adds	r3, #20
 800259e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80025a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80025aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80025ae:	e841 2300 	strex	r3, r2, [r1]
 80025b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80025b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1e1      	bne.n	800257e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	3314      	adds	r3, #20
 80025c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025c4:	e853 3f00 	ldrex	r3, [r3]
 80025c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80025ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3314      	adds	r3, #20
 80025da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80025de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80025e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80025e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025e6:	e841 2300 	strex	r3, r2, [r1]
 80025ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80025ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1e3      	bne.n	80025ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	330c      	adds	r3, #12
 8002606:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800260a:	e853 3f00 	ldrex	r3, [r3]
 800260e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002612:	f023 0310 	bic.w	r3, r3, #16
 8002616:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	330c      	adds	r3, #12
 8002620:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002624:	65ba      	str	r2, [r7, #88]	; 0x58
 8002626:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002628:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800262a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800262c:	e841 2300 	strex	r3, r2, [r1]
 8002630:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1e3      	bne.n	8002600 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe fbf3 	bl	8000e28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800264a:	b29b      	uxth	r3, r3
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	b29b      	uxth	r3, r3
 8002650:	4619      	mov	r1, r3
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f8c0 	bl	80027d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002658:	e099      	b.n	800278e <HAL_UART_IRQHandler+0x50e>
 800265a:	bf00      	nop
 800265c:	080028b7 	.word	0x080028b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002668:	b29b      	uxth	r3, r3
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 808b 	beq.w	8002792 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800267c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 8086 	beq.w	8002792 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	330c      	adds	r3, #12
 800268c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002690:	e853 3f00 	ldrex	r3, [r3]
 8002694:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002698:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800269c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	330c      	adds	r3, #12
 80026a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80026aa:	647a      	str	r2, [r7, #68]	; 0x44
 80026ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80026b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026b2:	e841 2300 	strex	r3, r2, [r1]
 80026b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80026b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1e3      	bne.n	8002686 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	3314      	adds	r3, #20
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	e853 3f00 	ldrex	r3, [r3]
 80026cc:	623b      	str	r3, [r7, #32]
   return(result);
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	f023 0301 	bic.w	r3, r3, #1
 80026d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	3314      	adds	r3, #20
 80026de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80026e2:	633a      	str	r2, [r7, #48]	; 0x30
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ea:	e841 2300 	strex	r3, r2, [r1]
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1e3      	bne.n	80026be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	330c      	adds	r3, #12
 800270a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	e853 3f00 	ldrex	r3, [r3]
 8002712:	60fb      	str	r3, [r7, #12]
   return(result);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0310 	bic.w	r3, r3, #16
 800271a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	330c      	adds	r3, #12
 8002724:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002728:	61fa      	str	r2, [r7, #28]
 800272a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272c:	69b9      	ldr	r1, [r7, #24]
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	e841 2300 	strex	r3, r2, [r1]
 8002734:	617b      	str	r3, [r7, #20]
   return(result);
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1e3      	bne.n	8002704 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800273c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002740:	4619      	mov	r1, r3
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f848 	bl	80027d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002748:	e023      	b.n	8002792 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800274a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800274e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002752:	2b00      	cmp	r3, #0
 8002754:	d009      	beq.n	800276a <HAL_UART_IRQHandler+0x4ea>
 8002756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800275a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f8bb 	bl	80028de <UART_Transmit_IT>
    return;
 8002768:	e014      	b.n	8002794 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800276a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800276e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00e      	beq.n	8002794 <HAL_UART_IRQHandler+0x514>
 8002776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800277a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f8fb 	bl	800297e <UART_EndTransmit_IT>
    return;
 8002788:	e004      	b.n	8002794 <HAL_UART_IRQHandler+0x514>
    return;
 800278a:	bf00      	nop
 800278c:	e002      	b.n	8002794 <HAL_UART_IRQHandler+0x514>
      return;
 800278e:	bf00      	nop
 8002790:	e000      	b.n	8002794 <HAL_UART_IRQHandler+0x514>
      return;
 8002792:	bf00      	nop
  }
}
 8002794:	37e8      	adds	r7, #232	; 0xe8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop

0800279c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b095      	sub	sp, #84	; 0x54
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	330c      	adds	r3, #12
 80027fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002802:	e853 3f00 	ldrex	r3, [r3]
 8002806:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800280e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	330c      	adds	r3, #12
 8002816:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002818:	643a      	str	r2, [r7, #64]	; 0x40
 800281a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800281c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800281e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002820:	e841 2300 	strex	r3, r2, [r1]
 8002824:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1e5      	bne.n	80027f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	3314      	adds	r3, #20
 8002832:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	e853 3f00 	ldrex	r3, [r3]
 800283a:	61fb      	str	r3, [r7, #28]
   return(result);
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	64bb      	str	r3, [r7, #72]	; 0x48
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	3314      	adds	r3, #20
 800284a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800284c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800284e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002854:	e841 2300 	strex	r3, r2, [r1]
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1e5      	bne.n	800282c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	2b01      	cmp	r3, #1
 8002866:	d119      	bne.n	800289c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	330c      	adds	r3, #12
 800286e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	e853 3f00 	ldrex	r3, [r3]
 8002876:	60bb      	str	r3, [r7, #8]
   return(result);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f023 0310 	bic.w	r3, r3, #16
 800287e:	647b      	str	r3, [r7, #68]	; 0x44
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	330c      	adds	r3, #12
 8002886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002888:	61ba      	str	r2, [r7, #24]
 800288a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800288c:	6979      	ldr	r1, [r7, #20]
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	e841 2300 	strex	r3, r2, [r1]
 8002894:	613b      	str	r3, [r7, #16]
   return(result);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1e5      	bne.n	8002868 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80028aa:	bf00      	nop
 80028ac:	3754      	adds	r7, #84	; 0x54
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b084      	sub	sp, #16
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f7ff ff77 	bl	80027c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028de:	b480      	push	{r7}
 80028e0:	b085      	sub	sp, #20
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b21      	cmp	r3, #33	; 0x21
 80028f0:	d13e      	bne.n	8002970 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fa:	d114      	bne.n	8002926 <UART_Transmit_IT+0x48>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d110      	bne.n	8002926 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002918:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	1c9a      	adds	r2, r3, #2
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	621a      	str	r2, [r3, #32]
 8002924:	e008      	b.n	8002938 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	1c59      	adds	r1, r3, #1
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6211      	str	r1, [r2, #32]
 8002930:	781a      	ldrb	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29b      	uxth	r3, r3
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	4619      	mov	r1, r3
 8002946:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10f      	bne.n	800296c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800295a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800296a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	e000      	b.n	8002972 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002970:	2302      	movs	r3, #2
  }
}
 8002972:	4618      	mov	r0, r3
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002994:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff fefc 	bl	800279c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b08c      	sub	sp, #48	; 0x30
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b22      	cmp	r3, #34	; 0x22
 80029c0:	f040 80ab 	bne.w	8002b1a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029cc:	d117      	bne.n	80029fe <UART_Receive_IT+0x50>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d113      	bne.n	80029fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f6:	1c9a      	adds	r2, r3, #2
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	629a      	str	r2, [r3, #40]	; 0x28
 80029fc:	e026      	b.n	8002a4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a10:	d007      	beq.n	8002a22 <UART_Receive_IT+0x74>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10a      	bne.n	8002a30 <UART_Receive_IT+0x82>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	e008      	b.n	8002a42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d15a      	bne.n	8002b16 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0220 	bic.w	r2, r2, #32
 8002a6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0201 	bic.w	r2, r2, #1
 8002a8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d135      	bne.n	8002b0c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	330c      	adds	r3, #12
 8002aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	e853 3f00 	ldrex	r3, [r3]
 8002ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	f023 0310 	bic.w	r3, r3, #16
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	330c      	adds	r3, #12
 8002ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac6:	623a      	str	r2, [r7, #32]
 8002ac8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aca:	69f9      	ldr	r1, [r7, #28]
 8002acc:	6a3a      	ldr	r2, [r7, #32]
 8002ace:	e841 2300 	strex	r3, r2, [r1]
 8002ad2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1e5      	bne.n	8002aa6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b10      	cmp	r3, #16
 8002ae6:	d10a      	bne.n	8002afe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b02:	4619      	mov	r1, r3
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff fe67 	bl	80027d8 <HAL_UARTEx_RxEventCallback>
 8002b0a:	e002      	b.n	8002b12 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff fe4f 	bl	80027b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	e002      	b.n	8002b1c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e000      	b.n	8002b1c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002b1a:	2302      	movs	r3, #2
  }
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3730      	adds	r7, #48	; 0x30
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b28:	b0c0      	sub	sp, #256	; 0x100
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b40:	68d9      	ldr	r1, [r3, #12]
 8002b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	ea40 0301 	orr.w	r3, r0, r1
 8002b4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b7c:	f021 010c 	bic.w	r1, r1, #12
 8002b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b8a:	430b      	orrs	r3, r1
 8002b8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b9e:	6999      	ldr	r1, [r3, #24]
 8002ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	ea40 0301 	orr.w	r3, r0, r1
 8002baa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	4b8f      	ldr	r3, [pc, #572]	; (8002df0 <UART_SetConfig+0x2cc>)
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d005      	beq.n	8002bc4 <UART_SetConfig+0xa0>
 8002bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	4b8d      	ldr	r3, [pc, #564]	; (8002df4 <UART_SetConfig+0x2d0>)
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d104      	bne.n	8002bce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bc4:	f7fe ffd6 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 8002bc8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002bcc:	e003      	b.n	8002bd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bce:	f7fe ffbd 	bl	8001b4c <HAL_RCC_GetPCLK1Freq>
 8002bd2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002be0:	f040 810c 	bne.w	8002dfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002be8:	2200      	movs	r2, #0
 8002bea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002bee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002bf2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002bf6:	4622      	mov	r2, r4
 8002bf8:	462b      	mov	r3, r5
 8002bfa:	1891      	adds	r1, r2, r2
 8002bfc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002bfe:	415b      	adcs	r3, r3
 8002c00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c06:	4621      	mov	r1, r4
 8002c08:	eb12 0801 	adds.w	r8, r2, r1
 8002c0c:	4629      	mov	r1, r5
 8002c0e:	eb43 0901 	adc.w	r9, r3, r1
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c26:	4690      	mov	r8, r2
 8002c28:	4699      	mov	r9, r3
 8002c2a:	4623      	mov	r3, r4
 8002c2c:	eb18 0303 	adds.w	r3, r8, r3
 8002c30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c34:	462b      	mov	r3, r5
 8002c36:	eb49 0303 	adc.w	r3, r9, r3
 8002c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c52:	460b      	mov	r3, r1
 8002c54:	18db      	adds	r3, r3, r3
 8002c56:	653b      	str	r3, [r7, #80]	; 0x50
 8002c58:	4613      	mov	r3, r2
 8002c5a:	eb42 0303 	adc.w	r3, r2, r3
 8002c5e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c68:	f7fd fb04 	bl	8000274 <__aeabi_uldivmod>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4b61      	ldr	r3, [pc, #388]	; (8002df8 <UART_SetConfig+0x2d4>)
 8002c72:	fba3 2302 	umull	r2, r3, r3, r2
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	011c      	lsls	r4, r3, #4
 8002c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c8c:	4642      	mov	r2, r8
 8002c8e:	464b      	mov	r3, r9
 8002c90:	1891      	adds	r1, r2, r2
 8002c92:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c94:	415b      	adcs	r3, r3
 8002c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c9c:	4641      	mov	r1, r8
 8002c9e:	eb12 0a01 	adds.w	sl, r2, r1
 8002ca2:	4649      	mov	r1, r9
 8002ca4:	eb43 0b01 	adc.w	fp, r3, r1
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cbc:	4692      	mov	sl, r2
 8002cbe:	469b      	mov	fp, r3
 8002cc0:	4643      	mov	r3, r8
 8002cc2:	eb1a 0303 	adds.w	r3, sl, r3
 8002cc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cca:	464b      	mov	r3, r9
 8002ccc:	eb4b 0303 	adc.w	r3, fp, r3
 8002cd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ce0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ce4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	18db      	adds	r3, r3, r3
 8002cec:	643b      	str	r3, [r7, #64]	; 0x40
 8002cee:	4613      	mov	r3, r2
 8002cf0:	eb42 0303 	adc.w	r3, r2, r3
 8002cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8002cf6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002cfe:	f7fd fab9 	bl	8000274 <__aeabi_uldivmod>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4611      	mov	r1, r2
 8002d08:	4b3b      	ldr	r3, [pc, #236]	; (8002df8 <UART_SetConfig+0x2d4>)
 8002d0a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	2264      	movs	r2, #100	; 0x64
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	1acb      	subs	r3, r1, r3
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d1e:	4b36      	ldr	r3, [pc, #216]	; (8002df8 <UART_SetConfig+0x2d4>)
 8002d20:	fba3 2302 	umull	r2, r3, r3, r2
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d2c:	441c      	add	r4, r3
 8002d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d32:	2200      	movs	r2, #0
 8002d34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d40:	4642      	mov	r2, r8
 8002d42:	464b      	mov	r3, r9
 8002d44:	1891      	adds	r1, r2, r2
 8002d46:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d48:	415b      	adcs	r3, r3
 8002d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d50:	4641      	mov	r1, r8
 8002d52:	1851      	adds	r1, r2, r1
 8002d54:	6339      	str	r1, [r7, #48]	; 0x30
 8002d56:	4649      	mov	r1, r9
 8002d58:	414b      	adcs	r3, r1
 8002d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d68:	4659      	mov	r1, fp
 8002d6a:	00cb      	lsls	r3, r1, #3
 8002d6c:	4651      	mov	r1, sl
 8002d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d72:	4651      	mov	r1, sl
 8002d74:	00ca      	lsls	r2, r1, #3
 8002d76:	4610      	mov	r0, r2
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	4642      	mov	r2, r8
 8002d7e:	189b      	adds	r3, r3, r2
 8002d80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d84:	464b      	mov	r3, r9
 8002d86:	460a      	mov	r2, r1
 8002d88:	eb42 0303 	adc.w	r3, r2, r3
 8002d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002da0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002da4:	460b      	mov	r3, r1
 8002da6:	18db      	adds	r3, r3, r3
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002daa:	4613      	mov	r3, r2
 8002dac:	eb42 0303 	adc.w	r3, r2, r3
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002db2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002db6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002dba:	f7fd fa5b 	bl	8000274 <__aeabi_uldivmod>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <UART_SetConfig+0x2d4>)
 8002dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8002dc8:	095b      	lsrs	r3, r3, #5
 8002dca:	2164      	movs	r1, #100	; 0x64
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	3332      	adds	r3, #50	; 0x32
 8002dd6:	4a08      	ldr	r2, [pc, #32]	; (8002df8 <UART_SetConfig+0x2d4>)
 8002dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	f003 0207 	and.w	r2, r3, #7
 8002de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4422      	add	r2, r4
 8002dea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dec:	e105      	b.n	8002ffa <UART_SetConfig+0x4d6>
 8002dee:	bf00      	nop
 8002df0:	40011000 	.word	0x40011000
 8002df4:	40011400 	.word	0x40011400
 8002df8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e00:	2200      	movs	r2, #0
 8002e02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e0e:	4642      	mov	r2, r8
 8002e10:	464b      	mov	r3, r9
 8002e12:	1891      	adds	r1, r2, r2
 8002e14:	6239      	str	r1, [r7, #32]
 8002e16:	415b      	adcs	r3, r3
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e1e:	4641      	mov	r1, r8
 8002e20:	1854      	adds	r4, r2, r1
 8002e22:	4649      	mov	r1, r9
 8002e24:	eb43 0501 	adc.w	r5, r3, r1
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	00eb      	lsls	r3, r5, #3
 8002e32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e36:	00e2      	lsls	r2, r4, #3
 8002e38:	4614      	mov	r4, r2
 8002e3a:	461d      	mov	r5, r3
 8002e3c:	4643      	mov	r3, r8
 8002e3e:	18e3      	adds	r3, r4, r3
 8002e40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e44:	464b      	mov	r3, r9
 8002e46:	eb45 0303 	adc.w	r3, r5, r3
 8002e4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	008b      	lsls	r3, r1, #2
 8002e6e:	4621      	mov	r1, r4
 8002e70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e74:	4621      	mov	r1, r4
 8002e76:	008a      	lsls	r2, r1, #2
 8002e78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e7c:	f7fd f9fa 	bl	8000274 <__aeabi_uldivmod>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4b60      	ldr	r3, [pc, #384]	; (8003008 <UART_SetConfig+0x4e4>)
 8002e86:	fba3 2302 	umull	r2, r3, r3, r2
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	011c      	lsls	r4, r3, #4
 8002e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e92:	2200      	movs	r2, #0
 8002e94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ea0:	4642      	mov	r2, r8
 8002ea2:	464b      	mov	r3, r9
 8002ea4:	1891      	adds	r1, r2, r2
 8002ea6:	61b9      	str	r1, [r7, #24]
 8002ea8:	415b      	adcs	r3, r3
 8002eaa:	61fb      	str	r3, [r7, #28]
 8002eac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eb0:	4641      	mov	r1, r8
 8002eb2:	1851      	adds	r1, r2, r1
 8002eb4:	6139      	str	r1, [r7, #16]
 8002eb6:	4649      	mov	r1, r9
 8002eb8:	414b      	adcs	r3, r1
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ec8:	4659      	mov	r1, fp
 8002eca:	00cb      	lsls	r3, r1, #3
 8002ecc:	4651      	mov	r1, sl
 8002ece:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ed2:	4651      	mov	r1, sl
 8002ed4:	00ca      	lsls	r2, r1, #3
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4603      	mov	r3, r0
 8002edc:	4642      	mov	r2, r8
 8002ede:	189b      	adds	r3, r3, r2
 8002ee0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ee4:	464b      	mov	r3, r9
 8002ee6:	460a      	mov	r2, r1
 8002ee8:	eb42 0303 	adc.w	r3, r2, r3
 8002eec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002efa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f08:	4649      	mov	r1, r9
 8002f0a:	008b      	lsls	r3, r1, #2
 8002f0c:	4641      	mov	r1, r8
 8002f0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f12:	4641      	mov	r1, r8
 8002f14:	008a      	lsls	r2, r1, #2
 8002f16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f1a:	f7fd f9ab 	bl	8000274 <__aeabi_uldivmod>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4b39      	ldr	r3, [pc, #228]	; (8003008 <UART_SetConfig+0x4e4>)
 8002f24:	fba3 1302 	umull	r1, r3, r3, r2
 8002f28:	095b      	lsrs	r3, r3, #5
 8002f2a:	2164      	movs	r1, #100	; 0x64
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	3332      	adds	r3, #50	; 0x32
 8002f36:	4a34      	ldr	r2, [pc, #208]	; (8003008 <UART_SetConfig+0x4e4>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	095b      	lsrs	r3, r3, #5
 8002f3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f42:	441c      	add	r4, r3
 8002f44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f48:	2200      	movs	r2, #0
 8002f4a:	673b      	str	r3, [r7, #112]	; 0x70
 8002f4c:	677a      	str	r2, [r7, #116]	; 0x74
 8002f4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f52:	4642      	mov	r2, r8
 8002f54:	464b      	mov	r3, r9
 8002f56:	1891      	adds	r1, r2, r2
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	415b      	adcs	r3, r3
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f62:	4641      	mov	r1, r8
 8002f64:	1851      	adds	r1, r2, r1
 8002f66:	6039      	str	r1, [r7, #0]
 8002f68:	4649      	mov	r1, r9
 8002f6a:	414b      	adcs	r3, r1
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f7a:	4659      	mov	r1, fp
 8002f7c:	00cb      	lsls	r3, r1, #3
 8002f7e:	4651      	mov	r1, sl
 8002f80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f84:	4651      	mov	r1, sl
 8002f86:	00ca      	lsls	r2, r1, #3
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	4642      	mov	r2, r8
 8002f90:	189b      	adds	r3, r3, r2
 8002f92:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f94:	464b      	mov	r3, r9
 8002f96:	460a      	mov	r2, r1
 8002f98:	eb42 0303 	adc.w	r3, r2, r3
 8002f9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	663b      	str	r3, [r7, #96]	; 0x60
 8002fa8:	667a      	str	r2, [r7, #100]	; 0x64
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002fb6:	4649      	mov	r1, r9
 8002fb8:	008b      	lsls	r3, r1, #2
 8002fba:	4641      	mov	r1, r8
 8002fbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fc0:	4641      	mov	r1, r8
 8002fc2:	008a      	lsls	r2, r1, #2
 8002fc4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002fc8:	f7fd f954 	bl	8000274 <__aeabi_uldivmod>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <UART_SetConfig+0x4e4>)
 8002fd2:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	2164      	movs	r1, #100	; 0x64
 8002fda:	fb01 f303 	mul.w	r3, r1, r3
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	3332      	adds	r3, #50	; 0x32
 8002fe4:	4a08      	ldr	r2, [pc, #32]	; (8003008 <UART_SetConfig+0x4e4>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	f003 020f 	and.w	r2, r3, #15
 8002ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4422      	add	r2, r4
 8002ff8:	609a      	str	r2, [r3, #8]
}
 8002ffa:	bf00      	nop
 8002ffc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003000:	46bd      	mov	sp, r7
 8003002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003006:	bf00      	nop
 8003008:	51eb851f 	.word	0x51eb851f

0800300c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800301a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800301e:	2b84      	cmp	r3, #132	; 0x84
 8003020:	d005      	beq.n	800302e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003022:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4413      	add	r3, r2
 800302a:	3303      	adds	r3, #3
 800302c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800302e:	68fb      	ldr	r3, [r7, #12]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003042:	f3ef 8305 	mrs	r3, IPSR
 8003046:	607b      	str	r3, [r7, #4]
  return(result);
 8003048:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800304a:	2b00      	cmp	r3, #0
 800304c:	bf14      	ite	ne
 800304e:	2301      	movne	r3, #1
 8003050:	2300      	moveq	r3, #0
 8003052:	b2db      	uxtb	r3, r3
}
 8003054:	4618      	mov	r0, r3
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003064:	f001 fd30 	bl	8004ac8 <vTaskStartScheduler>
  
  return osOK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	bd80      	pop	{r7, pc}

0800306e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800306e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003070:	b089      	sub	sp, #36	; 0x24
 8003072:	af04      	add	r7, sp, #16
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d020      	beq.n	80030c2 <osThreadCreate+0x54>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d01c      	beq.n	80030c2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685c      	ldr	r4, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681d      	ldr	r5, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691e      	ldr	r6, [r3, #16]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff ffb6 	bl	800300c <makeFreeRtosPriority>
 80030a0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030aa:	9202      	str	r2, [sp, #8]
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	9100      	str	r1, [sp, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4632      	mov	r2, r6
 80030b4:	4629      	mov	r1, r5
 80030b6:	4620      	mov	r0, r4
 80030b8:	f001 f940 	bl	800433c <xTaskCreateStatic>
 80030bc:	4603      	mov	r3, r0
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	e01c      	b.n	80030fc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685c      	ldr	r4, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030ce:	b29e      	uxth	r6, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff ff98 	bl	800300c <makeFreeRtosPriority>
 80030dc:	4602      	mov	r2, r0
 80030de:	f107 030c 	add.w	r3, r7, #12
 80030e2:	9301      	str	r3, [sp, #4]
 80030e4:	9200      	str	r2, [sp, #0]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	4632      	mov	r2, r6
 80030ea:	4629      	mov	r1, r5
 80030ec:	4620      	mov	r0, r4
 80030ee:	f001 f982 	bl	80043f6 <xTaskCreate>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d001      	beq.n	80030fc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	e000      	b.n	80030fe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80030fc:	68fb      	ldr	r3, [r7, #12]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003108 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a09      	ldr	r2, [pc, #36]	; (8003138 <osDelay+0x30>)
 8003114:	fba2 2303 	umull	r2, r3, r2, r3
 8003118:	08db      	lsrs	r3, r3, #3
 800311a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <osDelay+0x1e>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	e000      	b.n	8003128 <osDelay+0x20>
 8003126:	2301      	movs	r3, #1
 8003128:	4618      	mov	r0, r3
 800312a:	f001 fadb 	bl	80046e4 <vTaskDelay>
  
  return osOK;
 800312e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	cccccccd 	.word	0xcccccccd

0800313c <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	3303      	adds	r3, #3
 800314a:	f023 0303 	bic.w	r3, r3, #3
 800314e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8003150:	2014      	movs	r0, #20
 8003152:	f002 fd19 	bl	8005b88 <pvPortMalloc>
 8003156:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d046      	beq.n	80031ec <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2200      	movs	r2, #0
 8003170:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f002 fd06 	bl	8005b88 <pvPortMalloc>
 800317c:	4602      	mov	r2, r0
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d02b      	beq.n	80031e2 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	fb02 f303 	mul.w	r3, r2, r3
 8003194:	4618      	mov	r0, r3
 8003196:	f002 fcf7 	bl	8005b88 <pvPortMalloc>
 800319a:	4602      	mov	r2, r0
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d011      	beq.n	80031cc <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80031a8:	2300      	movs	r3, #0
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	e008      	b.n	80031c0 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4413      	add	r3, r2
 80031b6:	2200      	movs	r2, #0
 80031b8:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	3301      	adds	r3, #1
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d3f1      	bcc.n	80031ae <osPoolCreate+0x72>
 80031ca:	e00f      	b.n	80031ec <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f002 fda5 	bl	8005d20 <vPortFree>
        vPortFree(thePool);
 80031d6:	6978      	ldr	r0, [r7, #20]
 80031d8:	f002 fda2 	bl	8005d20 <vPortFree>
        thePool = NULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	e004      	b.n	80031ec <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80031e2:	6978      	ldr	r0, [r7, #20]
 80031e4:	f002 fd9c 	bl	8005d20 <vPortFree>
      thePool = NULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80031ec:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b08a      	sub	sp, #40	; 0x28
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 80031fe:	2300      	movs	r3, #0
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8003202:	2300      	movs	r3, #0
 8003204:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8003206:	f7ff ff19 	bl	800303c <inHandlerMode>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00e      	beq.n	800322e <osPoolAlloc+0x38>
	__asm volatile
 8003210:	f3ef 8211 	mrs	r2, BASEPRI
 8003214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	617a      	str	r2, [r7, #20]
 8003226:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003228:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
 800322c:	e001      	b.n	8003232 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800322e:	f002 fb29 	bl	8005884 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	e029      	b.n	800328c <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	4413      	add	r3, r2
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6892      	ldr	r2, [r2, #8]
 8003244:	fbb3 f1f2 	udiv	r1, r3, r2
 8003248:	fb01 f202 	mul.w	r2, r1, r2
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	4413      	add	r3, r2
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d113      	bne.n	8003286 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	4413      	add	r3, r2
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4619      	mov	r1, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	fb02 f303 	mul.w	r3, r2, r3
 800327a:	440b      	add	r3, r1
 800327c:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	611a      	str	r2, [r3, #16]
      break;
 8003284:	e007      	b.n	8003296 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3301      	adds	r3, #1
 800328a:	61fb      	str	r3, [r7, #28]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	69fa      	ldr	r2, [r7, #28]
 8003292:	429a      	cmp	r2, r3
 8003294:	d3d0      	bcc.n	8003238 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8003296:	f7ff fed1 	bl	800303c <inHandlerMode>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f383 8811 	msr	BASEPRI, r3
}
 80032aa:	e001      	b.n	80032b0 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80032ac:	f002 fb1a 	bl	80058e4 <vPortExitCritical>
  }
  
  return p;
 80032b0:	6a3b      	ldr	r3, [r7, #32]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3728      	adds	r7, #40	; 0x28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b085      	sub	sp, #20
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
 80032c2:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <osPoolFree+0x14>
    return osErrorParameter;
 80032ca:	2380      	movs	r3, #128	; 0x80
 80032cc:	e030      	b.n	8003330 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <osPoolFree+0x1e>
    return osErrorParameter;
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	e02b      	b.n	8003330 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d201      	bcs.n	80032e6 <osPoolFree+0x2c>
    return osErrorParameter;
 80032e2:	2380      	movs	r3, #128	; 0x80
 80032e4:	e024      	b.n	8003330 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80032fa:	fb01 f202 	mul.w	r2, r1, r2
 80032fe:	1a9b      	subs	r3, r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <osPoolFree+0x4e>
    return osErrorParameter;
 8003304:	2380      	movs	r3, #128	; 0x80
 8003306:	e013      	b.n	8003330 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003312:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	429a      	cmp	r2, r3
 800331c:	d301      	bcc.n	8003322 <osPoolFree+0x68>
    return osErrorParameter;
 800331e:	2380      	movs	r3, #128	; 0x80
 8003320:	e006      	b.n	8003330 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4413      	add	r3, r2
 800332a:	2200      	movs	r2, #0
 800332c:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800333c:	b590      	push	{r4, r7, lr}
 800333e:	b085      	sub	sp, #20
 8003340:	af02      	add	r7, sp, #8
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d011      	beq.n	8003372 <osMessageCreate+0x36>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00d      	beq.n	8003372 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6859      	ldr	r1, [r3, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	2400      	movs	r4, #0
 8003368:	9400      	str	r4, [sp, #0]
 800336a:	f000 fa3b 	bl	80037e4 <xQueueGenericCreateStatic>
 800336e:	4603      	mov	r3, r0
 8003370:	e008      	b.n	8003384 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	4619      	mov	r1, r3
 800337e:	f000 faa9 	bl	80038d4 <xQueueGenericCreate>
 8003382:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	bd90      	pop	{r4, r7, pc}

0800338c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003398:	2300      	movs	r3, #0
 800339a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a1f      	ldr	r2, [pc, #124]	; (800341c <osMessagePut+0x90>)
 80033a0:	fba2 2303 	umull	r2, r3, r2, r3
 80033a4:	08db      	lsrs	r3, r3, #3
 80033a6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <osMessagePut+0x26>
    ticks = 1;
 80033ae:	2301      	movs	r3, #1
 80033b0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80033b2:	f7ff fe43 	bl	800303c <inHandlerMode>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01d      	beq.n	80033f8 <osMessagePut+0x6c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80033bc:	f107 0210 	add.w	r2, r7, #16
 80033c0:	f107 0108 	add.w	r1, r7, #8
 80033c4:	2300      	movs	r3, #0
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 fc0e 	bl	8003be8 <xQueueGenericSendFromISR>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d001      	beq.n	80033d6 <osMessagePut+0x4a>
      return osErrorOS;
 80033d2:	23ff      	movs	r3, #255	; 0xff
 80033d4:	e01d      	b.n	8003412 <osMessagePut+0x86>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <osMessagePut+0x66>
 80033dc:	f004 f85e 	bl	800749c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 80033e0:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <osMessagePut+0x94>)
 80033e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	e00e      	b.n	8003410 <osMessagePut+0x84>
 80033f2:	f004 f837 	bl	8007464 <SEGGER_SYSVIEW_RecordExitISR>
 80033f6:	e00b      	b.n	8003410 <osMessagePut+0x84>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80033f8:	f107 0108 	add.w	r1, r7, #8
 80033fc:	2300      	movs	r3, #0
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 facb 	bl	800399c <xQueueGenericSend>
 8003406:	4603      	mov	r3, r0
 8003408:	2b01      	cmp	r3, #1
 800340a:	d001      	beq.n	8003410 <osMessagePut+0x84>
      return osErrorOS;
 800340c:	23ff      	movs	r3, #255	; 0xff
 800340e:	e000      	b.n	8003412 <osMessagePut+0x86>
    }
  }
  
  return osOK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	cccccccd 	.word	0xcccccccd
 8003420:	e000ed04 	.word	0xe000ed04

08003424 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003424:	b590      	push	{r4, r7, lr}
 8003426:	b08b      	sub	sp, #44	; 0x2c
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10a      	bne.n	8003454 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800343e:	2380      	movs	r3, #128	; 0x80
 8003440:	617b      	str	r3, [r7, #20]
    return event;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	461c      	mov	r4, r3
 8003446:	f107 0314 	add.w	r3, r7, #20
 800344a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800344e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003452:	e05d      	b.n	8003510 <osMessageGet+0xec>
  }
  
  taskWoken = pdFALSE;
 8003454:	2300      	movs	r3, #0
 8003456:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003462:	d103      	bne.n	800346c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8003464:	f04f 33ff 	mov.w	r3, #4294967295
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
 800346a:	e00d      	b.n	8003488 <osMessageGet+0x64>
  }
  else if (millisec != 0) {
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <osMessageGet+0x64>
    ticks = millisec / portTICK_PERIOD_MS;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a28      	ldr	r2, [pc, #160]	; (8003518 <osMessageGet+0xf4>)
 8003476:	fba2 2303 	umull	r2, r3, r2, r3
 800347a:	08db      	lsrs	r3, r3, #3
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <osMessageGet+0x64>
      ticks = 1;
 8003484:	2301      	movs	r3, #1
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003488:	f7ff fdd8 	bl	800303c <inHandlerMode>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d021      	beq.n	80034d6 <osMessageGet+0xb2>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003492:	f107 0220 	add.w	r2, r7, #32
 8003496:	f107 0314 	add.w	r3, r7, #20
 800349a:	3304      	adds	r3, #4
 800349c:	4619      	mov	r1, r3
 800349e:	68b8      	ldr	r0, [r7, #8]
 80034a0:	f000 fd62 	bl	8003f68 <xQueueReceiveFromISR>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d102      	bne.n	80034b0 <osMessageGet+0x8c>
      /* We have mail */
      event.status = osEventMessage;
 80034aa:	2310      	movs	r3, #16
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	e001      	b.n	80034b4 <osMessageGet+0x90>
    }
    else {
      event.status = osOK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <osMessageGet+0xac>
 80034ba:	f003 ffef 	bl	800749c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 80034be:	4b17      	ldr	r3, [pc, #92]	; (800351c <osMessageGet+0xf8>)
 80034c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	f3bf 8f6f 	isb	sy
 80034ce:	e017      	b.n	8003500 <osMessageGet+0xdc>
 80034d0:	f003 ffc8 	bl	8007464 <SEGGER_SYSVIEW_RecordExitISR>
 80034d4:	e014      	b.n	8003500 <osMessageGet+0xdc>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80034d6:	f107 0314 	add.w	r3, r7, #20
 80034da:	3304      	adds	r3, #4
 80034dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034de:	4619      	mov	r1, r3
 80034e0:	68b8      	ldr	r0, [r7, #8]
 80034e2:	f000 fc31 	bl	8003d48 <xQueueReceive>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d102      	bne.n	80034f2 <osMessageGet+0xce>
      /* We have mail */
      event.status = osEventMessage;
 80034ec:	2310      	movs	r3, #16
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	e006      	b.n	8003500 <osMessageGet+0xdc>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <osMessageGet+0xd8>
 80034f8:	2300      	movs	r3, #0
 80034fa:	e000      	b.n	80034fe <osMessageGet+0xda>
 80034fc:	2340      	movs	r3, #64	; 0x40
 80034fe:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	461c      	mov	r4, r3
 8003504:	f107 0314 	add.w	r3, r7, #20
 8003508:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800350c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	372c      	adds	r7, #44	; 0x2c
 8003514:	46bd      	mov	sp, r7
 8003516:	bd90      	pop	{r4, r7, pc}
 8003518:	cccccccd 	.word	0xcccccccd
 800351c:	e000ed04 	.word	0xe000ed04

08003520 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f001 f913 	bl	8004754 <vTaskSuspend>
  
  return osOK;
 800352e:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8003540:	f7ff fd7c 	bl	800303c <inHandlerMode>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d010      	beq.n	800356c <osThreadResume+0x34>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f001 fa3e 	bl	80049cc <xTaskResumeFromISR>
 8003550:	4603      	mov	r3, r0
 8003552:	2b01      	cmp	r3, #1
 8003554:	d10d      	bne.n	8003572 <osThreadResume+0x3a>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8003556:	f003 ffa1 	bl	800749c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <osThreadResume+0x44>)
 800355c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	f3bf 8f6f 	isb	sy
 800356a:	e002      	b.n	8003572 <osThreadResume+0x3a>
    }
  }
  else
  {
    vTaskResume(thread_id);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f001 f9c3 	bl	80048f8 <vTaskResume>
  }
  return osOK;
 8003572:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8003574:	4618      	mov	r0, r3
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	e000ed04 	.word	0xe000ed04

08003580 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8003588:	f7ff fd58 	bl	800303c <inHandlerMode>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d004      	beq.n	800359c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fda4 	bl	80040e0 <uxQueueMessagesWaitingFromISR>
 8003598:	4603      	mov	r3, r0
 800359a:	e003      	b.n	80035a4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fd81 	bl	80040a4 <uxQueueMessagesWaiting>
 80035a2:	4603      	mov	r3, r0
  }
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f103 0208 	add.w	r2, r3, #8
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f04f 32ff 	mov.w	r2, #4294967295
 80035c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f103 0208 	add.w	r2, r3, #8
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f103 0208 	add.w	r2, r3, #8
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003606:	b480      	push	{r7}
 8003608:	b085      	sub	sp, #20
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	601a      	str	r2, [r3, #0]
}
 8003642:	bf00      	nop
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800364e:	b480      	push	{r7}
 8003650:	b085      	sub	sp, #20
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003664:	d103      	bne.n	800366e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	e00c      	b.n	8003688 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3308      	adds	r3, #8
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	e002      	b.n	800367c <vListInsert+0x2e>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	429a      	cmp	r2, r3
 8003686:	d2f6      	bcs.n	8003676 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	601a      	str	r2, [r3, #0]
}
 80036b4:	bf00      	nop
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6892      	ldr	r2, [r2, #8]
 80036d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6852      	ldr	r2, [r2, #4]
 80036e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d103      	bne.n	80036f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	1e5a      	subs	r2, r3, #1
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <xQueueGenericReset+0x2a>
	__asm volatile
 8003728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	60bb      	str	r3, [r7, #8]
}
 800373a:	bf00      	nop
 800373c:	e7fe      	b.n	800373c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800373e:	f002 f8a1 	bl	8005884 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374a:	68f9      	ldr	r1, [r7, #12]
 800374c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800374e:	fb01 f303 	mul.w	r3, r1, r3
 8003752:	441a      	add	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376e:	3b01      	subs	r3, #1
 8003770:	68f9      	ldr	r1, [r7, #12]
 8003772:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003774:	fb01 f303 	mul.w	r3, r1, r3
 8003778:	441a      	add	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	22ff      	movs	r2, #255	; 0xff
 8003782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	22ff      	movs	r2, #255	; 0xff
 800378a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d114      	bne.n	80037be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01a      	beq.n	80037d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	3310      	adds	r3, #16
 80037a0:	4618      	mov	r0, r3
 80037a2:	f001 fc23 	bl	8004fec <xTaskRemoveFromEventList>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d012      	beq.n	80037d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <xQueueGenericReset+0xcc>)
 80037ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	e009      	b.n	80037d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	3310      	adds	r3, #16
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff fef2 	bl	80035ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	3324      	adds	r3, #36	; 0x24
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff feed 	bl	80035ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80037d2:	f002 f887 	bl	80058e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80037d6:	2301      	movs	r3, #1
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	e000ed04 	.word	0xe000ed04

080037e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08e      	sub	sp, #56	; 0x38
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10a      	bne.n	800380e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80037f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fc:	f383 8811 	msr	BASEPRI, r3
 8003800:	f3bf 8f6f 	isb	sy
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800380a:	bf00      	nop
 800380c:	e7fe      	b.n	800380c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10a      	bne.n	800382a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003826:	bf00      	nop
 8003828:	e7fe      	b.n	8003828 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <xQueueGenericCreateStatic+0x52>
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <xQueueGenericCreateStatic+0x56>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <xQueueGenericCreateStatic+0x58>
 800383a:	2300      	movs	r3, #0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10a      	bne.n	8003856 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	623b      	str	r3, [r7, #32]
}
 8003852:	bf00      	nop
 8003854:	e7fe      	b.n	8003854 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d102      	bne.n	8003862 <xQueueGenericCreateStatic+0x7e>
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <xQueueGenericCreateStatic+0x82>
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <xQueueGenericCreateStatic+0x84>
 8003866:	2300      	movs	r3, #0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10a      	bne.n	8003882 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800386c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003870:	f383 8811 	msr	BASEPRI, r3
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	61fb      	str	r3, [r7, #28]
}
 800387e:	bf00      	nop
 8003880:	e7fe      	b.n	8003880 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003882:	2350      	movs	r3, #80	; 0x50
 8003884:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b50      	cmp	r3, #80	; 0x50
 800388a:	d00a      	beq.n	80038a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800388c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003890:	f383 8811 	msr	BASEPRI, r3
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	61bb      	str	r3, [r7, #24]
}
 800389e:	bf00      	nop
 80038a0:	e7fe      	b.n	80038a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80038a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80038a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00d      	beq.n	80038ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80038ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80038b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80038ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	4613      	mov	r3, r2
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	68b9      	ldr	r1, [r7, #8]
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 f83f 	bl	8003948 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80038ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3730      	adds	r7, #48	; 0x30
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08a      	sub	sp, #40	; 0x28
 80038d8:	af02      	add	r7, sp, #8
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	4613      	mov	r3, r2
 80038e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <xQueueGenericCreate+0x2a>
	__asm volatile
 80038e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	613b      	str	r3, [r7, #16]
}
 80038fa:	bf00      	nop
 80038fc:	e7fe      	b.n	80038fc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	3350      	adds	r3, #80	; 0x50
 800390c:	4618      	mov	r0, r3
 800390e:	f002 f93b 	bl	8005b88 <pvPortMalloc>
 8003912:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d011      	beq.n	800393e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	3350      	adds	r3, #80	; 0x50
 8003922:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800392c:	79fa      	ldrb	r2, [r7, #7]
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	4613      	mov	r3, r2
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f805 	bl	8003948 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800393e:	69bb      	ldr	r3, [r7, #24]
	}
 8003940:	4618      	mov	r0, r3
 8003942:	3720      	adds	r7, #32
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d103      	bne.n	8003964 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	e002      	b.n	800396a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003976:	2101      	movs	r1, #1
 8003978:	69b8      	ldr	r0, [r7, #24]
 800397a:	f7ff fecb 	bl	8003714 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	78fa      	ldrb	r2, [r7, #3]
 8003982:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8003986:	78fb      	ldrb	r3, [r7, #3]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	68f9      	ldr	r1, [r7, #12]
 800398c:	2073      	movs	r0, #115	; 0x73
 800398e:	f003 f955 	bl	8006c3c <SEGGER_SYSVIEW_RecordU32x3>
}
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b090      	sub	sp, #64	; 0x40
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039aa:	2300      	movs	r3, #0
 80039ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10a      	bne.n	80039ce <xQueueGenericSend+0x32>
	__asm volatile
 80039b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039ca:	bf00      	nop
 80039cc:	e7fe      	b.n	80039cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d103      	bne.n	80039dc <xQueueGenericSend+0x40>
 80039d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <xQueueGenericSend+0x44>
 80039dc:	2301      	movs	r3, #1
 80039de:	e000      	b.n	80039e2 <xQueueGenericSend+0x46>
 80039e0:	2300      	movs	r3, #0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10a      	bne.n	80039fc <xQueueGenericSend+0x60>
	__asm volatile
 80039e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039f8:	bf00      	nop
 80039fa:	e7fe      	b.n	80039fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d103      	bne.n	8003a0a <xQueueGenericSend+0x6e>
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d101      	bne.n	8003a0e <xQueueGenericSend+0x72>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <xQueueGenericSend+0x74>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <xQueueGenericSend+0x8e>
	__asm volatile
 8003a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	623b      	str	r3, [r7, #32]
}
 8003a26:	bf00      	nop
 8003a28:	e7fe      	b.n	8003a28 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a2a:	f001 fcdd 	bl	80053e8 <xTaskGetSchedulerState>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d102      	bne.n	8003a3a <xQueueGenericSend+0x9e>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <xQueueGenericSend+0xa2>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <xQueueGenericSend+0xa4>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10a      	bne.n	8003a5a <xQueueGenericSend+0xbe>
	__asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	61fb      	str	r3, [r7, #28]
}
 8003a56:	bf00      	nop
 8003a58:	e7fe      	b.n	8003a58 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a5a:	f001 ff13 	bl	8005884 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d302      	bcc.n	8003a70 <xQueueGenericSend+0xd4>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d136      	bne.n	8003ade <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 8003a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a72:	4618      	mov	r0, r3
 8003a74:	f003 fe70 	bl	8007758 <SEGGER_SYSVIEW_ShrinkId>
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	460b      	mov	r3, r1
 8003a82:	4601      	mov	r1, r0
 8003a84:	205a      	movs	r0, #90	; 0x5a
 8003a86:	f003 f94f 	bl	8006d28 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a90:	f000 fb44 	bl	800411c <prvCopyDataToQueue>
 8003a94:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d010      	beq.n	8003ac0 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa0:	3324      	adds	r3, #36	; 0x24
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f001 faa2 	bl	8004fec <xTaskRemoveFromEventList>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d013      	beq.n	8003ad6 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003aae:	4b4d      	ldr	r3, [pc, #308]	; (8003be4 <xQueueGenericSend+0x248>)
 8003ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	f3bf 8f6f 	isb	sy
 8003abe:	e00a      	b.n	8003ad6 <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d007      	beq.n	8003ad6 <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ac6:	4b47      	ldr	r3, [pc, #284]	; (8003be4 <xQueueGenericSend+0x248>)
 8003ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ad6:	f001 ff05 	bl	80058e4 <vPortExitCritical>
				return pdPASS;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e07d      	b.n	8003bda <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d110      	bne.n	8003b06 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ae4:	f001 fefe 	bl	80058e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	4618      	mov	r0, r3
 8003aec:	f003 fe34 	bl	8007758 <SEGGER_SYSVIEW_ShrinkId>
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	460b      	mov	r3, r1
 8003afa:	4601      	mov	r1, r0
 8003afc:	205a      	movs	r0, #90	; 0x5a
 8003afe:	f003 f913 	bl	8006d28 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	e069      	b.n	8003bda <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d106      	bne.n	8003b1a <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b0c:	f107 0314 	add.w	r3, r7, #20
 8003b10:	4618      	mov	r0, r3
 8003b12:	f001 fad1 	bl	80050b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b16:	2301      	movs	r3, #1
 8003b18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b1a:	f001 fee3 	bl	80058e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b1e:	f001 f84f 	bl	8004bc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b22:	f001 feaf 	bl	8005884 <vPortEnterCritical>
 8003b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b2c:	b25b      	sxtb	r3, r3
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d103      	bne.n	8003b3c <xQueueGenericSend+0x1a0>
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b42:	b25b      	sxtb	r3, r3
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b48:	d103      	bne.n	8003b52 <xQueueGenericSend+0x1b6>
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b52:	f001 fec7 	bl	80058e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b56:	1d3a      	adds	r2, r7, #4
 8003b58:	f107 0314 	add.w	r3, r7, #20
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f001 fac0 	bl	80050e4 <xTaskCheckForTimeOut>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d124      	bne.n	8003bb4 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b6c:	f000 fbce 	bl	800430c <prvIsQueueFull>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d018      	beq.n	8003ba8 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	3310      	adds	r3, #16
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	4611      	mov	r1, r2
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f001 fa10 	bl	8004fa4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b86:	f000 fb59 	bl	800423c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b8a:	f001 f827 	bl	8004bdc <xTaskResumeAll>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f47f af62 	bne.w	8003a5a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003b96:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <xQueueGenericSend+0x248>)
 8003b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	e758      	b.n	8003a5a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003baa:	f000 fb47 	bl	800423c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bae:	f001 f815 	bl	8004bdc <xTaskResumeAll>
 8003bb2:	e752      	b.n	8003a5a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bb6:	f000 fb41 	bl	800423c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bba:	f001 f80f 	bl	8004bdc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f003 fdc9 	bl	8007758 <SEGGER_SYSVIEW_ShrinkId>
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4601      	mov	r1, r0
 8003bd2:	205a      	movs	r0, #90	; 0x5a
 8003bd4:	f003 f8a8 	bl	8006d28 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8003bd8:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3738      	adds	r7, #56	; 0x38
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	e000ed04 	.word	0xe000ed04

08003be8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b090      	sub	sp, #64	; 0x40
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10a      	bne.n	8003c16 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c12:	bf00      	nop
 8003c14:	e7fe      	b.n	8003c14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d103      	bne.n	8003c24 <xQueueGenericSendFromISR+0x3c>
 8003c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <xQueueGenericSendFromISR+0x40>
 8003c24:	2301      	movs	r3, #1
 8003c26:	e000      	b.n	8003c2a <xQueueGenericSendFromISR+0x42>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10a      	bne.n	8003c44 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c40:	bf00      	nop
 8003c42:	e7fe      	b.n	8003c42 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d103      	bne.n	8003c52 <xQueueGenericSendFromISR+0x6a>
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <xQueueGenericSendFromISR+0x6e>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <xQueueGenericSendFromISR+0x70>
 8003c56:	2300      	movs	r3, #0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10a      	bne.n	8003c72 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	623b      	str	r3, [r7, #32]
}
 8003c6e:	bf00      	nop
 8003c70:	e7fe      	b.n	8003c70 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c72:	f001 fef1 	bl	8005a58 <vPortValidateInterruptPriority>
	__asm volatile
 8003c76:	f3ef 8211 	mrs	r2, BASEPRI
 8003c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	61fa      	str	r2, [r7, #28]
 8003c8c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8003c8e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c90:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d302      	bcc.n	8003ca4 <xQueueGenericSendFromISR+0xbc>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d139      	bne.n	8003d18 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb2:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8003cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f003 fd4e 	bl	8007758 <SEGGER_SYSVIEW_ShrinkId>
 8003cbc:	4601      	mov	r1, r0
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	2060      	movs	r0, #96	; 0x60
 8003cc4:	f002 ff60 	bl	8006b88 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	68b9      	ldr	r1, [r7, #8]
 8003ccc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003cce:	f000 fa25 	bl	800411c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003cd2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cda:	d112      	bne.n	8003d02 <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d016      	beq.n	8003d12 <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce6:	3324      	adds	r3, #36	; 0x24
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f001 f97f 	bl	8004fec <xTaskRemoveFromEventList>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00e      	beq.n	8003d12 <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00b      	beq.n	8003d12 <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	e007      	b.n	8003d12 <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d06:	3301      	adds	r3, #1
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	b25a      	sxtb	r2, r3
 8003d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d12:	2301      	movs	r3, #1
 8003d14:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003d16:	e00b      	b.n	8003d30 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8003d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f003 fd1c 	bl	8007758 <SEGGER_SYSVIEW_ShrinkId>
 8003d20:	4601      	mov	r1, r0
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	461a      	mov	r2, r3
 8003d26:	2060      	movs	r0, #96	; 0x60
 8003d28:	f002 ff2e 	bl	8006b88 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d32:	617b      	str	r3, [r7, #20]
	__asm volatile
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f383 8811 	msr	BASEPRI, r3
}
 8003d3a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3740      	adds	r7, #64	; 0x40
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d48:	b590      	push	{r4, r7, lr}
 8003d4a:	b08f      	sub	sp, #60	; 0x3c
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d54:	2300      	movs	r3, #0
 8003d56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <xQueueReceive+0x30>
	__asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	623b      	str	r3, [r7, #32]
}
 8003d74:	bf00      	nop
 8003d76:	e7fe      	b.n	8003d76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d103      	bne.n	8003d86 <xQueueReceive+0x3e>
 8003d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <xQueueReceive+0x42>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <xQueueReceive+0x44>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10a      	bne.n	8003da6 <xQueueReceive+0x5e>
	__asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	61fb      	str	r3, [r7, #28]
}
 8003da2:	bf00      	nop
 8003da4:	e7fe      	b.n	8003da4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003da6:	f001 fb1f 	bl	80053e8 <xTaskGetSchedulerState>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d102      	bne.n	8003db6 <xQueueReceive+0x6e>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <xQueueReceive+0x72>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <xQueueReceive+0x74>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10a      	bne.n	8003dd6 <xQueueReceive+0x8e>
	__asm volatile
 8003dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	61bb      	str	r3, [r7, #24]
}
 8003dd2:	bf00      	nop
 8003dd4:	e7fe      	b.n	8003dd4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dd6:	f001 fd55 	bl	8005884 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d02f      	beq.n	8003e46 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dea:	f000 fa01 	bl	80041f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8003dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df0:	4618      	mov	r0, r3
 8003df2:	f003 fcb1 	bl	8007758 <SEGGER_SYSVIEW_ShrinkId>
 8003df6:	4604      	mov	r4, r0
 8003df8:	2000      	movs	r0, #0
 8003dfa:	f003 fcad 	bl	8007758 <SEGGER_SYSVIEW_ShrinkId>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2101      	movs	r1, #1
 8003e04:	9100      	str	r1, [sp, #0]
 8003e06:	4621      	mov	r1, r4
 8003e08:	205c      	movs	r0, #92	; 0x5c
 8003e0a:	f002 ff8d 	bl	8006d28 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	1e5a      	subs	r2, r3, #1
 8003e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00f      	beq.n	8003e3e <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e20:	3310      	adds	r3, #16
 8003e22:	4618      	mov	r0, r3
 8003e24:	f001 f8e2 	bl	8004fec <xTaskRemoveFromEventList>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d007      	beq.n	8003e3e <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e2e:	4b4d      	ldr	r3, [pc, #308]	; (8003f64 <xQueueReceive+0x21c>)
 8003e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e3e:	f001 fd51 	bl	80058e4 <vPortExitCritical>
				return pdPASS;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e08a      	b.n	8003f5c <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d113      	bne.n	8003e74 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e4c:	f001 fd4a 	bl	80058e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e52:	4618      	mov	r0, r3
 8003e54:	f003 fc80 	bl	8007758 <SEGGER_SYSVIEW_ShrinkId>
 8003e58:	4604      	mov	r4, r0
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	f003 fc7c 	bl	8007758 <SEGGER_SYSVIEW_ShrinkId>
 8003e60:	4602      	mov	r2, r0
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2101      	movs	r1, #1
 8003e66:	9100      	str	r1, [sp, #0]
 8003e68:	4621      	mov	r1, r4
 8003e6a:	205c      	movs	r0, #92	; 0x5c
 8003e6c:	f002 ff5c 	bl	8006d28 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8003e70:	2300      	movs	r3, #0
 8003e72:	e073      	b.n	8003f5c <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e7a:	f107 0310 	add.w	r3, r7, #16
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f001 f91a 	bl	80050b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e84:	2301      	movs	r3, #1
 8003e86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e88:	f001 fd2c 	bl	80058e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e8c:	f000 fe98 	bl	8004bc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e90:	f001 fcf8 	bl	8005884 <vPortEnterCritical>
 8003e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e9a:	b25b      	sxtb	r3, r3
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d103      	bne.n	8003eaa <xQueueReceive+0x162>
 8003ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eb0:	b25b      	sxtb	r3, r3
 8003eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb6:	d103      	bne.n	8003ec0 <xQueueReceive+0x178>
 8003eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ec0:	f001 fd10 	bl	80058e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ec4:	1d3a      	adds	r2, r7, #4
 8003ec6:	f107 0310 	add.w	r3, r7, #16
 8003eca:	4611      	mov	r1, r2
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f001 f909 	bl	80050e4 <xTaskCheckForTimeOut>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d124      	bne.n	8003f22 <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eda:	f000 fa01 	bl	80042e0 <prvIsQueueEmpty>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d018      	beq.n	8003f16 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee6:	3324      	adds	r3, #36	; 0x24
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	4611      	mov	r1, r2
 8003eec:	4618      	mov	r0, r3
 8003eee:	f001 f859 	bl	8004fa4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ef4:	f000 f9a2 	bl	800423c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ef8:	f000 fe70 	bl	8004bdc <xTaskResumeAll>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f47f af69 	bne.w	8003dd6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003f04:	4b17      	ldr	r3, [pc, #92]	; (8003f64 <xQueueReceive+0x21c>)
 8003f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	e75f      	b.n	8003dd6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f18:	f000 f990 	bl	800423c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f1c:	f000 fe5e 	bl	8004bdc <xTaskResumeAll>
 8003f20:	e759      	b.n	8003dd6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f24:	f000 f98a 	bl	800423c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f28:	f000 fe58 	bl	8004bdc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f2e:	f000 f9d7 	bl	80042e0 <prvIsQueueEmpty>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f43f af4e 	beq.w	8003dd6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f003 fc0b 	bl	8007758 <SEGGER_SYSVIEW_ShrinkId>
 8003f42:	4604      	mov	r4, r0
 8003f44:	2000      	movs	r0, #0
 8003f46:	f003 fc07 	bl	8007758 <SEGGER_SYSVIEW_ShrinkId>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2101      	movs	r1, #1
 8003f50:	9100      	str	r1, [sp, #0]
 8003f52:	4621      	mov	r1, r4
 8003f54:	205c      	movs	r0, #92	; 0x5c
 8003f56:	f002 fee7 	bl	8006d28 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8003f5a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3734      	adds	r7, #52	; 0x34
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd90      	pop	{r4, r7, pc}
 8003f64:	e000ed04 	.word	0xe000ed04

08003f68 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003f68:	b590      	push	{r4, r7, lr}
 8003f6a:	b08f      	sub	sp, #60	; 0x3c
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10a      	bne.n	8003f94 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	623b      	str	r3, [r7, #32]
}
 8003f90:	bf00      	nop
 8003f92:	e7fe      	b.n	8003f92 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d103      	bne.n	8003fa2 <xQueueReceiveFromISR+0x3a>
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <xQueueReceiveFromISR+0x3e>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <xQueueReceiveFromISR+0x40>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10a      	bne.n	8003fc2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	61fb      	str	r3, [r7, #28]
}
 8003fbe:	bf00      	nop
 8003fc0:	e7fe      	b.n	8003fc0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fc2:	f001 fd49 	bl	8005a58 <vPortValidateInterruptPriority>
	__asm volatile
 8003fc6:	f3ef 8211 	mrs	r2, BASEPRI
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	61ba      	str	r2, [r7, #24]
 8003fdc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003fde:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d03e      	beq.n	800406c <xQueueReceiveFromISR+0x104>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f003 fbac 	bl	8007758 <SEGGER_SYSVIEW_ShrinkId>
 8004000:	4604      	mov	r4, r0
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4618      	mov	r0, r3
 8004006:	f003 fba7 	bl	8007758 <SEGGER_SYSVIEW_ShrinkId>
 800400a:	4602      	mov	r2, r0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4621      	mov	r1, r4
 8004010:	2062      	movs	r0, #98	; 0x62
 8004012:	f002 fe13 	bl	8006c3c <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004016:	68b9      	ldr	r1, [r7, #8]
 8004018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800401a:	f000 f8e9 	bl	80041f0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	1e5a      	subs	r2, r3, #1
 8004022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004024:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004026:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800402a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402e:	d112      	bne.n	8004056 <xQueueReceiveFromISR+0xee>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d016      	beq.n	8004066 <xQueueReceiveFromISR+0xfe>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403a:	3310      	adds	r3, #16
 800403c:	4618      	mov	r0, r3
 800403e:	f000 ffd5 	bl	8004fec <xTaskRemoveFromEventList>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00e      	beq.n	8004066 <xQueueReceiveFromISR+0xfe>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00b      	beq.n	8004066 <xQueueReceiveFromISR+0xfe>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	e007      	b.n	8004066 <xQueueReceiveFromISR+0xfe>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800405a:	3301      	adds	r3, #1
 800405c:	b2db      	uxtb	r3, r3
 800405e:	b25a      	sxtb	r2, r3
 8004060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004066:	2301      	movs	r3, #1
 8004068:	637b      	str	r3, [r7, #52]	; 0x34
 800406a:	e010      	b.n	800408e <xQueueReceiveFromISR+0x126>
		}
		else
		{
			xReturn = pdFAIL;
 800406c:	2300      	movs	r3, #0
 800406e:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8004070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004072:	4618      	mov	r0, r3
 8004074:	f003 fb70 	bl	8007758 <SEGGER_SYSVIEW_ShrinkId>
 8004078:	4604      	mov	r4, r0
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	4618      	mov	r0, r3
 800407e:	f003 fb6b 	bl	8007758 <SEGGER_SYSVIEW_ShrinkId>
 8004082:	4602      	mov	r2, r0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4621      	mov	r1, r4
 8004088:	2062      	movs	r0, #98	; 0x62
 800408a:	f002 fdd7 	bl	8006c3c <SEGGER_SYSVIEW_RecordU32x3>
 800408e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004090:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f383 8811 	msr	BASEPRI, r3
}
 8004098:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800409a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800409c:	4618      	mov	r0, r3
 800409e:	373c      	adds	r7, #60	; 0x3c
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd90      	pop	{r4, r7, pc}

080040a4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10a      	bne.n	80040c8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	60bb      	str	r3, [r7, #8]
}
 80040c4:	bf00      	nop
 80040c6:	e7fe      	b.n	80040c6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80040c8:	f001 fbdc 	bl	8005884 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80040d2:	f001 fc07 	bl	80058e4 <vPortExitCritical>

	return uxReturn;
 80040d6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10a      	bne.n	8004108 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80040f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f6:	f383 8811 	msr	BASEPRI, r3
 80040fa:	f3bf 8f6f 	isb	sy
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	60fb      	str	r3, [r7, #12]
}
 8004104:	bf00      	nop
 8004106:	e7fe      	b.n	8004106 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800410e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004110:	4618      	mov	r0, r3
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10d      	bne.n	8004156 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d14d      	bne.n	80041de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	4618      	mov	r0, r3
 8004148:	f001 f96c 	bl	8005424 <xTaskPriorityDisinherit>
 800414c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	e043      	b.n	80041de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d119      	bne.n	8004190 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6858      	ldr	r0, [r3, #4]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	461a      	mov	r2, r3
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	f003 fd2e 	bl	8007bc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	441a      	add	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	429a      	cmp	r2, r3
 8004184:	d32b      	bcc.n	80041de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	605a      	str	r2, [r3, #4]
 800418e:	e026      	b.n	80041de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	68d8      	ldr	r0, [r3, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	461a      	mov	r2, r3
 800419a:	68b9      	ldr	r1, [r7, #8]
 800419c:	f003 fd14 	bl	8007bc8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	425b      	negs	r3, r3
 80041aa:	441a      	add	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d207      	bcs.n	80041cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	425b      	negs	r3, r3
 80041c6:	441a      	add	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d105      	bne.n	80041de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	3b01      	subs	r3, #1
 80041dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80041e6:	697b      	ldr	r3, [r7, #20]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d018      	beq.n	8004234 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	441a      	add	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	429a      	cmp	r2, r3
 800421a:	d303      	bcc.n	8004224 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68d9      	ldr	r1, [r3, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	461a      	mov	r2, r3
 800422e:	6838      	ldr	r0, [r7, #0]
 8004230:	f003 fcca 	bl	8007bc8 <memcpy>
	}
}
 8004234:	bf00      	nop
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004244:	f001 fb1e 	bl	8005884 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800424e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004250:	e011      	b.n	8004276 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	2b00      	cmp	r3, #0
 8004258:	d012      	beq.n	8004280 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3324      	adds	r3, #36	; 0x24
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fec4 	bl	8004fec <xTaskRemoveFromEventList>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800426a:	f000 ff9d 	bl	80051a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	3b01      	subs	r3, #1
 8004272:	b2db      	uxtb	r3, r3
 8004274:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800427a:	2b00      	cmp	r3, #0
 800427c:	dce9      	bgt.n	8004252 <prvUnlockQueue+0x16>
 800427e:	e000      	b.n	8004282 <prvUnlockQueue+0x46>
					break;
 8004280:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	22ff      	movs	r2, #255	; 0xff
 8004286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800428a:	f001 fb2b 	bl	80058e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800428e:	f001 faf9 	bl	8005884 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004298:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800429a:	e011      	b.n	80042c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d012      	beq.n	80042ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3310      	adds	r3, #16
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fe9f 	bl	8004fec <xTaskRemoveFromEventList>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80042b4:	f000 ff78 	bl	80051a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80042b8:	7bbb      	ldrb	r3, [r7, #14]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	dce9      	bgt.n	800429c <prvUnlockQueue+0x60>
 80042c8:	e000      	b.n	80042cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80042ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	22ff      	movs	r2, #255	; 0xff
 80042d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80042d4:	f001 fb06 	bl	80058e4 <vPortExitCritical>
}
 80042d8:	bf00      	nop
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042e8:	f001 facc 	bl	8005884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d102      	bne.n	80042fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80042f4:	2301      	movs	r3, #1
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	e001      	b.n	80042fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042fe:	f001 faf1 	bl	80058e4 <vPortExitCritical>

	return xReturn;
 8004302:	68fb      	ldr	r3, [r7, #12]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004314:	f001 fab6 	bl	8005884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004320:	429a      	cmp	r2, r3
 8004322:	d102      	bne.n	800432a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004324:	2301      	movs	r3, #1
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	e001      	b.n	800432e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800432e:	f001 fad9 	bl	80058e4 <vPortExitCritical>

	return xReturn;
 8004332:	68fb      	ldr	r3, [r7, #12]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08e      	sub	sp, #56	; 0x38
 8004340:	af04      	add	r7, sp, #16
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800434a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10a      	bne.n	8004366 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	623b      	str	r3, [r7, #32]
}
 8004362:	bf00      	nop
 8004364:	e7fe      	b.n	8004364 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <xTaskCreateStatic+0x46>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	61fb      	str	r3, [r7, #28]
}
 800437e:	bf00      	nop
 8004380:	e7fe      	b.n	8004380 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004382:	23bc      	movs	r3, #188	; 0xbc
 8004384:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	2bbc      	cmp	r3, #188	; 0xbc
 800438a:	d00a      	beq.n	80043a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	61bb      	str	r3, [r7, #24]
}
 800439e:	bf00      	nop
 80043a0:	e7fe      	b.n	80043a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80043a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d01e      	beq.n	80043e8 <xTaskCreateStatic+0xac>
 80043aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d01b      	beq.n	80043e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	2202      	movs	r2, #2
 80043be:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043c2:	2300      	movs	r3, #0
 80043c4:	9303      	str	r3, [sp, #12]
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	9302      	str	r3, [sp, #8]
 80043ca:	f107 0314 	add.w	r3, r7, #20
 80043ce:	9301      	str	r3, [sp, #4]
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 f850 	bl	8004480 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043e2:	f000 f8f3 	bl	80045cc <prvAddNewTaskToReadyList>
 80043e6:	e001      	b.n	80043ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80043ec:	697b      	ldr	r3, [r7, #20]
	}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3728      	adds	r7, #40	; 0x28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b08c      	sub	sp, #48	; 0x30
 80043fa:	af04      	add	r7, sp, #16
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	603b      	str	r3, [r7, #0]
 8004402:	4613      	mov	r3, r2
 8004404:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4618      	mov	r0, r3
 800440c:	f001 fbbc 	bl	8005b88 <pvPortMalloc>
 8004410:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00e      	beq.n	8004436 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004418:	20bc      	movs	r0, #188	; 0xbc
 800441a:	f001 fbb5 	bl	8005b88 <pvPortMalloc>
 800441e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	631a      	str	r2, [r3, #48]	; 0x30
 800442c:	e005      	b.n	800443a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800442e:	6978      	ldr	r0, [r7, #20]
 8004430:	f001 fc76 	bl	8005d20 <vPortFree>
 8004434:	e001      	b.n	800443a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004436:	2300      	movs	r3, #0
 8004438:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d017      	beq.n	8004470 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004448:	88fa      	ldrh	r2, [r7, #6]
 800444a:	2300      	movs	r3, #0
 800444c:	9303      	str	r3, [sp, #12]
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	9302      	str	r3, [sp, #8]
 8004452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004454:	9301      	str	r3, [sp, #4]
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68b9      	ldr	r1, [r7, #8]
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 f80e 	bl	8004480 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004464:	69f8      	ldr	r0, [r7, #28]
 8004466:	f000 f8b1 	bl	80045cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800446a:	2301      	movs	r3, #1
 800446c:	61bb      	str	r3, [r7, #24]
 800446e:	e002      	b.n	8004476 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004470:	f04f 33ff 	mov.w	r3, #4294967295
 8004474:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004476:	69bb      	ldr	r3, [r7, #24]
	}
 8004478:	4618      	mov	r0, r3
 800447a:	3720      	adds	r7, #32
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b088      	sub	sp, #32
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800448e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004490:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	461a      	mov	r2, r3
 8004498:	21a5      	movs	r1, #165	; 0xa5
 800449a:	f003 fba3 	bl	8007be4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800449e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044a8:	3b01      	subs	r3, #1
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	f023 0307 	bic.w	r3, r3, #7
 80044b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	617b      	str	r3, [r7, #20]
}
 80044d4:	bf00      	nop
 80044d6:	e7fe      	b.n	80044d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d01f      	beq.n	800451e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	e012      	b.n	800450a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	4413      	add	r3, r2
 80044ea:	7819      	ldrb	r1, [r3, #0]
 80044ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	4413      	add	r3, r2
 80044f2:	3334      	adds	r3, #52	; 0x34
 80044f4:	460a      	mov	r2, r1
 80044f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	4413      	add	r3, r2
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d006      	beq.n	8004512 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	3301      	adds	r3, #1
 8004508:	61fb      	str	r3, [r7, #28]
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	2b0f      	cmp	r3, #15
 800450e:	d9e9      	bls.n	80044e4 <prvInitialiseNewTask+0x64>
 8004510:	e000      	b.n	8004514 <prvInitialiseNewTask+0x94>
			{
				break;
 8004512:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800451c:	e003      	b.n	8004526 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800451e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004528:	2b06      	cmp	r3, #6
 800452a:	d901      	bls.n	8004530 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800452c:	2306      	movs	r3, #6
 800452e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004534:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800453a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800453c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453e:	2200      	movs	r2, #0
 8004540:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004544:	3304      	adds	r3, #4
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff f850 	bl	80035ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454e:	3318      	adds	r3, #24
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff f84b 	bl	80035ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800455a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	f1c3 0207 	rsb	r2, r3, #7
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800456a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456e:	2200      	movs	r2, #0
 8004570:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	2200      	movs	r2, #0
 8004578:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800457c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457e:	3354      	adds	r3, #84	; 0x54
 8004580:	2260      	movs	r2, #96	; 0x60
 8004582:	2100      	movs	r1, #0
 8004584:	4618      	mov	r0, r3
 8004586:	f003 fb2d 	bl	8007be4 <memset>
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	4a0c      	ldr	r2, [pc, #48]	; (80045c0 <prvInitialiseNewTask+0x140>)
 800458e:	659a      	str	r2, [r3, #88]	; 0x58
 8004590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004592:	4a0c      	ldr	r2, [pc, #48]	; (80045c4 <prvInitialiseNewTask+0x144>)
 8004594:	65da      	str	r2, [r3, #92]	; 0x5c
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	4a0b      	ldr	r2, [pc, #44]	; (80045c8 <prvInitialiseNewTask+0x148>)
 800459a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	68f9      	ldr	r1, [r7, #12]
 80045a0:	69b8      	ldr	r0, [r7, #24]
 80045a2:	f001 f841 	bl	8005628 <pxPortInitialiseStack>
 80045a6:	4602      	mov	r2, r0
 80045a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045b8:	bf00      	nop
 80045ba:	3720      	adds	r7, #32
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	08007f44 	.word	0x08007f44
 80045c4:	08007f64 	.word	0x08007f64
 80045c8:	08007f24 	.word	0x08007f24

080045cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045cc:	b5b0      	push	{r4, r5, r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045d4:	f001 f956 	bl	8005884 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045d8:	4b3b      	ldr	r3, [pc, #236]	; (80046c8 <prvAddNewTaskToReadyList+0xfc>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	3301      	adds	r3, #1
 80045de:	4a3a      	ldr	r2, [pc, #232]	; (80046c8 <prvAddNewTaskToReadyList+0xfc>)
 80045e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045e2:	4b3a      	ldr	r3, [pc, #232]	; (80046cc <prvAddNewTaskToReadyList+0x100>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d109      	bne.n	80045fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045ea:	4a38      	ldr	r2, [pc, #224]	; (80046cc <prvAddNewTaskToReadyList+0x100>)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045f0:	4b35      	ldr	r3, [pc, #212]	; (80046c8 <prvAddNewTaskToReadyList+0xfc>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d110      	bne.n	800461a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045f8:	f000 fdfc 	bl	80051f4 <prvInitialiseTaskLists>
 80045fc:	e00d      	b.n	800461a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80045fe:	4b34      	ldr	r3, [pc, #208]	; (80046d0 <prvAddNewTaskToReadyList+0x104>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004606:	4b31      	ldr	r3, [pc, #196]	; (80046cc <prvAddNewTaskToReadyList+0x100>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	429a      	cmp	r2, r3
 8004612:	d802      	bhi.n	800461a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004614:	4a2d      	ldr	r2, [pc, #180]	; (80046cc <prvAddNewTaskToReadyList+0x100>)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800461a:	4b2e      	ldr	r3, [pc, #184]	; (80046d4 <prvAddNewTaskToReadyList+0x108>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3301      	adds	r3, #1
 8004620:	4a2c      	ldr	r2, [pc, #176]	; (80046d4 <prvAddNewTaskToReadyList+0x108>)
 8004622:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004624:	4b2b      	ldr	r3, [pc, #172]	; (80046d4 <prvAddNewTaskToReadyList+0x108>)
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d016      	beq.n	8004660 <prvAddNewTaskToReadyList+0x94>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4618      	mov	r0, r3
 8004636:	f002 ff69 	bl	800750c <SEGGER_SYSVIEW_OnTaskCreate>
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	461d      	mov	r5, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	461c      	mov	r4, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	1ae3      	subs	r3, r4, r3
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	462b      	mov	r3, r5
 800465c:	f001 fd88 	bl	8006170 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4618      	mov	r0, r3
 8004664:	f002 ffd6 	bl	8007614 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	2201      	movs	r2, #1
 800466e:	409a      	lsls	r2, r3
 8004670:	4b19      	ldr	r3, [pc, #100]	; (80046d8 <prvAddNewTaskToReadyList+0x10c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4313      	orrs	r3, r2
 8004676:	4a18      	ldr	r2, [pc, #96]	; (80046d8 <prvAddNewTaskToReadyList+0x10c>)
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4a15      	ldr	r2, [pc, #84]	; (80046dc <prvAddNewTaskToReadyList+0x110>)
 8004688:	441a      	add	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3304      	adds	r3, #4
 800468e:	4619      	mov	r1, r3
 8004690:	4610      	mov	r0, r2
 8004692:	f7fe ffb8 	bl	8003606 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004696:	f001 f925 	bl	80058e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800469a:	4b0d      	ldr	r3, [pc, #52]	; (80046d0 <prvAddNewTaskToReadyList+0x104>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00e      	beq.n	80046c0 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80046a2:	4b0a      	ldr	r3, [pc, #40]	; (80046cc <prvAddNewTaskToReadyList+0x100>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d207      	bcs.n	80046c0 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <prvAddNewTaskToReadyList+0x114>)
 80046b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bdb0      	pop	{r4, r5, r7, pc}
 80046c8:	200004ec 	.word	0x200004ec
 80046cc:	200003ec 	.word	0x200003ec
 80046d0:	200004f8 	.word	0x200004f8
 80046d4:	20000508 	.word	0x20000508
 80046d8:	200004f4 	.word	0x200004f4
 80046dc:	200003f0 	.word	0x200003f0
 80046e0:	e000ed04 	.word	0xe000ed04

080046e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d01b      	beq.n	800472e <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046f6:	4b15      	ldr	r3, [pc, #84]	; (800474c <vTaskDelay+0x68>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <vTaskDelay+0x30>
	__asm volatile
 80046fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	60bb      	str	r3, [r7, #8]
}
 8004710:	bf00      	nop
 8004712:	e7fe      	b.n	8004712 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004714:	f000 fa54 	bl	8004bc0 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	2023      	movs	r0, #35	; 0x23
 800471c:	f002 f9f8 	bl	8006b10 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004720:	2100      	movs	r1, #0
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 ff08 	bl	8005538 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004728:	f000 fa58 	bl	8004bdc <xTaskResumeAll>
 800472c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d107      	bne.n	8004744 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 8004734:	4b06      	ldr	r3, [pc, #24]	; (8004750 <vTaskDelay+0x6c>)
 8004736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004744:	bf00      	nop
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20000514 	.word	0x20000514
 8004750:	e000ed04 	.word	0xe000ed04

08004754 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800475c:	f001 f892 	bl	8005884 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d102      	bne.n	800476c <vTaskSuspend+0x18>
 8004766:	4b43      	ldr	r3, [pc, #268]	; (8004874 <vTaskSuspend+0x120>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	e000      	b.n	800476e <vTaskSuspend+0x1a>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4618      	mov	r0, r3
 8004774:	f002 fff0 	bl	8007758 <SEGGER_SYSVIEW_ShrinkId>
 8004778:	4603      	mov	r3, r0
 800477a:	4619      	mov	r1, r3
 800477c:	2029      	movs	r0, #41	; 0x29
 800477e:	f002 f9c7 	bl	8006b10 <SEGGER_SYSVIEW_RecordU32>

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3304      	adds	r3, #4
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe ff9a 	bl	80036c0 <uxListRemove>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d115      	bne.n	80047be <vTaskSuspend+0x6a>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004796:	4938      	ldr	r1, [pc, #224]	; (8004878 <vTaskSuspend+0x124>)
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10a      	bne.n	80047be <vTaskSuspend+0x6a>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	2201      	movs	r2, #1
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	43da      	mvns	r2, r3
 80047b4:	4b31      	ldr	r3, [pc, #196]	; (800487c <vTaskSuspend+0x128>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4013      	ands	r3, r2
 80047ba:	4a30      	ldr	r2, [pc, #192]	; (800487c <vTaskSuspend+0x128>)
 80047bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d004      	beq.n	80047d0 <vTaskSuspend+0x7c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3318      	adds	r3, #24
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fe ff78 	bl	80036c0 <uxListRemove>
			}
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB); //SEGGER
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	211b      	movs	r1, #27
 80047d4:	4618      	mov	r0, r3
 80047d6:	f002 ff5f 	bl	8007698 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	3304      	adds	r3, #4
 80047de:	4619      	mov	r1, r3
 80047e0:	4827      	ldr	r0, [pc, #156]	; (8004880 <vTaskSuspend+0x12c>)
 80047e2:	f7fe ff10 	bl	8003606 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d103      	bne.n	80047fa <vTaskSuspend+0xa6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80047fa:	f001 f873 	bl	80058e4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80047fe:	4b21      	ldr	r3, [pc, #132]	; (8004884 <vTaskSuspend+0x130>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d005      	beq.n	8004812 <vTaskSuspend+0xbe>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8004806:	f001 f83d 	bl	8005884 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800480a:	f000 fdcd 	bl	80053a8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800480e:	f001 f869 	bl	80058e4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8004812:	4b18      	ldr	r3, [pc, #96]	; (8004874 <vTaskSuspend+0x120>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	429a      	cmp	r2, r3
 800481a:	d127      	bne.n	800486c <vTaskSuspend+0x118>
		{
			if( xSchedulerRunning != pdFALSE )
 800481c:	4b19      	ldr	r3, [pc, #100]	; (8004884 <vTaskSuspend+0x130>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d017      	beq.n	8004854 <vTaskSuspend+0x100>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8004824:	4b18      	ldr	r3, [pc, #96]	; (8004888 <vTaskSuspend+0x134>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00a      	beq.n	8004842 <vTaskSuspend+0xee>
	__asm volatile
 800482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	60bb      	str	r3, [r7, #8]
}
 800483e:	bf00      	nop
 8004840:	e7fe      	b.n	8004840 <vTaskSuspend+0xec>
				portYIELD_WITHIN_API();
 8004842:	4b12      	ldr	r3, [pc, #72]	; (800488c <vTaskSuspend+0x138>)
 8004844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004852:	e00b      	b.n	800486c <vTaskSuspend+0x118>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8004854:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <vTaskSuspend+0x12c>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4b0d      	ldr	r3, [pc, #52]	; (8004890 <vTaskSuspend+0x13c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d103      	bne.n	8004868 <vTaskSuspend+0x114>
					pxCurrentTCB = NULL;
 8004860:	4b04      	ldr	r3, [pc, #16]	; (8004874 <vTaskSuspend+0x120>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
	}
 8004866:	e001      	b.n	800486c <vTaskSuspend+0x118>
					vTaskSwitchContext();
 8004868:	f000 fb26 	bl	8004eb8 <vTaskSwitchContext>
	}
 800486c:	bf00      	nop
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	200003ec 	.word	0x200003ec
 8004878:	200003f0 	.word	0x200003f0
 800487c:	200004f4 	.word	0x200004f4
 8004880:	200004d8 	.word	0x200004d8
 8004884:	200004f8 	.word	0x200004f8
 8004888:	20000514 	.word	0x20000514
 800488c:	e000ed04 	.word	0xe000ed04
 8004890:	200004ec 	.word	0x200004ec

08004894 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10a      	bne.n	80048c0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80048aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	60fb      	str	r3, [r7, #12]
}
 80048bc:	bf00      	nop
 80048be:	e7fe      	b.n	80048be <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	4a0a      	ldr	r2, [pc, #40]	; (80048f0 <prvTaskIsTaskSuspended+0x5c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d10a      	bne.n	80048e0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ce:	4a09      	ldr	r2, [pc, #36]	; (80048f4 <prvTaskIsTaskSuspended+0x60>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d005      	beq.n	80048e0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80048dc:	2301      	movs	r3, #1
 80048de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80048e0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80048e2:	4618      	mov	r0, r3
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	200004d8 	.word	0x200004d8
 80048f4:	200004ac 	.word	0x200004ac

080048f8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10a      	bne.n	8004920 <vTaskResume+0x28>
	__asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	60bb      	str	r3, [r7, #8]
}
 800491c:	bf00      	nop
 800491e:	e7fe      	b.n	800491e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8004920:	4b26      	ldr	r3, [pc, #152]	; (80049bc <vTaskResume+0xc4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	429a      	cmp	r2, r3
 8004928:	d044      	beq.n	80049b4 <vTaskResume+0xbc>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d041      	beq.n	80049b4 <vTaskResume+0xbc>
		{
			taskENTER_CRITICAL();
 8004930:	f000 ffa8 	bl	8005884 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f7ff ffad 	bl	8004894 <prvTaskIsTaskSuspended>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d037      	beq.n	80049b0 <vTaskResume+0xb8>
				{
					traceTASK_RESUME( pxTCB );
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4618      	mov	r0, r3
 8004944:	f002 ff08 	bl	8007758 <SEGGER_SYSVIEW_ShrinkId>
 8004948:	4603      	mov	r3, r0
 800494a:	4619      	mov	r1, r3
 800494c:	202a      	movs	r0, #42	; 0x2a
 800494e:	f002 f8df 	bl	8006b10 <SEGGER_SYSVIEW_RecordU32>

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3304      	adds	r3, #4
 8004956:	4618      	mov	r0, r3
 8004958:	f7fe feb2 	bl	80036c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4618      	mov	r0, r3
 8004960:	f002 fe58 	bl	8007614 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	2201      	movs	r2, #1
 800496a:	409a      	lsls	r2, r3
 800496c:	4b14      	ldr	r3, [pc, #80]	; (80049c0 <vTaskResume+0xc8>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4313      	orrs	r3, r2
 8004972:	4a13      	ldr	r2, [pc, #76]	; (80049c0 <vTaskResume+0xc8>)
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497a:	4613      	mov	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4a10      	ldr	r2, [pc, #64]	; (80049c4 <vTaskResume+0xcc>)
 8004984:	441a      	add	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3304      	adds	r3, #4
 800498a:	4619      	mov	r1, r3
 800498c:	4610      	mov	r0, r2
 800498e:	f7fe fe3a 	bl	8003606 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004996:	4b09      	ldr	r3, [pc, #36]	; (80049bc <vTaskResume+0xc4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	429a      	cmp	r2, r3
 800499e:	d307      	bcc.n	80049b0 <vTaskResume+0xb8>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80049a0:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <vTaskResume+0xd0>)
 80049a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80049b0:	f000 ff98 	bl	80058e4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049b4:	bf00      	nop
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	200003ec 	.word	0x200003ec
 80049c0:	200004f4 	.word	0x200004f4
 80049c4:	200003f0 	.word	0x200003f0
 80049c8:	e000ed04 	.word	0xe000ed04

080049cc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08a      	sub	sp, #40	; 0x28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80049d4:	2300      	movs	r3, #0
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10a      	bne.n	80049f8 <xTaskResumeFromISR+0x2c>
	__asm volatile
 80049e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e6:	f383 8811 	msr	BASEPRI, r3
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	61bb      	str	r3, [r7, #24]
}
 80049f4:	bf00      	nop
 80049f6:	e7fe      	b.n	80049f6 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049f8:	f001 f82e 	bl	8005a58 <vPortValidateInterruptPriority>
	__asm volatile
 80049fc:	f3ef 8211 	mrs	r2, BASEPRI
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	617a      	str	r2, [r7, #20]
 8004a12:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004a14:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a16:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8004a18:	6a38      	ldr	r0, [r7, #32]
 8004a1a:	f7ff ff3b 	bl	8004894 <prvTaskIsTaskSuspended>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d03c      	beq.n	8004a9e <xTaskResumeFromISR+0xd2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f002 fe96 	bl	8007758 <SEGGER_SYSVIEW_ShrinkId>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	4619      	mov	r1, r3
 8004a30:	202b      	movs	r0, #43	; 0x2b
 8004a32:	f002 f86d 	bl	8006b10 <SEGGER_SYSVIEW_RecordU32>

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a36:	4b1f      	ldr	r3, [pc, #124]	; (8004ab4 <xTaskResumeFromISR+0xe8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d129      	bne.n	8004a92 <xTaskResumeFromISR+0xc6>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a42:	4b1d      	ldr	r3, [pc, #116]	; (8004ab8 <xTaskResumeFromISR+0xec>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d301      	bcc.n	8004a50 <xTaskResumeFromISR+0x84>
					{
						xYieldRequired = pdTRUE;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	3304      	adds	r3, #4
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fe fe33 	bl	80036c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f002 fdd9 	bl	8007614 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	2201      	movs	r2, #1
 8004a68:	409a      	lsls	r2, r3
 8004a6a:	4b14      	ldr	r3, [pc, #80]	; (8004abc <xTaskResumeFromISR+0xf0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	4a12      	ldr	r2, [pc, #72]	; (8004abc <xTaskResumeFromISR+0xf0>)
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4a0f      	ldr	r2, [pc, #60]	; (8004ac0 <xTaskResumeFromISR+0xf4>)
 8004a82:	441a      	add	r2, r3
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	3304      	adds	r3, #4
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	f7fe fdbb 	bl	8003606 <vListInsertEnd>
 8004a90:	e005      	b.n	8004a9e <xTaskResumeFromISR+0xd2>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	3318      	adds	r3, #24
 8004a96:	4619      	mov	r1, r3
 8004a98:	480a      	ldr	r0, [pc, #40]	; (8004ac4 <xTaskResumeFromISR+0xf8>)
 8004a9a:	f7fe fdb4 	bl	8003606 <vListInsertEnd>
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f383 8811 	msr	BASEPRI, r3
}
 8004aa8:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3728      	adds	r7, #40	; 0x28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	20000514 	.word	0x20000514
 8004ab8:	200003ec 	.word	0x200003ec
 8004abc:	200004f4 	.word	0x200004f4
 8004ac0:	200003f0 	.word	0x200003f0
 8004ac4:	200004ac 	.word	0x200004ac

08004ac8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08a      	sub	sp, #40	; 0x28
 8004acc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ad6:	463a      	mov	r2, r7
 8004ad8:	1d39      	adds	r1, r7, #4
 8004ada:	f107 0308 	add.w	r3, r7, #8
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fb fd5e 	bl	80005a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ae4:	6839      	ldr	r1, [r7, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	9202      	str	r2, [sp, #8]
 8004aec:	9301      	str	r3, [sp, #4]
 8004aee:	2300      	movs	r3, #0
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	2300      	movs	r3, #0
 8004af4:	460a      	mov	r2, r1
 8004af6:	492a      	ldr	r1, [pc, #168]	; (8004ba0 <vTaskStartScheduler+0xd8>)
 8004af8:	482a      	ldr	r0, [pc, #168]	; (8004ba4 <vTaskStartScheduler+0xdc>)
 8004afa:	f7ff fc1f 	bl	800433c <xTaskCreateStatic>
 8004afe:	4603      	mov	r3, r0
 8004b00:	4a29      	ldr	r2, [pc, #164]	; (8004ba8 <vTaskStartScheduler+0xe0>)
 8004b02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b04:	4b28      	ldr	r3, [pc, #160]	; (8004ba8 <vTaskStartScheduler+0xe0>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	e001      	b.n	8004b16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d12e      	bne.n	8004b7a <vTaskStartScheduler+0xb2>
	__asm volatile
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	613b      	str	r3, [r7, #16]
}
 8004b2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b30:	4b1e      	ldr	r3, [pc, #120]	; (8004bac <vTaskStartScheduler+0xe4>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3354      	adds	r3, #84	; 0x54
 8004b36:	4a1e      	ldr	r2, [pc, #120]	; (8004bb0 <vTaskStartScheduler+0xe8>)
 8004b38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b3a:	4b1e      	ldr	r3, [pc, #120]	; (8004bb4 <vTaskStartScheduler+0xec>)
 8004b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b42:	4b1d      	ldr	r3, [pc, #116]	; (8004bb8 <vTaskStartScheduler+0xf0>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b48:	4b1c      	ldr	r3, [pc, #112]	; (8004bbc <vTaskStartScheduler+0xf4>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8004b4e:	4b17      	ldr	r3, [pc, #92]	; (8004bac <vTaskStartScheduler+0xe4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3334      	adds	r3, #52	; 0x34
 8004b54:	2205      	movs	r2, #5
 8004b56:	4912      	ldr	r1, [pc, #72]	; (8004ba0 <vTaskStartScheduler+0xd8>)
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f003 f825 	bl	8007ba8 <memcmp>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d005      	beq.n	8004b70 <vTaskStartScheduler+0xa8>
 8004b64:	4b11      	ldr	r3, [pc, #68]	; (8004bac <vTaskStartScheduler+0xe4>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f002 fd11 	bl	8007590 <SEGGER_SYSVIEW_OnTaskStartExec>
 8004b6e:	e001      	b.n	8004b74 <vTaskStartScheduler+0xac>
 8004b70:	f002 fcb0 	bl	80074d4 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b74:	f000 fde4 	bl	8005740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b78:	e00e      	b.n	8004b98 <vTaskStartScheduler+0xd0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b80:	d10a      	bne.n	8004b98 <vTaskStartScheduler+0xd0>
	__asm volatile
 8004b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	60fb      	str	r3, [r7, #12]
}
 8004b94:	bf00      	nop
 8004b96:	e7fe      	b.n	8004b96 <vTaskStartScheduler+0xce>
}
 8004b98:	bf00      	nop
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	08007e2c 	.word	0x08007e2c
 8004ba4:	080051c1 	.word	0x080051c1
 8004ba8:	20000510 	.word	0x20000510
 8004bac:	200003ec 	.word	0x200003ec
 8004bb0:	20000010 	.word	0x20000010
 8004bb4:	2000050c 	.word	0x2000050c
 8004bb8:	200004f8 	.word	0x200004f8
 8004bbc:	200004f0 	.word	0x200004f0

08004bc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004bc4:	4b04      	ldr	r3, [pc, #16]	; (8004bd8 <vTaskSuspendAll+0x18>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	4a03      	ldr	r2, [pc, #12]	; (8004bd8 <vTaskSuspendAll+0x18>)
 8004bcc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004bce:	bf00      	nop
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	20000514 	.word	0x20000514

08004bdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004bea:	4b43      	ldr	r3, [pc, #268]	; (8004cf8 <xTaskResumeAll+0x11c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10a      	bne.n	8004c08 <xTaskResumeAll+0x2c>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	603b      	str	r3, [r7, #0]
}
 8004c04:	bf00      	nop
 8004c06:	e7fe      	b.n	8004c06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c08:	f000 fe3c 	bl	8005884 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c0c:	4b3a      	ldr	r3, [pc, #232]	; (8004cf8 <xTaskResumeAll+0x11c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3b01      	subs	r3, #1
 8004c12:	4a39      	ldr	r2, [pc, #228]	; (8004cf8 <xTaskResumeAll+0x11c>)
 8004c14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c16:	4b38      	ldr	r3, [pc, #224]	; (8004cf8 <xTaskResumeAll+0x11c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d165      	bne.n	8004cea <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c1e:	4b37      	ldr	r3, [pc, #220]	; (8004cfc <xTaskResumeAll+0x120>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d061      	beq.n	8004cea <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c26:	e032      	b.n	8004c8e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c28:	4b35      	ldr	r3, [pc, #212]	; (8004d00 <xTaskResumeAll+0x124>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3318      	adds	r3, #24
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7fe fd43 	bl	80036c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe fd3e 	bl	80036c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f002 fce4 	bl	8007614 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	2201      	movs	r2, #1
 8004c52:	409a      	lsls	r2, r3
 8004c54:	4b2b      	ldr	r3, [pc, #172]	; (8004d04 <xTaskResumeAll+0x128>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	4a2a      	ldr	r2, [pc, #168]	; (8004d04 <xTaskResumeAll+0x128>)
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c62:	4613      	mov	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4a27      	ldr	r2, [pc, #156]	; (8004d08 <xTaskResumeAll+0x12c>)
 8004c6c:	441a      	add	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3304      	adds	r3, #4
 8004c72:	4619      	mov	r1, r3
 8004c74:	4610      	mov	r0, r2
 8004c76:	f7fe fcc6 	bl	8003606 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7e:	4b23      	ldr	r3, [pc, #140]	; (8004d0c <xTaskResumeAll+0x130>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d302      	bcc.n	8004c8e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8004c88:	4b21      	ldr	r3, [pc, #132]	; (8004d10 <xTaskResumeAll+0x134>)
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c8e:	4b1c      	ldr	r3, [pc, #112]	; (8004d00 <xTaskResumeAll+0x124>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1c8      	bne.n	8004c28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c9c:	f000 fb84 	bl	80053a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ca0:	4b1c      	ldr	r3, [pc, #112]	; (8004d14 <xTaskResumeAll+0x138>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d010      	beq.n	8004cce <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004cac:	f000 f848 	bl	8004d40 <xTaskIncrementTick>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8004cb6:	4b16      	ldr	r3, [pc, #88]	; (8004d10 <xTaskResumeAll+0x134>)
 8004cb8:	2201      	movs	r2, #1
 8004cba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1f1      	bne.n	8004cac <xTaskResumeAll+0xd0>

						xPendedTicks = 0;
 8004cc8:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <xTaskResumeAll+0x138>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004cce:	4b10      	ldr	r3, [pc, #64]	; (8004d10 <xTaskResumeAll+0x134>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d009      	beq.n	8004cea <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004cda:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <xTaskResumeAll+0x13c>)
 8004cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cea:	f000 fdfb 	bl	80058e4 <vPortExitCritical>

	return xAlreadyYielded;
 8004cee:	68bb      	ldr	r3, [r7, #8]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	20000514 	.word	0x20000514
 8004cfc:	200004ec 	.word	0x200004ec
 8004d00:	200004ac 	.word	0x200004ac
 8004d04:	200004f4 	.word	0x200004f4
 8004d08:	200003f0 	.word	0x200003f0
 8004d0c:	200003ec 	.word	0x200003ec
 8004d10:	20000500 	.word	0x20000500
 8004d14:	200004fc 	.word	0x200004fc
 8004d18:	e000ed04 	.word	0xe000ed04

08004d1c <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d22:	f000 fe99 	bl	8005a58 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004d26:	2300      	movs	r3, #0
 8004d28:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004d2a:	4b04      	ldr	r3, [pc, #16]	; (8004d3c <xTaskGetTickCountFromISR+0x20>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d30:	683b      	ldr	r3, [r7, #0]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	200004f0 	.word	0x200004f0

08004d40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d46:	2300      	movs	r3, #0
 8004d48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d4a:	4b50      	ldr	r3, [pc, #320]	; (8004e8c <xTaskIncrementTick+0x14c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f040 8092 	bne.w	8004e78 <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d54:	4b4e      	ldr	r3, [pc, #312]	; (8004e90 <xTaskIncrementTick+0x150>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d5c:	4a4c      	ldr	r2, [pc, #304]	; (8004e90 <xTaskIncrementTick+0x150>)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d120      	bne.n	8004daa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d68:	4b4a      	ldr	r3, [pc, #296]	; (8004e94 <xTaskIncrementTick+0x154>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <xTaskIncrementTick+0x48>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	603b      	str	r3, [r7, #0]
}
 8004d84:	bf00      	nop
 8004d86:	e7fe      	b.n	8004d86 <xTaskIncrementTick+0x46>
 8004d88:	4b42      	ldr	r3, [pc, #264]	; (8004e94 <xTaskIncrementTick+0x154>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	4b42      	ldr	r3, [pc, #264]	; (8004e98 <xTaskIncrementTick+0x158>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a40      	ldr	r2, [pc, #256]	; (8004e94 <xTaskIncrementTick+0x154>)
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	4a40      	ldr	r2, [pc, #256]	; (8004e98 <xTaskIncrementTick+0x158>)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	4b3f      	ldr	r3, [pc, #252]	; (8004e9c <xTaskIncrementTick+0x15c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3301      	adds	r3, #1
 8004da2:	4a3e      	ldr	r2, [pc, #248]	; (8004e9c <xTaskIncrementTick+0x15c>)
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	f000 faff 	bl	80053a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004daa:	4b3d      	ldr	r3, [pc, #244]	; (8004ea0 <xTaskIncrementTick+0x160>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d34c      	bcc.n	8004e4e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004db4:	4b37      	ldr	r3, [pc, #220]	; (8004e94 <xTaskIncrementTick+0x154>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d104      	bne.n	8004dc8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dbe:	4b38      	ldr	r3, [pc, #224]	; (8004ea0 <xTaskIncrementTick+0x160>)
 8004dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc4:	601a      	str	r2, [r3, #0]
					break;
 8004dc6:	e042      	b.n	8004e4e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dc8:	4b32      	ldr	r3, [pc, #200]	; (8004e94 <xTaskIncrementTick+0x154>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d203      	bcs.n	8004de8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004de0:	4a2f      	ldr	r2, [pc, #188]	; (8004ea0 <xTaskIncrementTick+0x160>)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004de6:	e032      	b.n	8004e4e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	3304      	adds	r3, #4
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fe fc67 	bl	80036c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d004      	beq.n	8004e04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	3318      	adds	r3, #24
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fe fc5e 	bl	80036c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f002 fc04 	bl	8007614 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	2201      	movs	r2, #1
 8004e12:	409a      	lsls	r2, r3
 8004e14:	4b23      	ldr	r3, [pc, #140]	; (8004ea4 <xTaskIncrementTick+0x164>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	4a22      	ldr	r2, [pc, #136]	; (8004ea4 <xTaskIncrementTick+0x164>)
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e22:	4613      	mov	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4a1f      	ldr	r2, [pc, #124]	; (8004ea8 <xTaskIncrementTick+0x168>)
 8004e2c:	441a      	add	r2, r3
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	3304      	adds	r3, #4
 8004e32:	4619      	mov	r1, r3
 8004e34:	4610      	mov	r0, r2
 8004e36:	f7fe fbe6 	bl	8003606 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3e:	4b1b      	ldr	r3, [pc, #108]	; (8004eac <xTaskIncrementTick+0x16c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d3b5      	bcc.n	8004db4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e4c:	e7b2      	b.n	8004db4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e4e:	4b17      	ldr	r3, [pc, #92]	; (8004eac <xTaskIncrementTick+0x16c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e54:	4914      	ldr	r1, [pc, #80]	; (8004ea8 <xTaskIncrementTick+0x168>)
 8004e56:	4613      	mov	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	440b      	add	r3, r1
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d901      	bls.n	8004e6a <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 8004e66:	2301      	movs	r3, #1
 8004e68:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e6a:	4b11      	ldr	r3, [pc, #68]	; (8004eb0 <xTaskIncrementTick+0x170>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d007      	beq.n	8004e82 <xTaskIncrementTick+0x142>
			{
				xSwitchRequired = pdTRUE;
 8004e72:	2301      	movs	r3, #1
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	e004      	b.n	8004e82 <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e78:	4b0e      	ldr	r3, [pc, #56]	; (8004eb4 <xTaskIncrementTick+0x174>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	4a0d      	ldr	r2, [pc, #52]	; (8004eb4 <xTaskIncrementTick+0x174>)
 8004e80:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e82:	697b      	ldr	r3, [r7, #20]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	20000514 	.word	0x20000514
 8004e90:	200004f0 	.word	0x200004f0
 8004e94:	200004a4 	.word	0x200004a4
 8004e98:	200004a8 	.word	0x200004a8
 8004e9c:	20000504 	.word	0x20000504
 8004ea0:	2000050c 	.word	0x2000050c
 8004ea4:	200004f4 	.word	0x200004f4
 8004ea8:	200003f0 	.word	0x200003f0
 8004eac:	200003ec 	.word	0x200003ec
 8004eb0:	20000500 	.word	0x20000500
 8004eb4:	200004fc 	.word	0x200004fc

08004eb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ebe:	4b32      	ldr	r3, [pc, #200]	; (8004f88 <vTaskSwitchContext+0xd0>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ec6:	4b31      	ldr	r3, [pc, #196]	; (8004f8c <vTaskSwitchContext+0xd4>)
 8004ec8:	2201      	movs	r2, #1
 8004eca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ecc:	e057      	b.n	8004f7e <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 8004ece:	4b2f      	ldr	r3, [pc, #188]	; (8004f8c <vTaskSwitchContext+0xd4>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ed4:	4b2e      	ldr	r3, [pc, #184]	; (8004f90 <vTaskSwitchContext+0xd8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	fab3 f383 	clz	r3, r3
 8004ee0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004ee2:	7afb      	ldrb	r3, [r7, #11]
 8004ee4:	f1c3 031f 	rsb	r3, r3, #31
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	492a      	ldr	r1, [pc, #168]	; (8004f94 <vTaskSwitchContext+0xdc>)
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10a      	bne.n	8004f14 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	607b      	str	r3, [r7, #4]
}
 8004f10:	bf00      	nop
 8004f12:	e7fe      	b.n	8004f12 <vTaskSwitchContext+0x5a>
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	4613      	mov	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4a1d      	ldr	r2, [pc, #116]	; (8004f94 <vTaskSwitchContext+0xdc>)
 8004f20:	4413      	add	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	605a      	str	r2, [r3, #4]
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	3308      	adds	r3, #8
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d104      	bne.n	8004f44 <vTaskSwitchContext+0x8c>
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	605a      	str	r2, [r3, #4]
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	4a13      	ldr	r2, [pc, #76]	; (8004f98 <vTaskSwitchContext+0xe0>)
 8004f4c:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8004f4e:	4b12      	ldr	r3, [pc, #72]	; (8004f98 <vTaskSwitchContext+0xe0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3334      	adds	r3, #52	; 0x34
 8004f54:	2205      	movs	r2, #5
 8004f56:	4911      	ldr	r1, [pc, #68]	; (8004f9c <vTaskSwitchContext+0xe4>)
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f002 fe25 	bl	8007ba8 <memcmp>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d005      	beq.n	8004f70 <vTaskSwitchContext+0xb8>
 8004f64:	4b0c      	ldr	r3, [pc, #48]	; (8004f98 <vTaskSwitchContext+0xe0>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f002 fb11 	bl	8007590 <SEGGER_SYSVIEW_OnTaskStartExec>
 8004f6e:	e001      	b.n	8004f74 <vTaskSwitchContext+0xbc>
 8004f70:	f002 fab0 	bl	80074d4 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f74:	4b08      	ldr	r3, [pc, #32]	; (8004f98 <vTaskSwitchContext+0xe0>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3354      	adds	r3, #84	; 0x54
 8004f7a:	4a09      	ldr	r2, [pc, #36]	; (8004fa0 <vTaskSwitchContext+0xe8>)
 8004f7c:	6013      	str	r3, [r2, #0]
}
 8004f7e:	bf00      	nop
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20000514 	.word	0x20000514
 8004f8c:	20000500 	.word	0x20000500
 8004f90:	200004f4 	.word	0x200004f4
 8004f94:	200003f0 	.word	0x200003f0
 8004f98:	200003ec 	.word	0x200003ec
 8004f9c:	08007e2c 	.word	0x08007e2c
 8004fa0:	20000010 	.word	0x20000010

08004fa4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10a      	bne.n	8004fca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	60fb      	str	r3, [r7, #12]
}
 8004fc6:	bf00      	nop
 8004fc8:	e7fe      	b.n	8004fc8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fca:	4b07      	ldr	r3, [pc, #28]	; (8004fe8 <vTaskPlaceOnEventList+0x44>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3318      	adds	r3, #24
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7fe fb3b 	bl	800364e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004fd8:	2101      	movs	r1, #1
 8004fda:	6838      	ldr	r0, [r7, #0]
 8004fdc:	f000 faac 	bl	8005538 <prvAddCurrentTaskToDelayedList>
}
 8004fe0:	bf00      	nop
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	200003ec 	.word	0x200003ec

08004fec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10a      	bne.n	8005018 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	60fb      	str	r3, [r7, #12]
}
 8005014:	bf00      	nop
 8005016:	e7fe      	b.n	8005016 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	3318      	adds	r3, #24
 800501c:	4618      	mov	r0, r3
 800501e:	f7fe fb4f 	bl	80036c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005022:	4b1f      	ldr	r3, [pc, #124]	; (80050a0 <xTaskRemoveFromEventList+0xb4>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d120      	bne.n	800506c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	3304      	adds	r3, #4
 800502e:	4618      	mov	r0, r3
 8005030:	f7fe fb46 	bl	80036c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	4618      	mov	r0, r3
 8005038:	f002 faec 	bl	8007614 <SEGGER_SYSVIEW_OnTaskStartReady>
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	2201      	movs	r2, #1
 8005042:	409a      	lsls	r2, r3
 8005044:	4b17      	ldr	r3, [pc, #92]	; (80050a4 <xTaskRemoveFromEventList+0xb8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4313      	orrs	r3, r2
 800504a:	4a16      	ldr	r2, [pc, #88]	; (80050a4 <xTaskRemoveFromEventList+0xb8>)
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005052:	4613      	mov	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4a13      	ldr	r2, [pc, #76]	; (80050a8 <xTaskRemoveFromEventList+0xbc>)
 800505c:	441a      	add	r2, r3
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	3304      	adds	r3, #4
 8005062:	4619      	mov	r1, r3
 8005064:	4610      	mov	r0, r2
 8005066:	f7fe face 	bl	8003606 <vListInsertEnd>
 800506a:	e005      	b.n	8005078 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	3318      	adds	r3, #24
 8005070:	4619      	mov	r1, r3
 8005072:	480e      	ldr	r0, [pc, #56]	; (80050ac <xTaskRemoveFromEventList+0xc0>)
 8005074:	f7fe fac7 	bl	8003606 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507c:	4b0c      	ldr	r3, [pc, #48]	; (80050b0 <xTaskRemoveFromEventList+0xc4>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	429a      	cmp	r2, r3
 8005084:	d905      	bls.n	8005092 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005086:	2301      	movs	r3, #1
 8005088:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800508a:	4b0a      	ldr	r3, [pc, #40]	; (80050b4 <xTaskRemoveFromEventList+0xc8>)
 800508c:	2201      	movs	r2, #1
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	e001      	b.n	8005096 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8005092:	2300      	movs	r3, #0
 8005094:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005096:	697b      	ldr	r3, [r7, #20]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20000514 	.word	0x20000514
 80050a4:	200004f4 	.word	0x200004f4
 80050a8:	200003f0 	.word	0x200003f0
 80050ac:	200004ac 	.word	0x200004ac
 80050b0:	200003ec 	.word	0x200003ec
 80050b4:	20000500 	.word	0x20000500

080050b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050c0:	4b06      	ldr	r3, [pc, #24]	; (80050dc <vTaskInternalSetTimeOutState+0x24>)
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050c8:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <vTaskInternalSetTimeOutState+0x28>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	605a      	str	r2, [r3, #4]
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	20000504 	.word	0x20000504
 80050e0:	200004f0 	.word	0x200004f0

080050e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b088      	sub	sp, #32
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10a      	bne.n	800510a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80050f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	613b      	str	r3, [r7, #16]
}
 8005106:	bf00      	nop
 8005108:	e7fe      	b.n	8005108 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	60fb      	str	r3, [r7, #12]
}
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005126:	f000 fbad 	bl	8005884 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800512a:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <xTaskCheckForTimeOut+0xbc>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005142:	d102      	bne.n	800514a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005144:	2300      	movs	r3, #0
 8005146:	61fb      	str	r3, [r7, #28]
 8005148:	e023      	b.n	8005192 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	4b15      	ldr	r3, [pc, #84]	; (80051a4 <xTaskCheckForTimeOut+0xc0>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d007      	beq.n	8005166 <xTaskCheckForTimeOut+0x82>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	429a      	cmp	r2, r3
 800515e:	d302      	bcc.n	8005166 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005160:	2301      	movs	r3, #1
 8005162:	61fb      	str	r3, [r7, #28]
 8005164:	e015      	b.n	8005192 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	429a      	cmp	r2, r3
 800516e:	d20b      	bcs.n	8005188 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	1ad2      	subs	r2, r2, r3
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff ff9b 	bl	80050b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005182:	2300      	movs	r3, #0
 8005184:	61fb      	str	r3, [r7, #28]
 8005186:	e004      	b.n	8005192 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800518e:	2301      	movs	r3, #1
 8005190:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005192:	f000 fba7 	bl	80058e4 <vPortExitCritical>

	return xReturn;
 8005196:	69fb      	ldr	r3, [r7, #28]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3720      	adds	r7, #32
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	200004f0 	.word	0x200004f0
 80051a4:	20000504 	.word	0x20000504

080051a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80051ac:	4b03      	ldr	r3, [pc, #12]	; (80051bc <vTaskMissedYield+0x14>)
 80051ae:	2201      	movs	r2, #1
 80051b0:	601a      	str	r2, [r3, #0]
}
 80051b2:	bf00      	nop
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	20000500 	.word	0x20000500

080051c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051c8:	f000 f854 	bl	8005274 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051cc:	4b07      	ldr	r3, [pc, #28]	; (80051ec <prvIdleTask+0x2c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d907      	bls.n	80051e4 <prvIdleTask+0x24>
			{
				taskYIELD();
 80051d4:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <prvIdleTask+0x30>)
 80051d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80051e4:	f7fb f9c8 	bl	8000578 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80051e8:	e7ee      	b.n	80051c8 <prvIdleTask+0x8>
 80051ea:	bf00      	nop
 80051ec:	200003f0 	.word	0x200003f0
 80051f0:	e000ed04 	.word	0xe000ed04

080051f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051fa:	2300      	movs	r3, #0
 80051fc:	607b      	str	r3, [r7, #4]
 80051fe:	e00c      	b.n	800521a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	4613      	mov	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4a12      	ldr	r2, [pc, #72]	; (8005254 <prvInitialiseTaskLists+0x60>)
 800520c:	4413      	add	r3, r2
 800520e:	4618      	mov	r0, r3
 8005210:	f7fe f9cc 	bl	80035ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3301      	adds	r3, #1
 8005218:	607b      	str	r3, [r7, #4]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b06      	cmp	r3, #6
 800521e:	d9ef      	bls.n	8005200 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005220:	480d      	ldr	r0, [pc, #52]	; (8005258 <prvInitialiseTaskLists+0x64>)
 8005222:	f7fe f9c3 	bl	80035ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005226:	480d      	ldr	r0, [pc, #52]	; (800525c <prvInitialiseTaskLists+0x68>)
 8005228:	f7fe f9c0 	bl	80035ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800522c:	480c      	ldr	r0, [pc, #48]	; (8005260 <prvInitialiseTaskLists+0x6c>)
 800522e:	f7fe f9bd 	bl	80035ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005232:	480c      	ldr	r0, [pc, #48]	; (8005264 <prvInitialiseTaskLists+0x70>)
 8005234:	f7fe f9ba 	bl	80035ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005238:	480b      	ldr	r0, [pc, #44]	; (8005268 <prvInitialiseTaskLists+0x74>)
 800523a:	f7fe f9b7 	bl	80035ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800523e:	4b0b      	ldr	r3, [pc, #44]	; (800526c <prvInitialiseTaskLists+0x78>)
 8005240:	4a05      	ldr	r2, [pc, #20]	; (8005258 <prvInitialiseTaskLists+0x64>)
 8005242:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005244:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <prvInitialiseTaskLists+0x7c>)
 8005246:	4a05      	ldr	r2, [pc, #20]	; (800525c <prvInitialiseTaskLists+0x68>)
 8005248:	601a      	str	r2, [r3, #0]
}
 800524a:	bf00      	nop
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	200003f0 	.word	0x200003f0
 8005258:	2000047c 	.word	0x2000047c
 800525c:	20000490 	.word	0x20000490
 8005260:	200004ac 	.word	0x200004ac
 8005264:	200004c0 	.word	0x200004c0
 8005268:	200004d8 	.word	0x200004d8
 800526c:	200004a4 	.word	0x200004a4
 8005270:	200004a8 	.word	0x200004a8

08005274 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800527a:	e019      	b.n	80052b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800527c:	f000 fb02 	bl	8005884 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005280:	4b10      	ldr	r3, [pc, #64]	; (80052c4 <prvCheckTasksWaitingTermination+0x50>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3304      	adds	r3, #4
 800528c:	4618      	mov	r0, r3
 800528e:	f7fe fa17 	bl	80036c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005292:	4b0d      	ldr	r3, [pc, #52]	; (80052c8 <prvCheckTasksWaitingTermination+0x54>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3b01      	subs	r3, #1
 8005298:	4a0b      	ldr	r2, [pc, #44]	; (80052c8 <prvCheckTasksWaitingTermination+0x54>)
 800529a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800529c:	4b0b      	ldr	r3, [pc, #44]	; (80052cc <prvCheckTasksWaitingTermination+0x58>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3b01      	subs	r3, #1
 80052a2:	4a0a      	ldr	r2, [pc, #40]	; (80052cc <prvCheckTasksWaitingTermination+0x58>)
 80052a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80052a6:	f000 fb1d 	bl	80058e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f848 	bl	8005340 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052b0:	4b06      	ldr	r3, [pc, #24]	; (80052cc <prvCheckTasksWaitingTermination+0x58>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e1      	bne.n	800527c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052b8:	bf00      	nop
 80052ba:	bf00      	nop
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	200004c0 	.word	0x200004c0
 80052c8:	200004ec 	.word	0x200004ec
 80052cc:	200004d4 	.word	0x200004d4

080052d0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80052dc:	e005      	b.n	80052ea <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3301      	adds	r3, #1
 80052e2:	607b      	str	r3, [r7, #4]
			ulCount++;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3301      	adds	r3, #1
 80052e8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2ba5      	cmp	r3, #165	; 0xa5
 80052f0:	d0f5      	beq.n	80052de <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	089b      	lsrs	r3, r3, #2
 80052f6:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	b29b      	uxth	r3, r3
	}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d102      	bne.n	800531c <uxTaskGetStackHighWaterMark+0x14>
 8005316:	4b09      	ldr	r3, [pc, #36]	; (800533c <uxTaskGetStackHighWaterMark+0x34>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	e000      	b.n	800531e <uxTaskGetStackHighWaterMark+0x16>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005324:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8005326:	6938      	ldr	r0, [r7, #16]
 8005328:	f7ff ffd2 	bl	80052d0 <prvTaskCheckFreeStackSpace>
 800532c:	4603      	mov	r3, r0
 800532e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8005330:	68fb      	ldr	r3, [r7, #12]
	}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	200003ec 	.word	0x200003ec

08005340 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3354      	adds	r3, #84	; 0x54
 800534c:	4618      	mov	r0, r3
 800534e:	f002 fcab 	bl	8007ca8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005358:	2b00      	cmp	r3, #0
 800535a:	d108      	bne.n	800536e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fcdd 	bl	8005d20 <vPortFree>
				vPortFree( pxTCB );
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fcda 	bl	8005d20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800536c:	e018      	b.n	80053a0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005374:	2b01      	cmp	r3, #1
 8005376:	d103      	bne.n	8005380 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 fcd1 	bl	8005d20 <vPortFree>
	}
 800537e:	e00f      	b.n	80053a0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005386:	2b02      	cmp	r3, #2
 8005388:	d00a      	beq.n	80053a0 <prvDeleteTCB+0x60>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	60fb      	str	r3, [r7, #12]
}
 800539c:	bf00      	nop
 800539e:	e7fe      	b.n	800539e <prvDeleteTCB+0x5e>
	}
 80053a0:	bf00      	nop
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053ae:	4b0c      	ldr	r3, [pc, #48]	; (80053e0 <prvResetNextTaskUnblockTime+0x38>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d104      	bne.n	80053c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80053b8:	4b0a      	ldr	r3, [pc, #40]	; (80053e4 <prvResetNextTaskUnblockTime+0x3c>)
 80053ba:	f04f 32ff 	mov.w	r2, #4294967295
 80053be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80053c0:	e008      	b.n	80053d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053c2:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <prvResetNextTaskUnblockTime+0x38>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	4a04      	ldr	r2, [pc, #16]	; (80053e4 <prvResetNextTaskUnblockTime+0x3c>)
 80053d2:	6013      	str	r3, [r2, #0]
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	200004a4 	.word	0x200004a4
 80053e4:	2000050c 	.word	0x2000050c

080053e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80053ee:	4b0b      	ldr	r3, [pc, #44]	; (800541c <xTaskGetSchedulerState+0x34>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d102      	bne.n	80053fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80053f6:	2301      	movs	r3, #1
 80053f8:	607b      	str	r3, [r7, #4]
 80053fa:	e008      	b.n	800540e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053fc:	4b08      	ldr	r3, [pc, #32]	; (8005420 <xTaskGetSchedulerState+0x38>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d102      	bne.n	800540a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005404:	2302      	movs	r3, #2
 8005406:	607b      	str	r3, [r7, #4]
 8005408:	e001      	b.n	800540e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800540a:	2300      	movs	r3, #0
 800540c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800540e:	687b      	ldr	r3, [r7, #4]
	}
 8005410:	4618      	mov	r0, r3
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	200004f8 	.word	0x200004f8
 8005420:	20000514 	.word	0x20000514

08005424 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005430:	2300      	movs	r3, #0
 8005432:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d073      	beq.n	8005522 <xTaskPriorityDisinherit+0xfe>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800543a:	4b3c      	ldr	r3, [pc, #240]	; (800552c <xTaskPriorityDisinherit+0x108>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	429a      	cmp	r2, r3
 8005442:	d00a      	beq.n	800545a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005448:	f383 8811 	msr	BASEPRI, r3
 800544c:	f3bf 8f6f 	isb	sy
 8005450:	f3bf 8f4f 	dsb	sy
 8005454:	60fb      	str	r3, [r7, #12]
}
 8005456:	bf00      	nop
 8005458:	e7fe      	b.n	8005458 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10a      	bne.n	8005478 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	60bb      	str	r3, [r7, #8]
}
 8005474:	bf00      	nop
 8005476:	e7fe      	b.n	8005476 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800547c:	1e5a      	subs	r2, r3, #1
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800548a:	429a      	cmp	r2, r3
 800548c:	d049      	beq.n	8005522 <xTaskPriorityDisinherit+0xfe>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005492:	2b00      	cmp	r3, #0
 8005494:	d145      	bne.n	8005522 <xTaskPriorityDisinherit+0xfe>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	3304      	adds	r3, #4
 800549a:	4618      	mov	r0, r3
 800549c:	f7fe f910 	bl	80036c0 <uxListRemove>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d115      	bne.n	80054d2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054aa:	4921      	ldr	r1, [pc, #132]	; (8005530 <xTaskPriorityDisinherit+0x10c>)
 80054ac:	4613      	mov	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	440b      	add	r3, r1
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10a      	bne.n	80054d2 <xTaskPriorityDisinherit+0xae>
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c0:	2201      	movs	r2, #1
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	43da      	mvns	r2, r3
 80054c8:	4b1a      	ldr	r3, [pc, #104]	; (8005534 <xTaskPriorityDisinherit+0x110>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4013      	ands	r3, r2
 80054ce:	4a19      	ldr	r2, [pc, #100]	; (8005534 <xTaskPriorityDisinherit+0x110>)
 80054d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4619      	mov	r1, r3
 80054d6:	204a      	movs	r0, #74	; 0x4a
 80054d8:	f001 fb1a 	bl	8006b10 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e8:	f1c3 0207 	rsb	r2, r3, #7
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB ); //SEGGER
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	2201      	movs	r2, #1
 80054f6:	409a      	lsls	r2, r3
 80054f8:	4b0e      	ldr	r3, [pc, #56]	; (8005534 <xTaskPriorityDisinherit+0x110>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	4a0d      	ldr	r2, [pc, #52]	; (8005534 <xTaskPriorityDisinherit+0x110>)
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005506:	4613      	mov	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4a08      	ldr	r2, [pc, #32]	; (8005530 <xTaskPriorityDisinherit+0x10c>)
 8005510:	441a      	add	r2, r3
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	3304      	adds	r3, #4
 8005516:	4619      	mov	r1, r3
 8005518:	4610      	mov	r0, r2
 800551a:	f7fe f874 	bl	8003606 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800551e:	2301      	movs	r3, #1
 8005520:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005522:	697b      	ldr	r3, [r7, #20]
	}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	200003ec 	.word	0x200003ec
 8005530:	200003f0 	.word	0x200003f0
 8005534:	200004f4 	.word	0x200004f4

08005538 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005542:	4b32      	ldr	r3, [pc, #200]	; (800560c <prvAddCurrentTaskToDelayedList+0xd4>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005548:	4b31      	ldr	r3, [pc, #196]	; (8005610 <prvAddCurrentTaskToDelayedList+0xd8>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3304      	adds	r3, #4
 800554e:	4618      	mov	r0, r3
 8005550:	f7fe f8b6 	bl	80036c0 <uxListRemove>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10b      	bne.n	8005572 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800555a:	4b2d      	ldr	r3, [pc, #180]	; (8005610 <prvAddCurrentTaskToDelayedList+0xd8>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	2201      	movs	r2, #1
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	43da      	mvns	r2, r3
 8005568:	4b2a      	ldr	r3, [pc, #168]	; (8005614 <prvAddCurrentTaskToDelayedList+0xdc>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4013      	ands	r3, r2
 800556e:	4a29      	ldr	r2, [pc, #164]	; (8005614 <prvAddCurrentTaskToDelayedList+0xdc>)
 8005570:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005578:	d110      	bne.n	800559c <prvAddCurrentTaskToDelayedList+0x64>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00d      	beq.n	800559c <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB); //SEGGER
 8005580:	4b23      	ldr	r3, [pc, #140]	; (8005610 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	211b      	movs	r1, #27
 8005586:	4618      	mov	r0, r3
 8005588:	f002 f886 	bl	8007698 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800558c:	4b20      	ldr	r3, [pc, #128]	; (8005610 <prvAddCurrentTaskToDelayedList+0xd8>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3304      	adds	r3, #4
 8005592:	4619      	mov	r1, r3
 8005594:	4820      	ldr	r0, [pc, #128]	; (8005618 <prvAddCurrentTaskToDelayedList+0xe0>)
 8005596:	f7fe f836 	bl	8003606 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800559a:	e032      	b.n	8005602 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4413      	add	r3, r2
 80055a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055a4:	4b1a      	ldr	r3, [pc, #104]	; (8005610 <prvAddCurrentTaskToDelayedList+0xd8>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d20f      	bcs.n	80055d4 <prvAddCurrentTaskToDelayedList+0x9c>
				traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST(); //SEGGER
 80055b4:	4b16      	ldr	r3, [pc, #88]	; (8005610 <prvAddCurrentTaskToDelayedList+0xd8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2104      	movs	r1, #4
 80055ba:	4618      	mov	r0, r3
 80055bc:	f002 f86c 	bl	8007698 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055c0:	4b16      	ldr	r3, [pc, #88]	; (800561c <prvAddCurrentTaskToDelayedList+0xe4>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	4b12      	ldr	r3, [pc, #72]	; (8005610 <prvAddCurrentTaskToDelayedList+0xd8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3304      	adds	r3, #4
 80055ca:	4619      	mov	r1, r3
 80055cc:	4610      	mov	r0, r2
 80055ce:	f7fe f83e 	bl	800364e <vListInsert>
}
 80055d2:	e016      	b.n	8005602 <prvAddCurrentTaskToDelayedList+0xca>
				traceMOVED_TASK_TO_DELAYED_LIST(); //SEGGER
 80055d4:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <prvAddCurrentTaskToDelayedList+0xd8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2104      	movs	r1, #4
 80055da:	4618      	mov	r0, r3
 80055dc:	f002 f85c 	bl	8007698 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055e0:	4b0f      	ldr	r3, [pc, #60]	; (8005620 <prvAddCurrentTaskToDelayedList+0xe8>)
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	4b0a      	ldr	r3, [pc, #40]	; (8005610 <prvAddCurrentTaskToDelayedList+0xd8>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3304      	adds	r3, #4
 80055ea:	4619      	mov	r1, r3
 80055ec:	4610      	mov	r0, r2
 80055ee:	f7fe f82e 	bl	800364e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055f2:	4b0c      	ldr	r3, [pc, #48]	; (8005624 <prvAddCurrentTaskToDelayedList+0xec>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d202      	bcs.n	8005602 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 80055fc:	4a09      	ldr	r2, [pc, #36]	; (8005624 <prvAddCurrentTaskToDelayedList+0xec>)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	6013      	str	r3, [r2, #0]
}
 8005602:	bf00      	nop
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	200004f0 	.word	0x200004f0
 8005610:	200003ec 	.word	0x200003ec
 8005614:	200004f4 	.word	0x200004f4
 8005618:	200004d8 	.word	0x200004d8
 800561c:	200004a8 	.word	0x200004a8
 8005620:	200004a4 	.word	0x200004a4
 8005624:	2000050c 	.word	0x2000050c

08005628 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	3b04      	subs	r3, #4
 8005638:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005640:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3b04      	subs	r3, #4
 8005646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f023 0201 	bic.w	r2, r3, #1
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	3b04      	subs	r3, #4
 8005656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005658:	4a0c      	ldr	r2, [pc, #48]	; (800568c <pxPortInitialiseStack+0x64>)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	3b14      	subs	r3, #20
 8005662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3b04      	subs	r3, #4
 800566e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f06f 0202 	mvn.w	r2, #2
 8005676:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3b20      	subs	r3, #32
 800567c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800567e:	68fb      	ldr	r3, [r7, #12]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	08005691 	.word	0x08005691

08005690 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005696:	2300      	movs	r3, #0
 8005698:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800569a:	4b12      	ldr	r3, [pc, #72]	; (80056e4 <prvTaskExitError+0x54>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a2:	d00a      	beq.n	80056ba <prvTaskExitError+0x2a>
	__asm volatile
 80056a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	60fb      	str	r3, [r7, #12]
}
 80056b6:	bf00      	nop
 80056b8:	e7fe      	b.n	80056b8 <prvTaskExitError+0x28>
	__asm volatile
 80056ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	60bb      	str	r3, [r7, #8]
}
 80056cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80056ce:	bf00      	nop
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0fc      	beq.n	80056d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80056d6:	bf00      	nop
 80056d8:	bf00      	nop
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	2000000c 	.word	0x2000000c
	...

080056f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80056f0:	4b07      	ldr	r3, [pc, #28]	; (8005710 <pxCurrentTCBConst2>)
 80056f2:	6819      	ldr	r1, [r3, #0]
 80056f4:	6808      	ldr	r0, [r1, #0]
 80056f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056fa:	f380 8809 	msr	PSP, r0
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f04f 0000 	mov.w	r0, #0
 8005706:	f380 8811 	msr	BASEPRI, r0
 800570a:	4770      	bx	lr
 800570c:	f3af 8000 	nop.w

08005710 <pxCurrentTCBConst2>:
 8005710:	200003ec 	.word	0x200003ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop

08005718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005718:	4808      	ldr	r0, [pc, #32]	; (800573c <prvPortStartFirstTask+0x24>)
 800571a:	6800      	ldr	r0, [r0, #0]
 800571c:	6800      	ldr	r0, [r0, #0]
 800571e:	f380 8808 	msr	MSP, r0
 8005722:	f04f 0000 	mov.w	r0, #0
 8005726:	f380 8814 	msr	CONTROL, r0
 800572a:	b662      	cpsie	i
 800572c:	b661      	cpsie	f
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	f3bf 8f6f 	isb	sy
 8005736:	df00      	svc	0
 8005738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800573a:	bf00      	nop
 800573c:	e000ed08 	.word	0xe000ed08

08005740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005746:	4b46      	ldr	r3, [pc, #280]	; (8005860 <xPortStartScheduler+0x120>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a46      	ldr	r2, [pc, #280]	; (8005864 <xPortStartScheduler+0x124>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d10a      	bne.n	8005766 <xPortStartScheduler+0x26>
	__asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	613b      	str	r3, [r7, #16]
}
 8005762:	bf00      	nop
 8005764:	e7fe      	b.n	8005764 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005766:	4b3e      	ldr	r3, [pc, #248]	; (8005860 <xPortStartScheduler+0x120>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a3f      	ldr	r2, [pc, #252]	; (8005868 <xPortStartScheduler+0x128>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d10a      	bne.n	8005786 <xPortStartScheduler+0x46>
	__asm volatile
 8005770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	60fb      	str	r3, [r7, #12]
}
 8005782:	bf00      	nop
 8005784:	e7fe      	b.n	8005784 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005786:	4b39      	ldr	r3, [pc, #228]	; (800586c <xPortStartScheduler+0x12c>)
 8005788:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	b2db      	uxtb	r3, r3
 8005790:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	22ff      	movs	r2, #255	; 0xff
 8005796:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	b2db      	uxtb	r3, r3
 800579e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	4b31      	ldr	r3, [pc, #196]	; (8005870 <xPortStartScheduler+0x130>)
 80057ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057ae:	4b31      	ldr	r3, [pc, #196]	; (8005874 <xPortStartScheduler+0x134>)
 80057b0:	2207      	movs	r2, #7
 80057b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057b4:	e009      	b.n	80057ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80057b6:	4b2f      	ldr	r3, [pc, #188]	; (8005874 <xPortStartScheduler+0x134>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	4a2d      	ldr	r2, [pc, #180]	; (8005874 <xPortStartScheduler+0x134>)
 80057be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057ca:	78fb      	ldrb	r3, [r7, #3]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d2:	2b80      	cmp	r3, #128	; 0x80
 80057d4:	d0ef      	beq.n	80057b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80057d6:	4b27      	ldr	r3, [pc, #156]	; (8005874 <xPortStartScheduler+0x134>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f1c3 0307 	rsb	r3, r3, #7
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d00a      	beq.n	80057f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	60bb      	str	r3, [r7, #8]
}
 80057f4:	bf00      	nop
 80057f6:	e7fe      	b.n	80057f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80057f8:	4b1e      	ldr	r3, [pc, #120]	; (8005874 <xPortStartScheduler+0x134>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	4a1d      	ldr	r2, [pc, #116]	; (8005874 <xPortStartScheduler+0x134>)
 8005800:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005802:	4b1c      	ldr	r3, [pc, #112]	; (8005874 <xPortStartScheduler+0x134>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800580a:	4a1a      	ldr	r2, [pc, #104]	; (8005874 <xPortStartScheduler+0x134>)
 800580c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	b2da      	uxtb	r2, r3
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005816:	4b18      	ldr	r3, [pc, #96]	; (8005878 <xPortStartScheduler+0x138>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a17      	ldr	r2, [pc, #92]	; (8005878 <xPortStartScheduler+0x138>)
 800581c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005820:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005822:	4b15      	ldr	r3, [pc, #84]	; (8005878 <xPortStartScheduler+0x138>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a14      	ldr	r2, [pc, #80]	; (8005878 <xPortStartScheduler+0x138>)
 8005828:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800582c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800582e:	f000 f8e5 	bl	80059fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005832:	4b12      	ldr	r3, [pc, #72]	; (800587c <xPortStartScheduler+0x13c>)
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005838:	f000 f904 	bl	8005a44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800583c:	4b10      	ldr	r3, [pc, #64]	; (8005880 <xPortStartScheduler+0x140>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a0f      	ldr	r2, [pc, #60]	; (8005880 <xPortStartScheduler+0x140>)
 8005842:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005846:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005848:	f7ff ff66 	bl	8005718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800584c:	f7ff fb34 	bl	8004eb8 <vTaskSwitchContext>
	prvTaskExitError();
 8005850:	f7ff ff1e 	bl	8005690 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	e000ed00 	.word	0xe000ed00
 8005864:	410fc271 	.word	0x410fc271
 8005868:	410fc270 	.word	0x410fc270
 800586c:	e000e400 	.word	0xe000e400
 8005870:	20000518 	.word	0x20000518
 8005874:	2000051c 	.word	0x2000051c
 8005878:	e000ed20 	.word	0xe000ed20
 800587c:	2000000c 	.word	0x2000000c
 8005880:	e000ef34 	.word	0xe000ef34

08005884 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
	__asm volatile
 800588a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	607b      	str	r3, [r7, #4]
}
 800589c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800589e:	4b0f      	ldr	r3, [pc, #60]	; (80058dc <vPortEnterCritical+0x58>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3301      	adds	r3, #1
 80058a4:	4a0d      	ldr	r2, [pc, #52]	; (80058dc <vPortEnterCritical+0x58>)
 80058a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058a8:	4b0c      	ldr	r3, [pc, #48]	; (80058dc <vPortEnterCritical+0x58>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d10f      	bne.n	80058d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058b0:	4b0b      	ldr	r3, [pc, #44]	; (80058e0 <vPortEnterCritical+0x5c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	603b      	str	r3, [r7, #0]
}
 80058cc:	bf00      	nop
 80058ce:	e7fe      	b.n	80058ce <vPortEnterCritical+0x4a>
	}
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	2000000c 	.word	0x2000000c
 80058e0:	e000ed04 	.word	0xe000ed04

080058e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80058ea:	4b12      	ldr	r3, [pc, #72]	; (8005934 <vPortExitCritical+0x50>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10a      	bne.n	8005908 <vPortExitCritical+0x24>
	__asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	607b      	str	r3, [r7, #4]
}
 8005904:	bf00      	nop
 8005906:	e7fe      	b.n	8005906 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005908:	4b0a      	ldr	r3, [pc, #40]	; (8005934 <vPortExitCritical+0x50>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3b01      	subs	r3, #1
 800590e:	4a09      	ldr	r2, [pc, #36]	; (8005934 <vPortExitCritical+0x50>)
 8005910:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005912:	4b08      	ldr	r3, [pc, #32]	; (8005934 <vPortExitCritical+0x50>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d105      	bne.n	8005926 <vPortExitCritical+0x42>
 800591a:	2300      	movs	r3, #0
 800591c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	f383 8811 	msr	BASEPRI, r3
}
 8005924:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	2000000c 	.word	0x2000000c
	...

08005940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005940:	f3ef 8009 	mrs	r0, PSP
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	4b15      	ldr	r3, [pc, #84]	; (80059a0 <pxCurrentTCBConst>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	f01e 0f10 	tst.w	lr, #16
 8005950:	bf08      	it	eq
 8005952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595a:	6010      	str	r0, [r2, #0]
 800595c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005960:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005964:	f380 8811 	msr	BASEPRI, r0
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f7ff faa2 	bl	8004eb8 <vTaskSwitchContext>
 8005974:	f04f 0000 	mov.w	r0, #0
 8005978:	f380 8811 	msr	BASEPRI, r0
 800597c:	bc09      	pop	{r0, r3}
 800597e:	6819      	ldr	r1, [r3, #0]
 8005980:	6808      	ldr	r0, [r1, #0]
 8005982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005986:	f01e 0f10 	tst.w	lr, #16
 800598a:	bf08      	it	eq
 800598c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005990:	f380 8809 	msr	PSP, r0
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	f3af 8000 	nop.w

080059a0 <pxCurrentTCBConst>:
 80059a0:	200003ec 	.word	0x200003ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059a4:	bf00      	nop
 80059a6:	bf00      	nop

080059a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
	__asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	607b      	str	r3, [r7, #4]
}
 80059c0:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. (SEGGER PATCHED) */
	portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80059c2:	f001 fd0d 	bl	80073e0 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059c6:	f7ff f9bb 	bl	8004d40 <xTaskIncrementTick>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d006      	beq.n	80059de <SysTick_Handler+0x36>
		{
			traceISR_EXIT_TO_SCHEDULER();
 80059d0:	f001 fd64 	bl	800749c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059d4:	4b08      	ldr	r3, [pc, #32]	; (80059f8 <SysTick_Handler+0x50>)
 80059d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	e001      	b.n	80059e2 <SysTick_Handler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 80059de:	f001 fd41 	bl	8007464 <SEGGER_SYSVIEW_RecordExitISR>
 80059e2:	2300      	movs	r3, #0
 80059e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	f383 8811 	msr	BASEPRI, r3
}
 80059ec:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80059ee:	bf00      	nop
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	e000ed04 	.word	0xe000ed04

080059fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a00:	4b0b      	ldr	r3, [pc, #44]	; (8005a30 <vPortSetupTimerInterrupt+0x34>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a06:	4b0b      	ldr	r3, [pc, #44]	; (8005a34 <vPortSetupTimerInterrupt+0x38>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a0c:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <vPortSetupTimerInterrupt+0x3c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a0a      	ldr	r2, [pc, #40]	; (8005a3c <vPortSetupTimerInterrupt+0x40>)
 8005a12:	fba2 2303 	umull	r2, r3, r2, r3
 8005a16:	095b      	lsrs	r3, r3, #5
 8005a18:	4a09      	ldr	r2, [pc, #36]	; (8005a40 <vPortSetupTimerInterrupt+0x44>)
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a1e:	4b04      	ldr	r3, [pc, #16]	; (8005a30 <vPortSetupTimerInterrupt+0x34>)
 8005a20:	2207      	movs	r2, #7
 8005a22:	601a      	str	r2, [r3, #0]
}
 8005a24:	bf00      	nop
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	e000e010 	.word	0xe000e010
 8005a34:	e000e018 	.word	0xe000e018
 8005a38:	20000000 	.word	0x20000000
 8005a3c:	51eb851f 	.word	0x51eb851f
 8005a40:	e000e014 	.word	0xe000e014

08005a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a54 <vPortEnableVFP+0x10>
 8005a48:	6801      	ldr	r1, [r0, #0]
 8005a4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a4e:	6001      	str	r1, [r0, #0]
 8005a50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a52:	bf00      	nop
 8005a54:	e000ed88 	.word	0xe000ed88

08005a58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005a5e:	f3ef 8305 	mrs	r3, IPSR
 8005a62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2b0f      	cmp	r3, #15
 8005a68:	d914      	bls.n	8005a94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a6a:	4a17      	ldr	r2, [pc, #92]	; (8005ac8 <vPortValidateInterruptPriority+0x70>)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4413      	add	r3, r2
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005a74:	4b15      	ldr	r3, [pc, #84]	; (8005acc <vPortValidateInterruptPriority+0x74>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	7afa      	ldrb	r2, [r7, #11]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d20a      	bcs.n	8005a94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	607b      	str	r3, [r7, #4]
}
 8005a90:	bf00      	nop
 8005a92:	e7fe      	b.n	8005a92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a94:	4b0e      	ldr	r3, [pc, #56]	; (8005ad0 <vPortValidateInterruptPriority+0x78>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a9c:	4b0d      	ldr	r3, [pc, #52]	; (8005ad4 <vPortValidateInterruptPriority+0x7c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d90a      	bls.n	8005aba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	603b      	str	r3, [r7, #0]
}
 8005ab6:	bf00      	nop
 8005ab8:	e7fe      	b.n	8005ab8 <vPortValidateInterruptPriority+0x60>
	}
 8005aba:	bf00      	nop
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	e000e3f0 	.word	0xe000e3f0
 8005acc:	20000518 	.word	0x20000518
 8005ad0:	e000ed0c 	.word	0xe000ed0c
 8005ad4:	2000051c 	.word	0x2000051c

08005ad8 <vSetVarulMaxPRIGROUPValue>:

	//SEGGER Manually patched - Sozza

#if( configASSERT_DEFINED == 1)
	void vSetVarulMaxPRIGROUPValue( void ){
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ade:	4b27      	ldr	r3, [pc, #156]	; (8005b7c <vSetVarulMaxPRIGROUPValue+0xa4>)
 8005ae0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	22ff      	movs	r2, #255	; 0xff
 8005aee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005af8:	78fb      	ldrb	r3, [r7, #3]
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	4b1f      	ldr	r3, [pc, #124]	; (8005b80 <vSetVarulMaxPRIGROUPValue+0xa8>)
 8005b04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b06:	4b1f      	ldr	r3, [pc, #124]	; (8005b84 <vSetVarulMaxPRIGROUPValue+0xac>)
 8005b08:	2207      	movs	r2, #7
 8005b0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b0c:	e009      	b.n	8005b22 <vSetVarulMaxPRIGROUPValue+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005b0e:	4b1d      	ldr	r3, [pc, #116]	; (8005b84 <vSetVarulMaxPRIGROUPValue+0xac>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3b01      	subs	r3, #1
 8005b14:	4a1b      	ldr	r2, [pc, #108]	; (8005b84 <vSetVarulMaxPRIGROUPValue+0xac>)
 8005b16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b18:	78fb      	ldrb	r3, [r7, #3]
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b22:	78fb      	ldrb	r3, [r7, #3]
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2a:	2b80      	cmp	r3, #128	; 0x80
 8005b2c:	d0ef      	beq.n	8005b0e <vSetVarulMaxPRIGROUPValue+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b2e:	4b15      	ldr	r3, [pc, #84]	; (8005b84 <vSetVarulMaxPRIGROUPValue+0xac>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f1c3 0307 	rsb	r3, r3, #7
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d00a      	beq.n	8005b50 <vSetVarulMaxPRIGROUPValue+0x78>
	__asm volatile
 8005b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	60bb      	str	r3, [r7, #8]
}
 8005b4c:	bf00      	nop
 8005b4e:	e7fe      	b.n	8005b4e <vSetVarulMaxPRIGROUPValue+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b50:	4b0c      	ldr	r3, [pc, #48]	; (8005b84 <vSetVarulMaxPRIGROUPValue+0xac>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	021b      	lsls	r3, r3, #8
 8005b56:	4a0b      	ldr	r2, [pc, #44]	; (8005b84 <vSetVarulMaxPRIGROUPValue+0xac>)
 8005b58:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b5a:	4b0a      	ldr	r3, [pc, #40]	; (8005b84 <vSetVarulMaxPRIGROUPValue+0xac>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b62:	4a08      	ldr	r2, [pc, #32]	; (8005b84 <vSetVarulMaxPRIGROUPValue+0xac>)
 8005b64:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	}
 8005b6e:	bf00      	nop
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	e000e400 	.word	0xe000e400
 8005b80:	20000518 	.word	0x20000518
 8005b84:	2000051c 	.word	0x2000051c

08005b88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08a      	sub	sp, #40	; 0x28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b90:	2300      	movs	r3, #0
 8005b92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b94:	f7ff f814 	bl	8004bc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b98:	4b5b      	ldr	r3, [pc, #364]	; (8005d08 <pvPortMalloc+0x180>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ba0:	f000 f920 	bl	8005de4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ba4:	4b59      	ldr	r3, [pc, #356]	; (8005d0c <pvPortMalloc+0x184>)
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4013      	ands	r3, r2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f040 8093 	bne.w	8005cd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d01d      	beq.n	8005bf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005bb8:	2208      	movs	r2, #8
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f003 0307 	and.w	r3, r3, #7
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d014      	beq.n	8005bf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f023 0307 	bic.w	r3, r3, #7
 8005bd0:	3308      	adds	r3, #8
 8005bd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <pvPortMalloc+0x6c>
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	617b      	str	r3, [r7, #20]
}
 8005bf0:	bf00      	nop
 8005bf2:	e7fe      	b.n	8005bf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d06e      	beq.n	8005cd8 <pvPortMalloc+0x150>
 8005bfa:	4b45      	ldr	r3, [pc, #276]	; (8005d10 <pvPortMalloc+0x188>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d869      	bhi.n	8005cd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c04:	4b43      	ldr	r3, [pc, #268]	; (8005d14 <pvPortMalloc+0x18c>)
 8005c06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c08:	4b42      	ldr	r3, [pc, #264]	; (8005d14 <pvPortMalloc+0x18c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c0e:	e004      	b.n	8005c1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d903      	bls.n	8005c2c <pvPortMalloc+0xa4>
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1f1      	bne.n	8005c10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c2c:	4b36      	ldr	r3, [pc, #216]	; (8005d08 <pvPortMalloc+0x180>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d050      	beq.n	8005cd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2208      	movs	r2, #8
 8005c3c:	4413      	add	r3, r2
 8005c3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	1ad2      	subs	r2, r2, r3
 8005c50:	2308      	movs	r3, #8
 8005c52:	005b      	lsls	r3, r3, #1
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d91f      	bls.n	8005c98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <pvPortMalloc+0xf8>
	__asm volatile
 8005c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6e:	f383 8811 	msr	BASEPRI, r3
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	613b      	str	r3, [r7, #16]
}
 8005c7c:	bf00      	nop
 8005c7e:	e7fe      	b.n	8005c7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	1ad2      	subs	r2, r2, r3
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c92:	69b8      	ldr	r0, [r7, #24]
 8005c94:	f000 f908 	bl	8005ea8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c98:	4b1d      	ldr	r3, [pc, #116]	; (8005d10 <pvPortMalloc+0x188>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	4a1b      	ldr	r2, [pc, #108]	; (8005d10 <pvPortMalloc+0x188>)
 8005ca4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ca6:	4b1a      	ldr	r3, [pc, #104]	; (8005d10 <pvPortMalloc+0x188>)
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4b1b      	ldr	r3, [pc, #108]	; (8005d18 <pvPortMalloc+0x190>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d203      	bcs.n	8005cba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005cb2:	4b17      	ldr	r3, [pc, #92]	; (8005d10 <pvPortMalloc+0x188>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a18      	ldr	r2, [pc, #96]	; (8005d18 <pvPortMalloc+0x190>)
 8005cb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	4b13      	ldr	r3, [pc, #76]	; (8005d0c <pvPortMalloc+0x184>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005cce:	4b13      	ldr	r3, [pc, #76]	; (8005d1c <pvPortMalloc+0x194>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	4a11      	ldr	r2, [pc, #68]	; (8005d1c <pvPortMalloc+0x194>)
 8005cd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005cd8:	f7fe ff80 	bl	8004bdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <pvPortMalloc+0x174>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	60fb      	str	r3, [r7, #12]
}
 8005cf8:	bf00      	nop
 8005cfa:	e7fe      	b.n	8005cfa <pvPortMalloc+0x172>
	return pvReturn;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3728      	adds	r7, #40	; 0x28
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20004128 	.word	0x20004128
 8005d0c:	2000413c 	.word	0x2000413c
 8005d10:	2000412c 	.word	0x2000412c
 8005d14:	20004120 	.word	0x20004120
 8005d18:	20004130 	.word	0x20004130
 8005d1c:	20004134 	.word	0x20004134

08005d20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d04d      	beq.n	8005dce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d32:	2308      	movs	r3, #8
 8005d34:	425b      	negs	r3, r3
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4413      	add	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	4b24      	ldr	r3, [pc, #144]	; (8005dd8 <vPortFree+0xb8>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10a      	bne.n	8005d64 <vPortFree+0x44>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	60fb      	str	r3, [r7, #12]
}
 8005d60:	bf00      	nop
 8005d62:	e7fe      	b.n	8005d62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <vPortFree+0x62>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	60bb      	str	r3, [r7, #8]
}
 8005d7e:	bf00      	nop
 8005d80:	e7fe      	b.n	8005d80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	4b14      	ldr	r3, [pc, #80]	; (8005dd8 <vPortFree+0xb8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01e      	beq.n	8005dce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d11a      	bne.n	8005dce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	4b0e      	ldr	r3, [pc, #56]	; (8005dd8 <vPortFree+0xb8>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	43db      	mvns	r3, r3
 8005da2:	401a      	ands	r2, r3
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005da8:	f7fe ff0a 	bl	8004bc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	4b0a      	ldr	r3, [pc, #40]	; (8005ddc <vPortFree+0xbc>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4413      	add	r3, r2
 8005db6:	4a09      	ldr	r2, [pc, #36]	; (8005ddc <vPortFree+0xbc>)
 8005db8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005dba:	6938      	ldr	r0, [r7, #16]
 8005dbc:	f000 f874 	bl	8005ea8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005dc0:	4b07      	ldr	r3, [pc, #28]	; (8005de0 <vPortFree+0xc0>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	4a06      	ldr	r2, [pc, #24]	; (8005de0 <vPortFree+0xc0>)
 8005dc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005dca:	f7fe ff07 	bl	8004bdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005dce:	bf00      	nop
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	2000413c 	.word	0x2000413c
 8005ddc:	2000412c 	.word	0x2000412c
 8005de0:	20004138 	.word	0x20004138

08005de4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005dea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005dee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005df0:	4b27      	ldr	r3, [pc, #156]	; (8005e90 <prvHeapInit+0xac>)
 8005df2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00c      	beq.n	8005e18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	3307      	adds	r3, #7
 8005e02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0307 	bic.w	r3, r3, #7
 8005e0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	4a1f      	ldr	r2, [pc, #124]	; (8005e90 <prvHeapInit+0xac>)
 8005e14:	4413      	add	r3, r2
 8005e16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e1c:	4a1d      	ldr	r2, [pc, #116]	; (8005e94 <prvHeapInit+0xb0>)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e22:	4b1c      	ldr	r3, [pc, #112]	; (8005e94 <prvHeapInit+0xb0>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e30:	2208      	movs	r2, #8
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	1a9b      	subs	r3, r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0307 	bic.w	r3, r3, #7
 8005e3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4a15      	ldr	r2, [pc, #84]	; (8005e98 <prvHeapInit+0xb4>)
 8005e44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e46:	4b14      	ldr	r3, [pc, #80]	; (8005e98 <prvHeapInit+0xb4>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e4e:	4b12      	ldr	r3, [pc, #72]	; (8005e98 <prvHeapInit+0xb4>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	1ad2      	subs	r2, r2, r3
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e64:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <prvHeapInit+0xb4>)
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	4a0a      	ldr	r2, [pc, #40]	; (8005e9c <prvHeapInit+0xb8>)
 8005e72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	4a09      	ldr	r2, [pc, #36]	; (8005ea0 <prvHeapInit+0xbc>)
 8005e7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e7c:	4b09      	ldr	r3, [pc, #36]	; (8005ea4 <prvHeapInit+0xc0>)
 8005e7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e82:	601a      	str	r2, [r3, #0]
}
 8005e84:	bf00      	nop
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	20000520 	.word	0x20000520
 8005e94:	20004120 	.word	0x20004120
 8005e98:	20004128 	.word	0x20004128
 8005e9c:	20004130 	.word	0x20004130
 8005ea0:	2000412c 	.word	0x2000412c
 8005ea4:	2000413c 	.word	0x2000413c

08005ea8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005eb0:	4b28      	ldr	r3, [pc, #160]	; (8005f54 <prvInsertBlockIntoFreeList+0xac>)
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	e002      	b.n	8005ebc <prvInsertBlockIntoFreeList+0x14>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d8f7      	bhi.n	8005eb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d108      	bne.n	8005eea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	441a      	add	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	441a      	add	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d118      	bne.n	8005f30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	4b15      	ldr	r3, [pc, #84]	; (8005f58 <prvInsertBlockIntoFreeList+0xb0>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d00d      	beq.n	8005f26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	441a      	add	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	e008      	b.n	8005f38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f26:	4b0c      	ldr	r3, [pc, #48]	; (8005f58 <prvInsertBlockIntoFreeList+0xb0>)
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	e003      	b.n	8005f38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d002      	beq.n	8005f46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f46:	bf00      	nop
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	20004120 	.word	0x20004120
 8005f58:	20004128 	.word	0x20004128

08005f5c <LED1_toggle>:

#include "gpio.h"
#include "module_led.h"

void LED1_toggle()
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8005f60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f64:	4802      	ldr	r0, [pc, #8]	; (8005f70 <LED1_toggle+0x14>)
 8005f66:	f7fb f9a6 	bl	80012b6 <HAL_GPIO_TogglePin>
}
 8005f6a:	bf00      	nop
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	40021400 	.word	0x40021400

08005f74 <LED2_toggle>:

void LED2_toggle()
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8005f78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f7c:	4802      	ldr	r0, [pc, #8]	; (8005f88 <LED2_toggle+0x14>)
 8005f7e:	f7fb f99a 	bl	80012b6 <HAL_GPIO_TogglePin>
}
 8005f82:	bf00      	nop
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	40021400 	.word	0x40021400

08005f8c <UART_printMsg>:
	  free(testStrCat);
	  free(numberStr);
}

void UART_printMsg(char *msg)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
	  USART2_addToQueue(msg);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f001 fd83 	bl	8007aa0 <USART2_addToQueue>
}
 8005f9a:	bf00      	nop
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
	...

08005fa4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005fa8:	4803      	ldr	r0, [pc, #12]	; (8005fb8 <_cbSendSystemDesc+0x14>)
 8005faa:	f001 f9c3 	bl	8007334 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005fae:	4803      	ldr	r0, [pc, #12]	; (8005fbc <_cbSendSystemDesc+0x18>)
 8005fb0:	f001 f9c0 	bl	8007334 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005fb4:	bf00      	nop
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	08007e34 	.word	0x08007e34
 8005fbc:	08007e70 	.word	0x08007e70

08005fc0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005fc4:	4b06      	ldr	r3, [pc, #24]	; (8005fe0 <SEGGER_SYSVIEW_Conf+0x20>)
 8005fc6:	6818      	ldr	r0, [r3, #0]
 8005fc8:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <SEGGER_SYSVIEW_Conf+0x20>)
 8005fca:	6819      	ldr	r1, [r3, #0]
 8005fcc:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <SEGGER_SYSVIEW_Conf+0x24>)
 8005fce:	4a06      	ldr	r2, [pc, #24]	; (8005fe8 <SEGGER_SYSVIEW_Conf+0x28>)
 8005fd0:	f000 fd2c 	bl	8006a2c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005fd4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005fd8:	f000 fd6c 	bl	8006ab4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005fdc:	bf00      	nop
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	20000000 	.word	0x20000000
 8005fe4:	08005fa5 	.word	0x08005fa5
 8005fe8:	08007f10 	.word	0x08007f10

08005fec <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	607b      	str	r3, [r7, #4]
 8005ff6:	e048      	b.n	800608a <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8005ff8:	4929      	ldr	r1, [pc, #164]	; (80060a0 <_cbSendTaskList+0xb4>)
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	440b      	add	r3, r1
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4618      	mov	r0, r3
 800600a:	f7ff f97d 	bl	8005308 <uxTaskGetStackHighWaterMark>
 800600e:	4601      	mov	r1, r0
 8006010:	4823      	ldr	r0, [pc, #140]	; (80060a0 <_cbSendTaskList+0xb4>)
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	4613      	mov	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4403      	add	r3, r0
 800601e:	3310      	adds	r3, #16
 8006020:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006022:	491f      	ldr	r1, [pc, #124]	; (80060a0 <_cbSendTaskList+0xb4>)
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	4613      	mov	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	440b      	add	r3, r1
 8006030:	6818      	ldr	r0, [r3, #0]
 8006032:	491b      	ldr	r1, [pc, #108]	; (80060a0 <_cbSendTaskList+0xb4>)
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	4613      	mov	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	440b      	add	r3, r1
 8006040:	3304      	adds	r3, #4
 8006042:	6819      	ldr	r1, [r3, #0]
 8006044:	4c16      	ldr	r4, [pc, #88]	; (80060a0 <_cbSendTaskList+0xb4>)
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	4613      	mov	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4423      	add	r3, r4
 8006052:	3308      	adds	r3, #8
 8006054:	681c      	ldr	r4, [r3, #0]
 8006056:	4d12      	ldr	r5, [pc, #72]	; (80060a0 <_cbSendTaskList+0xb4>)
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	4613      	mov	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	442b      	add	r3, r5
 8006064:	330c      	adds	r3, #12
 8006066:	681d      	ldr	r5, [r3, #0]
 8006068:	4e0d      	ldr	r6, [pc, #52]	; (80060a0 <_cbSendTaskList+0xb4>)
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	4613      	mov	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4433      	add	r3, r6
 8006076:	3310      	adds	r3, #16
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	462b      	mov	r3, r5
 800607e:	4622      	mov	r2, r4
 8006080:	f000 f8de 	bl	8006240 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3301      	adds	r3, #1
 8006088:	607b      	str	r3, [r7, #4]
 800608a:	4b06      	ldr	r3, [pc, #24]	; (80060a4 <_cbSendTaskList+0xb8>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	429a      	cmp	r2, r3
 8006092:	d3b1      	bcc.n	8005ff8 <_cbSendTaskList+0xc>
  }
}
 8006094:	bf00      	nop
 8006096:	bf00      	nop
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800609e:	bf00      	nop
 80060a0:	20004140 	.word	0x20004140
 80060a4:	200041e0 	.word	0x200041e0

080060a8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80060a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060ac:	b086      	sub	sp, #24
 80060ae:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80060b0:	f7fe fe34 	bl	8004d1c <xTaskGetTickCountFromISR>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2200      	movs	r2, #0
 80060b8:	60bb      	str	r3, [r7, #8]
 80060ba:	60fa      	str	r2, [r7, #12]
 80060bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
  Time *= portTICK_PERIOD_MS;
 80060c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80060c8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80060cc:	f04f 0000 	mov.w	r0, #0
 80060d0:	f04f 0100 	mov.w	r1, #0
 80060d4:	0099      	lsls	r1, r3, #2
 80060d6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80060da:	0090      	lsls	r0, r2, #2
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	68b9      	ldr	r1, [r7, #8]
 80060e2:	eb12 0801 	adds.w	r8, r2, r1
 80060e6:	68f9      	ldr	r1, [r7, #12]
 80060e8:	eb43 0901 	adc.w	r9, r3, r1
 80060ec:	eb18 0308 	adds.w	r3, r8, r8
 80060f0:	603b      	str	r3, [r7, #0]
 80060f2:	eb49 0309 	adc.w	r3, r9, r9
 80060f6:	607b      	str	r3, [r7, #4]
 80060f8:	e9d7 8900 	ldrd	r8, r9, [r7]
 80060fc:	e9c7 8904 	strd	r8, r9, [r7, #16]
  Time *= 1000;
 8006100:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	f04f 0800 	mov.w	r8, #0
 800610c:	f04f 0900 	mov.w	r9, #0
 8006110:	ea4f 1943 	mov.w	r9, r3, lsl #5
 8006114:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
 8006118:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800611c:	4642      	mov	r2, r8
 800611e:	464b      	mov	r3, r9
 8006120:	1a14      	subs	r4, r2, r0
 8006122:	eb63 0501 	sbc.w	r5, r3, r1
 8006126:	f04f 0200 	mov.w	r2, #0
 800612a:	f04f 0300 	mov.w	r3, #0
 800612e:	00ab      	lsls	r3, r5, #2
 8006130:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8006134:	00a2      	lsls	r2, r4, #2
 8006136:	4614      	mov	r4, r2
 8006138:	461d      	mov	r5, r3
 800613a:	eb14 0a00 	adds.w	sl, r4, r0
 800613e:	eb45 0b01 	adc.w	fp, r5, r1
 8006142:	f04f 0200 	mov.w	r2, #0
 8006146:	f04f 0300 	mov.w	r3, #0
 800614a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800614e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006152:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006156:	4692      	mov	sl, r2
 8006158:	469b      	mov	fp, r3
 800615a:	e9c7 ab04 	strd	sl, fp, [r7, #16]
  return Time;
 800615e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8006162:	4610      	mov	r0, r2
 8006164:	4619      	mov	r1, r3
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006170 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af02      	add	r7, sp, #8
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
 800617c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800617e:	2205      	movs	r2, #5
 8006180:	492b      	ldr	r1, [pc, #172]	; (8006230 <SYSVIEW_AddTask+0xc0>)
 8006182:	68b8      	ldr	r0, [r7, #8]
 8006184:	f001 fd10 	bl	8007ba8 <memcmp>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d04b      	beq.n	8006226 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800618e:	4b29      	ldr	r3, [pc, #164]	; (8006234 <SYSVIEW_AddTask+0xc4>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b07      	cmp	r3, #7
 8006194:	d903      	bls.n	800619e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006196:	4828      	ldr	r0, [pc, #160]	; (8006238 <SYSVIEW_AddTask+0xc8>)
 8006198:	f001 fc26 	bl	80079e8 <SEGGER_SYSVIEW_Warn>
    return;
 800619c:	e044      	b.n	8006228 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800619e:	4b25      	ldr	r3, [pc, #148]	; (8006234 <SYSVIEW_AddTask+0xc4>)
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	4926      	ldr	r1, [pc, #152]	; (800623c <SYSVIEW_AddTask+0xcc>)
 80061a4:	4613      	mov	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	440b      	add	r3, r1
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80061b2:	4b20      	ldr	r3, [pc, #128]	; (8006234 <SYSVIEW_AddTask+0xc4>)
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	4921      	ldr	r1, [pc, #132]	; (800623c <SYSVIEW_AddTask+0xcc>)
 80061b8:	4613      	mov	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	440b      	add	r3, r1
 80061c2:	3304      	adds	r3, #4
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80061c8:	4b1a      	ldr	r3, [pc, #104]	; (8006234 <SYSVIEW_AddTask+0xc4>)
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	491b      	ldr	r1, [pc, #108]	; (800623c <SYSVIEW_AddTask+0xcc>)
 80061ce:	4613      	mov	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	440b      	add	r3, r1
 80061d8:	3308      	adds	r3, #8
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80061de:	4b15      	ldr	r3, [pc, #84]	; (8006234 <SYSVIEW_AddTask+0xc4>)
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	4916      	ldr	r1, [pc, #88]	; (800623c <SYSVIEW_AddTask+0xcc>)
 80061e4:	4613      	mov	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	440b      	add	r3, r1
 80061ee:	330c      	adds	r3, #12
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80061f4:	4b0f      	ldr	r3, [pc, #60]	; (8006234 <SYSVIEW_AddTask+0xc4>)
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	4910      	ldr	r1, [pc, #64]	; (800623c <SYSVIEW_AddTask+0xcc>)
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	440b      	add	r3, r1
 8006204:	3310      	adds	r3, #16
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800620a:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <SYSVIEW_AddTask+0xc4>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3301      	adds	r3, #1
 8006210:	4a08      	ldr	r2, [pc, #32]	; (8006234 <SYSVIEW_AddTask+0xc4>)
 8006212:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	68b9      	ldr	r1, [r7, #8]
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 f80e 	bl	8006240 <SYSVIEW_SendTaskInfo>
 8006224:	e000      	b.n	8006228 <SYSVIEW_AddTask+0xb8>
    return;
 8006226:	bf00      	nop

}
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	08007e80 	.word	0x08007e80
 8006234:	200041e0 	.word	0x200041e0
 8006238:	08007e88 	.word	0x08007e88
 800623c:	20004140 	.word	0x20004140

08006240 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006240:	b580      	push	{r7, lr}
 8006242:	b08a      	sub	sp, #40	; 0x28
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800624e:	f107 0314 	add.w	r3, r7, #20
 8006252:	2214      	movs	r2, #20
 8006254:	2100      	movs	r1, #0
 8006256:	4618      	mov	r0, r3
 8006258:	f001 fcc4 	bl	8007be4 <memset>
  TaskInfo.TaskID     = TaskID;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006270:	f107 0314 	add.w	r3, r7, #20
 8006274:	4618      	mov	r0, r3
 8006276:	f000 ff65 	bl	8007144 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800627a:	bf00      	nop
 800627c:	3728      	adds	r7, #40	; 0x28
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
	...

08006284 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800628a:	4b24      	ldr	r3, [pc, #144]	; (800631c <_DoInit+0x98>)
 800628c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2203      	movs	r2, #3
 8006292:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2203      	movs	r2, #3
 8006298:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a20      	ldr	r2, [pc, #128]	; (8006320 <_DoInit+0x9c>)
 800629e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a20      	ldr	r2, [pc, #128]	; (8006324 <_DoInit+0xa0>)
 80062a4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062ac:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a17      	ldr	r2, [pc, #92]	; (8006320 <_DoInit+0x9c>)
 80062c4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a17      	ldr	r2, [pc, #92]	; (8006328 <_DoInit+0xa4>)
 80062ca:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2210      	movs	r2, #16
 80062d0:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3307      	adds	r3, #7
 80062e8:	4a10      	ldr	r2, [pc, #64]	; (800632c <_DoInit+0xa8>)
 80062ea:	6810      	ldr	r0, [r2, #0]
 80062ec:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80062ee:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a0e      	ldr	r2, [pc, #56]	; (8006330 <_DoInit+0xac>)
 80062f6:	6810      	ldr	r0, [r2, #0]
 80062f8:	6018      	str	r0, [r3, #0]
 80062fa:	8891      	ldrh	r1, [r2, #4]
 80062fc:	7992      	ldrb	r2, [r2, #6]
 80062fe:	8099      	strh	r1, [r3, #4]
 8006300:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006302:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2220      	movs	r2, #32
 800630a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800630c:	f3bf 8f5f 	dmb	sy
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	200041e4 	.word	0x200041e4
 8006320:	08007ed8 	.word	0x08007ed8
 8006324:	2000428c 	.word	0x2000428c
 8006328:	2000468c 	.word	0x2000468c
 800632c:	08007ee4 	.word	0x08007ee4
 8006330:	08007ee8 	.word	0x08007ee8

08006334 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006334:	b580      	push	{r7, lr}
 8006336:	b08c      	sub	sp, #48	; 0x30
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8006340:	4b3e      	ldr	r3, [pc, #248]	; (800643c <SEGGER_RTT_ReadNoLock+0x108>)
 8006342:	623b      	str	r3, [r7, #32]
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <SEGGER_RTT_ReadNoLock+0x1e>
 800634e:	f7ff ff99 	bl	8006284 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	4613      	mov	r3, r2
 8006356:	005b      	lsls	r3, r3, #1
 8006358:	4413      	add	r3, r2
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	3360      	adds	r3, #96	; 0x60
 800635e:	4a37      	ldr	r2, [pc, #220]	; (800643c <SEGGER_RTT_ReadNoLock+0x108>)
 8006360:	4413      	add	r3, r2
 8006362:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8006374:	2300      	movs	r3, #0
 8006376:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8006378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	429a      	cmp	r2, r3
 800637e:	d92b      	bls.n	80063d8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4293      	cmp	r3, r2
 8006390:	bf28      	it	cs
 8006392:	4613      	movcs	r3, r2
 8006394:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639c:	4413      	add	r3, r2
 800639e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	6939      	ldr	r1, [r7, #16]
 80063a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063a6:	f001 fc0f 	bl	8007bc8 <memcpy>
    NumBytesRead += NumBytesRem;
 80063aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	4413      	add	r3, r2
 80063b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80063b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	4413      	add	r3, r2
 80063b8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80063c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	4413      	add	r3, r2
 80063c8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d101      	bne.n	80063d8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80063d4:	2300      	movs	r3, #0
 80063d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80063d8:	69ba      	ldr	r2, [r7, #24]
 80063da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4293      	cmp	r3, r2
 80063e6:	bf28      	it	cs
 80063e8:	4613      	movcs	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d019      	beq.n	8006426 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	4413      	add	r3, r2
 80063fa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	6939      	ldr	r1, [r7, #16]
 8006400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006402:	f001 fbe1 	bl	8007bc8 <memcpy>
    NumBytesRead += NumBytesRem;
 8006406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	4413      	add	r3, r2
 800640c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800640e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	4413      	add	r3, r2
 8006414:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800641e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	4413      	add	r3, r2
 8006424:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8006426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006430:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8006432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006434:	4618      	mov	r0, r3
 8006436:	3730      	adds	r7, #48	; 0x30
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	200041e4 	.word	0x200041e4

08006440 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800644e:	4b3d      	ldr	r3, [pc, #244]	; (8006544 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006450:	61bb      	str	r3, [r7, #24]
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <SEGGER_RTT_AllocUpBuffer+0x20>
 800645c:	f7ff ff12 	bl	8006284 <_DoInit>
  SEGGER_RTT_LOCK();
 8006460:	f3ef 8311 	mrs	r3, BASEPRI
 8006464:	f04f 0120 	mov.w	r1, #32
 8006468:	f381 8811 	msr	BASEPRI, r1
 800646c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800646e:	4b35      	ldr	r3, [pc, #212]	; (8006544 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006470:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8006472:	2300      	movs	r3, #0
 8006474:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8006476:	6939      	ldr	r1, [r7, #16]
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	4613      	mov	r3, r2
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	4413      	add	r3, r2
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	440b      	add	r3, r1
 8006486:	3304      	adds	r3, #4
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d008      	beq.n	80064a0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	3301      	adds	r3, #1
 8006492:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	69fa      	ldr	r2, [r7, #28]
 800649a:	429a      	cmp	r2, r3
 800649c:	dbeb      	blt.n	8006476 <SEGGER_RTT_AllocUpBuffer+0x36>
 800649e:	e000      	b.n	80064a2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80064a0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	69fa      	ldr	r2, [r7, #28]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	da3f      	bge.n	800652c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80064ac:	6939      	ldr	r1, [r7, #16]
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	4613      	mov	r3, r2
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	4413      	add	r3, r2
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	440b      	add	r3, r1
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80064c0:	6939      	ldr	r1, [r7, #16]
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	4613      	mov	r3, r2
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	4413      	add	r3, r2
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	440b      	add	r3, r1
 80064d0:	3304      	adds	r3, #4
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80064d6:	6939      	ldr	r1, [r7, #16]
 80064d8:	69fa      	ldr	r2, [r7, #28]
 80064da:	4613      	mov	r3, r2
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	4413      	add	r3, r2
 80064e0:	00db      	lsls	r3, r3, #3
 80064e2:	440b      	add	r3, r1
 80064e4:	3320      	adds	r3, #32
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80064ea:	6939      	ldr	r1, [r7, #16]
 80064ec:	69fa      	ldr	r2, [r7, #28]
 80064ee:	4613      	mov	r3, r2
 80064f0:	005b      	lsls	r3, r3, #1
 80064f2:	4413      	add	r3, r2
 80064f4:	00db      	lsls	r3, r3, #3
 80064f6:	440b      	add	r3, r1
 80064f8:	3328      	adds	r3, #40	; 0x28
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80064fe:	6939      	ldr	r1, [r7, #16]
 8006500:	69fa      	ldr	r2, [r7, #28]
 8006502:	4613      	mov	r3, r2
 8006504:	005b      	lsls	r3, r3, #1
 8006506:	4413      	add	r3, r2
 8006508:	00db      	lsls	r3, r3, #3
 800650a:	440b      	add	r3, r1
 800650c:	3324      	adds	r3, #36	; 0x24
 800650e:	2200      	movs	r2, #0
 8006510:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8006512:	6939      	ldr	r1, [r7, #16]
 8006514:	69fa      	ldr	r2, [r7, #28]
 8006516:	4613      	mov	r3, r2
 8006518:	005b      	lsls	r3, r3, #1
 800651a:	4413      	add	r3, r2
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	440b      	add	r3, r1
 8006520:	332c      	adds	r3, #44	; 0x2c
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006526:	f3bf 8f5f 	dmb	sy
 800652a:	e002      	b.n	8006532 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800652c:	f04f 33ff 	mov.w	r3, #4294967295
 8006530:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8006538:	69fb      	ldr	r3, [r7, #28]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3720      	adds	r7, #32
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	200041e4 	.word	0x200041e4

08006548 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006548:	b580      	push	{r7, lr}
 800654a:	b08a      	sub	sp, #40	; 0x28
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
 8006554:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8006556:	4b21      	ldr	r3, [pc, #132]	; (80065dc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8006558:	623b      	str	r3, [r7, #32]
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8006564:	f7ff fe8e 	bl	8006284 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006568:	4b1c      	ldr	r3, [pc, #112]	; (80065dc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800656a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2b02      	cmp	r3, #2
 8006570:	d82c      	bhi.n	80065cc <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8006572:	f3ef 8311 	mrs	r3, BASEPRI
 8006576:	f04f 0120 	mov.w	r1, #32
 800657a:	f381 8811 	msr	BASEPRI, r1
 800657e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	4613      	mov	r3, r2
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	4413      	add	r3, r2
 8006588:	00db      	lsls	r3, r3, #3
 800658a:	3360      	adds	r3, #96	; 0x60
 800658c:	69fa      	ldr	r2, [r7, #28]
 800658e:	4413      	add	r3, r2
 8006590:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00e      	beq.n	80065b6 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2200      	movs	r2, #0
 80065ae:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2200      	movs	r2, #0
 80065b4:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ba:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80065bc:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80065c6:	2300      	movs	r3, #0
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
 80065ca:	e002      	b.n	80065d2 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80065cc:	f04f 33ff 	mov.w	r3, #4294967295
 80065d0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3728      	adds	r7, #40	; 0x28
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	200041e4 	.word	0x200041e4

080065e0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80065e0:	b480      	push	{r7}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80065ec:	2300      	movs	r3, #0
 80065ee:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00f      	beq.n	8006616 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80065f6:	e002      	b.n	80065fe <_EncodeStr+0x1e>
      Len++;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	3301      	adds	r3, #1
 80065fc:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	4413      	add	r3, r2
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1f6      	bne.n	80065f8 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	429a      	cmp	r2, r3
 8006610:	d901      	bls.n	8006616 <_EncodeStr+0x36>
      Len = Limit;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	2bfe      	cmp	r3, #254	; 0xfe
 800661a:	d806      	bhi.n	800662a <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	60fa      	str	r2, [r7, #12]
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	b2d2      	uxtb	r2, r2
 8006626:	701a      	strb	r2, [r3, #0]
 8006628:	e011      	b.n	800664e <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	1c5a      	adds	r2, r3, #1
 800662e:	60fa      	str	r2, [r7, #12]
 8006630:	22ff      	movs	r2, #255	; 0xff
 8006632:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	60fa      	str	r2, [r7, #12]
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	b2d2      	uxtb	r2, r2
 800663e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	0a19      	lsrs	r1, r3, #8
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	60fa      	str	r2, [r7, #12]
 800664a:	b2ca      	uxtb	r2, r1
 800664c:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800664e:	2300      	movs	r3, #0
 8006650:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006652:	e00a      	b.n	800666a <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	1c53      	adds	r3, r2, #1
 8006658:	60bb      	str	r3, [r7, #8]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	1c59      	adds	r1, r3, #1
 800665e:	60f9      	str	r1, [r7, #12]
 8006660:	7812      	ldrb	r2, [r2, #0]
 8006662:	701a      	strb	r2, [r3, #0]
    n++;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	3301      	adds	r3, #1
 8006668:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	429a      	cmp	r2, r3
 8006670:	d3f0      	bcc.n	8006654 <_EncodeStr+0x74>
  }
  return pPayload;
 8006672:	68fb      	ldr	r3, [r7, #12]
}
 8006674:	4618      	mov	r0, r3
 8006676:	371c      	adds	r7, #28
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3304      	adds	r3, #4
}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800669e:	4b36      	ldr	r3, [pc, #216]	; (8006778 <_HandleIncomingPacket+0xe0>)
 80066a0:	7e1b      	ldrb	r3, [r3, #24]
 80066a2:	4618      	mov	r0, r3
 80066a4:	1cfb      	adds	r3, r7, #3
 80066a6:	2201      	movs	r2, #1
 80066a8:	4619      	mov	r1, r3
 80066aa:	f7ff fe43 	bl	8006334 <SEGGER_RTT_ReadNoLock>
 80066ae:	4603      	mov	r3, r0
 80066b0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	dd54      	ble.n	8006762 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	2b80      	cmp	r3, #128	; 0x80
 80066bc:	d032      	beq.n	8006724 <_HandleIncomingPacket+0x8c>
 80066be:	2b80      	cmp	r3, #128	; 0x80
 80066c0:	dc42      	bgt.n	8006748 <_HandleIncomingPacket+0xb0>
 80066c2:	2b07      	cmp	r3, #7
 80066c4:	dc16      	bgt.n	80066f4 <_HandleIncomingPacket+0x5c>
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	dd3e      	ble.n	8006748 <_HandleIncomingPacket+0xb0>
 80066ca:	3b01      	subs	r3, #1
 80066cc:	2b06      	cmp	r3, #6
 80066ce:	d83b      	bhi.n	8006748 <_HandleIncomingPacket+0xb0>
 80066d0:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <_HandleIncomingPacket+0x40>)
 80066d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d6:	bf00      	nop
 80066d8:	080066fb 	.word	0x080066fb
 80066dc:	08006701 	.word	0x08006701
 80066e0:	08006707 	.word	0x08006707
 80066e4:	0800670d 	.word	0x0800670d
 80066e8:	08006713 	.word	0x08006713
 80066ec:	08006719 	.word	0x08006719
 80066f0:	0800671f 	.word	0x0800671f
 80066f4:	2b7f      	cmp	r3, #127	; 0x7f
 80066f6:	d036      	beq.n	8006766 <_HandleIncomingPacket+0xce>
 80066f8:	e026      	b.n	8006748 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80066fa:	f000 fba7 	bl	8006e4c <SEGGER_SYSVIEW_Start>
      break;
 80066fe:	e037      	b.n	8006770 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006700:	f000 fc60 	bl	8006fc4 <SEGGER_SYSVIEW_Stop>
      break;
 8006704:	e034      	b.n	8006770 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006706:	f000 fe39 	bl	800737c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800670a:	e031      	b.n	8006770 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800670c:	f000 fdfe 	bl	800730c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006710:	e02e      	b.n	8006770 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006712:	f000 fc7d 	bl	8007010 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006716:	e02b      	b.n	8006770 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006718:	f001 f8cc 	bl	80078b4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800671c:	e028      	b.n	8006770 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800671e:	f001 f8ab 	bl	8007878 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006722:	e025      	b.n	8006770 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006724:	4b14      	ldr	r3, [pc, #80]	; (8006778 <_HandleIncomingPacket+0xe0>)
 8006726:	7e1b      	ldrb	r3, [r3, #24]
 8006728:	4618      	mov	r0, r3
 800672a:	1cfb      	adds	r3, r7, #3
 800672c:	2201      	movs	r2, #1
 800672e:	4619      	mov	r1, r3
 8006730:	f7ff fe00 	bl	8006334 <SEGGER_RTT_ReadNoLock>
 8006734:	4603      	mov	r3, r0
 8006736:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	dd15      	ble.n	800676a <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800673e:	78fb      	ldrb	r3, [r7, #3]
 8006740:	4618      	mov	r0, r3
 8006742:	f001 f819 	bl	8007778 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006746:	e010      	b.n	800676a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006748:	78fb      	ldrb	r3, [r7, #3]
 800674a:	b25b      	sxtb	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	da0e      	bge.n	800676e <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006750:	4b09      	ldr	r3, [pc, #36]	; (8006778 <_HandleIncomingPacket+0xe0>)
 8006752:	7e1b      	ldrb	r3, [r3, #24]
 8006754:	4618      	mov	r0, r3
 8006756:	1cfb      	adds	r3, r7, #3
 8006758:	2201      	movs	r2, #1
 800675a:	4619      	mov	r1, r3
 800675c:	f7ff fdea 	bl	8006334 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006760:	e005      	b.n	800676e <_HandleIncomingPacket+0xd6>
    }
  }
 8006762:	bf00      	nop
 8006764:	e004      	b.n	8006770 <_HandleIncomingPacket+0xd8>
      break;
 8006766:	bf00      	nop
 8006768:	e002      	b.n	8006770 <_HandleIncomingPacket+0xd8>
      break;
 800676a:	bf00      	nop
 800676c:	e000      	b.n	8006770 <_HandleIncomingPacket+0xd8>
      break;
 800676e:	bf00      	nop
}
 8006770:	bf00      	nop
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	200066a4 	.word	0x200066a4

0800677c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800677c:	b580      	push	{r7, lr}
 800677e:	b08c      	sub	sp, #48	; 0x30
 8006780:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006782:	2301      	movs	r3, #1
 8006784:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006786:	1d3b      	adds	r3, r7, #4
 8006788:	3301      	adds	r3, #1
 800678a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006790:	4b31      	ldr	r3, [pc, #196]	; (8006858 <_TrySendOverflowPacket+0xdc>)
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	62bb      	str	r3, [r7, #40]	; 0x28
 8006796:	e00b      	b.n	80067b0 <_TrySendOverflowPacket+0x34>
 8006798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679a:	b2da      	uxtb	r2, r3
 800679c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679e:	1c59      	adds	r1, r3, #1
 80067a0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80067a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067a6:	b2d2      	uxtb	r2, r2
 80067a8:	701a      	strb	r2, [r3, #0]
 80067aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ac:	09db      	lsrs	r3, r3, #7
 80067ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80067b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b2:	2b7f      	cmp	r3, #127	; 0x7f
 80067b4:	d8f0      	bhi.n	8006798 <_TrySendOverflowPacket+0x1c>
 80067b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	701a      	strb	r2, [r3, #0]
 80067c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80067c6:	4b25      	ldr	r3, [pc, #148]	; (800685c <_TrySendOverflowPacket+0xe0>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80067cc:	4b22      	ldr	r3, [pc, #136]	; (8006858 <_TrySendOverflowPacket+0xdc>)
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	627b      	str	r3, [r7, #36]	; 0x24
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	623b      	str	r3, [r7, #32]
 80067de:	e00b      	b.n	80067f8 <_TrySendOverflowPacket+0x7c>
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	1c59      	adds	r1, r3, #1
 80067e8:	6279      	str	r1, [r7, #36]	; 0x24
 80067ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	09db      	lsrs	r3, r3, #7
 80067f6:	623b      	str	r3, [r7, #32]
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	2b7f      	cmp	r3, #127	; 0x7f
 80067fc:	d8f0      	bhi.n	80067e0 <_TrySendOverflowPacket+0x64>
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	1c5a      	adds	r2, r3, #1
 8006802:	627a      	str	r2, [r7, #36]	; 0x24
 8006804:	6a3a      	ldr	r2, [r7, #32]
 8006806:	b2d2      	uxtb	r2, r2
 8006808:	701a      	strb	r2, [r3, #0]
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800680e:	4b12      	ldr	r3, [pc, #72]	; (8006858 <_TrySendOverflowPacket+0xdc>)
 8006810:	785b      	ldrb	r3, [r3, #1]
 8006812:	4618      	mov	r0, r3
 8006814:	1d3b      	adds	r3, r7, #4
 8006816:	69fa      	ldr	r2, [r7, #28]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	461a      	mov	r2, r3
 800681c:	1d3b      	adds	r3, r7, #4
 800681e:	4619      	mov	r1, r3
 8006820:	f7f9 fcd6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006824:	4603      	mov	r3, r0
 8006826:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d009      	beq.n	8006842 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800682e:	4a0a      	ldr	r2, [pc, #40]	; (8006858 <_TrySendOverflowPacket+0xdc>)
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006834:	4b08      	ldr	r3, [pc, #32]	; (8006858 <_TrySendOverflowPacket+0xdc>)
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	3b01      	subs	r3, #1
 800683a:	b2da      	uxtb	r2, r3
 800683c:	4b06      	ldr	r3, [pc, #24]	; (8006858 <_TrySendOverflowPacket+0xdc>)
 800683e:	701a      	strb	r2, [r3, #0]
 8006840:	e004      	b.n	800684c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006842:	4b05      	ldr	r3, [pc, #20]	; (8006858 <_TrySendOverflowPacket+0xdc>)
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	3301      	adds	r3, #1
 8006848:	4a03      	ldr	r2, [pc, #12]	; (8006858 <_TrySendOverflowPacket+0xdc>)
 800684a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800684c:	693b      	ldr	r3, [r7, #16]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3730      	adds	r7, #48	; 0x30
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	200066a4 	.word	0x200066a4
 800685c:	e0001004 	.word	0xe0001004

08006860 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006860:	b580      	push	{r7, lr}
 8006862:	b08a      	sub	sp, #40	; 0x28
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800686c:	4b6c      	ldr	r3, [pc, #432]	; (8006a20 <_SendPacket+0x1c0>)
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d010      	beq.n	8006896 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006874:	4b6a      	ldr	r3, [pc, #424]	; (8006a20 <_SendPacket+0x1c0>)
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 80a3 	beq.w	80069c4 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800687e:	4b68      	ldr	r3, [pc, #416]	; (8006a20 <_SendPacket+0x1c0>)
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	2b02      	cmp	r3, #2
 8006884:	d109      	bne.n	800689a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006886:	f7ff ff79 	bl	800677c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800688a:	4b65      	ldr	r3, [pc, #404]	; (8006a20 <_SendPacket+0x1c0>)
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	2b01      	cmp	r3, #1
 8006890:	f040 809a 	bne.w	80069c8 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8006894:	e001      	b.n	800689a <_SendPacket+0x3a>
    goto Send;
 8006896:	bf00      	nop
 8006898:	e000      	b.n	800689c <_SendPacket+0x3c>
Send:
 800689a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b1f      	cmp	r3, #31
 80068a0:	d809      	bhi.n	80068b6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80068a2:	4b5f      	ldr	r3, [pc, #380]	; (8006a20 <_SendPacket+0x1c0>)
 80068a4:	69da      	ldr	r2, [r3, #28]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	fa22 f303 	lsr.w	r3, r2, r3
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f040 808b 	bne.w	80069cc <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b17      	cmp	r3, #23
 80068ba:	d807      	bhi.n	80068cc <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3b01      	subs	r3, #1
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	701a      	strb	r2, [r3, #0]
 80068ca:	e03d      	b.n	8006948 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	2b7f      	cmp	r3, #127	; 0x7f
 80068d8:	d912      	bls.n	8006900 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	09da      	lsrs	r2, r3, #7
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3b01      	subs	r3, #1
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	b2d2      	uxtb	r2, r2
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	3a01      	subs	r2, #1
 80068f2:	60fa      	str	r2, [r7, #12]
 80068f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	701a      	strb	r2, [r3, #0]
 80068fe:	e006      	b.n	800690e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	3b01      	subs	r3, #1
 8006904:	60fb      	str	r3, [r7, #12]
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	b2da      	uxtb	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b7f      	cmp	r3, #127	; 0x7f
 8006912:	d912      	bls.n	800693a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	09da      	lsrs	r2, r3, #7
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	3b01      	subs	r3, #1
 800691c:	60fb      	str	r3, [r7, #12]
 800691e:	b2d2      	uxtb	r2, r2
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	b2db      	uxtb	r3, r3
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	3a01      	subs	r2, #1
 800692c:	60fa      	str	r2, [r7, #12]
 800692e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006932:	b2da      	uxtb	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	e006      	b.n	8006948 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3b01      	subs	r3, #1
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	b2da      	uxtb	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006948:	4b36      	ldr	r3, [pc, #216]	; (8006a24 <_SendPacket+0x1c4>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800694e:	4b34      	ldr	r3, [pc, #208]	; (8006a20 <_SendPacket+0x1c0>)
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	69ba      	ldr	r2, [r7, #24]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	627b      	str	r3, [r7, #36]	; 0x24
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	623b      	str	r3, [r7, #32]
 8006960:	e00b      	b.n	800697a <_SendPacket+0x11a>
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	b2da      	uxtb	r2, r3
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	1c59      	adds	r1, r3, #1
 800696a:	6279      	str	r1, [r7, #36]	; 0x24
 800696c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006970:	b2d2      	uxtb	r2, r2
 8006972:	701a      	strb	r2, [r3, #0]
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	09db      	lsrs	r3, r3, #7
 8006978:	623b      	str	r3, [r7, #32]
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	2b7f      	cmp	r3, #127	; 0x7f
 800697e:	d8f0      	bhi.n	8006962 <_SendPacket+0x102>
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	627a      	str	r2, [r7, #36]	; 0x24
 8006986:	6a3a      	ldr	r2, [r7, #32]
 8006988:	b2d2      	uxtb	r2, r2
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006990:	4b23      	ldr	r3, [pc, #140]	; (8006a20 <_SendPacket+0x1c0>)
 8006992:	785b      	ldrb	r3, [r3, #1]
 8006994:	4618      	mov	r0, r3
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	461a      	mov	r2, r3
 800699e:	68f9      	ldr	r1, [r7, #12]
 80069a0:	f7f9 fc16 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80069a4:	4603      	mov	r3, r0
 80069a6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80069ae:	4a1c      	ldr	r2, [pc, #112]	; (8006a20 <_SendPacket+0x1c0>)
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	60d3      	str	r3, [r2, #12]
 80069b4:	e00b      	b.n	80069ce <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80069b6:	4b1a      	ldr	r3, [pc, #104]	; (8006a20 <_SendPacket+0x1c0>)
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	3301      	adds	r3, #1
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	4b18      	ldr	r3, [pc, #96]	; (8006a20 <_SendPacket+0x1c0>)
 80069c0:	701a      	strb	r2, [r3, #0]
 80069c2:	e004      	b.n	80069ce <_SendPacket+0x16e>
    goto SendDone;
 80069c4:	bf00      	nop
 80069c6:	e002      	b.n	80069ce <_SendPacket+0x16e>
      goto SendDone;
 80069c8:	bf00      	nop
 80069ca:	e000      	b.n	80069ce <_SendPacket+0x16e>
      goto SendDone;
 80069cc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80069ce:	4b14      	ldr	r3, [pc, #80]	; (8006a20 <_SendPacket+0x1c0>)
 80069d0:	7e1b      	ldrb	r3, [r3, #24]
 80069d2:	4619      	mov	r1, r3
 80069d4:	4a14      	ldr	r2, [pc, #80]	; (8006a28 <_SendPacket+0x1c8>)
 80069d6:	460b      	mov	r3, r1
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	440b      	add	r3, r1
 80069dc:	00db      	lsls	r3, r3, #3
 80069de:	4413      	add	r3, r2
 80069e0:	336c      	adds	r3, #108	; 0x6c
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	4b0e      	ldr	r3, [pc, #56]	; (8006a20 <_SendPacket+0x1c0>)
 80069e6:	7e1b      	ldrb	r3, [r3, #24]
 80069e8:	4618      	mov	r0, r3
 80069ea:	490f      	ldr	r1, [pc, #60]	; (8006a28 <_SendPacket+0x1c8>)
 80069ec:	4603      	mov	r3, r0
 80069ee:	005b      	lsls	r3, r3, #1
 80069f0:	4403      	add	r3, r0
 80069f2:	00db      	lsls	r3, r3, #3
 80069f4:	440b      	add	r3, r1
 80069f6:	3370      	adds	r3, #112	; 0x70
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d00b      	beq.n	8006a16 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80069fe:	4b08      	ldr	r3, [pc, #32]	; (8006a20 <_SendPacket+0x1c0>)
 8006a00:	789b      	ldrb	r3, [r3, #2]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d107      	bne.n	8006a16 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006a06:	4b06      	ldr	r3, [pc, #24]	; (8006a20 <_SendPacket+0x1c0>)
 8006a08:	2201      	movs	r2, #1
 8006a0a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006a0c:	f7ff fe44 	bl	8006698 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006a10:	4b03      	ldr	r3, [pc, #12]	; (8006a20 <_SendPacket+0x1c0>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006a16:	bf00      	nop
 8006a18:	3728      	adds	r7, #40	; 0x28
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	200066a4 	.word	0x200066a4
 8006a24:	e0001004 	.word	0xe0001004
 8006a28:	200041e4 	.word	0x200041e4

08006a2c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af02      	add	r7, sp, #8
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
 8006a38:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006a40:	4917      	ldr	r1, [pc, #92]	; (8006aa0 <SEGGER_SYSVIEW_Init+0x74>)
 8006a42:	4818      	ldr	r0, [pc, #96]	; (8006aa4 <SEGGER_SYSVIEW_Init+0x78>)
 8006a44:	f7ff fcfc 	bl	8006440 <SEGGER_RTT_AllocUpBuffer>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	4b16      	ldr	r3, [pc, #88]	; (8006aa8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a4e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006a50:	4b15      	ldr	r3, [pc, #84]	; (8006aa8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a52:	785a      	ldrb	r2, [r3, #1]
 8006a54:	4b14      	ldr	r3, [pc, #80]	; (8006aa8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a56:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006a58:	4b13      	ldr	r3, [pc, #76]	; (8006aa8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a5a:	7e1b      	ldrb	r3, [r3, #24]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	2300      	movs	r3, #0
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	2308      	movs	r3, #8
 8006a64:	4a11      	ldr	r2, [pc, #68]	; (8006aac <SEGGER_SYSVIEW_Init+0x80>)
 8006a66:	490f      	ldr	r1, [pc, #60]	; (8006aa4 <SEGGER_SYSVIEW_Init+0x78>)
 8006a68:	f7ff fd6e 	bl	8006548 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006a6c:	4b0e      	ldr	r3, [pc, #56]	; (8006aa8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006a72:	4b0f      	ldr	r3, [pc, #60]	; (8006ab0 <SEGGER_SYSVIEW_Init+0x84>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a0c      	ldr	r2, [pc, #48]	; (8006aa8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a78:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006a7a:	4a0b      	ldr	r2, [pc, #44]	; (8006aa8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006a80:	4a09      	ldr	r2, [pc, #36]	; (8006aa8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006a86:	4a08      	ldr	r2, [pc, #32]	; (8006aa8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006a8c:	4a06      	ldr	r2, [pc, #24]	; (8006aa8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006a92:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006a98:	bf00      	nop
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	2000469c 	.word	0x2000469c
 8006aa4:	08007ef0 	.word	0x08007ef0
 8006aa8:	200066a4 	.word	0x200066a4
 8006aac:	2000669c 	.word	0x2000669c
 8006ab0:	e0001004 	.word	0xe0001004

08006ab4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006abc:	4a04      	ldr	r2, [pc, #16]	; (8006ad0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6113      	str	r3, [r2, #16]
}
 8006ac2:	bf00      	nop
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	200066a4 	.word	0x200066a4

08006ad4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006adc:	f3ef 8311 	mrs	r3, BASEPRI
 8006ae0:	f04f 0120 	mov.w	r1, #32
 8006ae4:	f381 8811 	msr	BASEPRI, r1
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	4808      	ldr	r0, [pc, #32]	; (8006b0c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006aec:	f7ff fdc8 	bl	8006680 <_PreparePacket>
 8006af0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	68b9      	ldr	r1, [r7, #8]
 8006af6:	68b8      	ldr	r0, [r7, #8]
 8006af8:	f7ff feb2 	bl	8006860 <_SendPacket>
  RECORD_END();
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f383 8811 	msr	BASEPRI, r3
}
 8006b02:	bf00      	nop
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	200066d4 	.word	0x200066d4

08006b10 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b1a:	f3ef 8311 	mrs	r3, BASEPRI
 8006b1e:	f04f 0120 	mov.w	r1, #32
 8006b22:	f381 8811 	msr	BASEPRI, r1
 8006b26:	617b      	str	r3, [r7, #20]
 8006b28:	4816      	ldr	r0, [pc, #88]	; (8006b84 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006b2a:	f7ff fda9 	bl	8006680 <_PreparePacket>
 8006b2e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	61fb      	str	r3, [r7, #28]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	61bb      	str	r3, [r7, #24]
 8006b3c:	e00b      	b.n	8006b56 <SEGGER_SYSVIEW_RecordU32+0x46>
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	1c59      	adds	r1, r3, #1
 8006b46:	61f9      	str	r1, [r7, #28]
 8006b48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b4c:	b2d2      	uxtb	r2, r2
 8006b4e:	701a      	strb	r2, [r3, #0]
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	09db      	lsrs	r3, r3, #7
 8006b54:	61bb      	str	r3, [r7, #24]
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	2b7f      	cmp	r3, #127	; 0x7f
 8006b5a:	d8f0      	bhi.n	8006b3e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	61fa      	str	r2, [r7, #28]
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	b2d2      	uxtb	r2, r2
 8006b66:	701a      	strb	r2, [r3, #0]
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	68f9      	ldr	r1, [r7, #12]
 8006b70:	6938      	ldr	r0, [r7, #16]
 8006b72:	f7ff fe75 	bl	8006860 <_SendPacket>
  RECORD_END();
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f383 8811 	msr	BASEPRI, r3
}
 8006b7c:	bf00      	nop
 8006b7e:	3720      	adds	r7, #32
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	200066d4 	.word	0x200066d4

08006b88 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08c      	sub	sp, #48	; 0x30
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b94:	f3ef 8311 	mrs	r3, BASEPRI
 8006b98:	f04f 0120 	mov.w	r1, #32
 8006b9c:	f381 8811 	msr	BASEPRI, r1
 8006ba0:	61fb      	str	r3, [r7, #28]
 8006ba2:	4825      	ldr	r0, [pc, #148]	; (8006c38 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006ba4:	f7ff fd6c 	bl	8006680 <_PreparePacket>
 8006ba8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bb6:	e00b      	b.n	8006bd0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbe:	1c59      	adds	r1, r3, #1
 8006bc0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006bc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bc6:	b2d2      	uxtb	r2, r2
 8006bc8:	701a      	strb	r2, [r3, #0]
 8006bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bcc:	09db      	lsrs	r3, r3, #7
 8006bce:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	2b7f      	cmp	r3, #127	; 0x7f
 8006bd4:	d8f0      	bhi.n	8006bb8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bde:	b2d2      	uxtb	r2, r2
 8006be0:	701a      	strb	r2, [r3, #0]
 8006be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	623b      	str	r3, [r7, #32]
 8006bee:	e00b      	b.n	8006c08 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	1c59      	adds	r1, r3, #1
 8006bf8:	6279      	str	r1, [r7, #36]	; 0x24
 8006bfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bfe:	b2d2      	uxtb	r2, r2
 8006c00:	701a      	strb	r2, [r3, #0]
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	09db      	lsrs	r3, r3, #7
 8006c06:	623b      	str	r3, [r7, #32]
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c0c:	d8f0      	bhi.n	8006bf0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	627a      	str	r2, [r7, #36]	; 0x24
 8006c14:	6a3a      	ldr	r2, [r7, #32]
 8006c16:	b2d2      	uxtb	r2, r2
 8006c18:	701a      	strb	r2, [r3, #0]
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	6979      	ldr	r1, [r7, #20]
 8006c22:	69b8      	ldr	r0, [r7, #24]
 8006c24:	f7ff fe1c 	bl	8006860 <_SendPacket>
  RECORD_END();
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	f383 8811 	msr	BASEPRI, r3
}
 8006c2e:	bf00      	nop
 8006c30:	3730      	adds	r7, #48	; 0x30
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	200066d4 	.word	0x200066d4

08006c3c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b08e      	sub	sp, #56	; 0x38
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
 8006c48:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c4a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c4e:	f04f 0120 	mov.w	r1, #32
 8006c52:	f381 8811 	msr	BASEPRI, r1
 8006c56:	61fb      	str	r3, [r7, #28]
 8006c58:	4832      	ldr	r0, [pc, #200]	; (8006d24 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006c5a:	f7ff fd11 	bl	8006680 <_PreparePacket>
 8006c5e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	637b      	str	r3, [r7, #52]	; 0x34
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c6c:	e00b      	b.n	8006c86 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c74:	1c59      	adds	r1, r3, #1
 8006c76:	6379      	str	r1, [r7, #52]	; 0x34
 8006c78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c7c:	b2d2      	uxtb	r2, r2
 8006c7e:	701a      	strb	r2, [r3, #0]
 8006c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c82:	09db      	lsrs	r3, r3, #7
 8006c84:	633b      	str	r3, [r7, #48]	; 0x30
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	2b7f      	cmp	r3, #127	; 0x7f
 8006c8a:	d8f0      	bhi.n	8006c6e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	637a      	str	r2, [r7, #52]	; 0x34
 8006c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	701a      	strb	r2, [r3, #0]
 8006c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ca4:	e00b      	b.n	8006cbe <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cac:	1c59      	adds	r1, r3, #1
 8006cae:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006cb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cb4:	b2d2      	uxtb	r2, r2
 8006cb6:	701a      	strb	r2, [r3, #0]
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	09db      	lsrs	r3, r3, #7
 8006cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc0:	2b7f      	cmp	r3, #127	; 0x7f
 8006cc2:	d8f0      	bhi.n	8006ca6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ccc:	b2d2      	uxtb	r2, r2
 8006cce:	701a      	strb	r2, [r3, #0]
 8006cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	623b      	str	r3, [r7, #32]
 8006cdc:	e00b      	b.n	8006cf6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	1c59      	adds	r1, r3, #1
 8006ce6:	6279      	str	r1, [r7, #36]	; 0x24
 8006ce8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	701a      	strb	r2, [r3, #0]
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	09db      	lsrs	r3, r3, #7
 8006cf4:	623b      	str	r3, [r7, #32]
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	2b7f      	cmp	r3, #127	; 0x7f
 8006cfa:	d8f0      	bhi.n	8006cde <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	627a      	str	r2, [r7, #36]	; 0x24
 8006d02:	6a3a      	ldr	r2, [r7, #32]
 8006d04:	b2d2      	uxtb	r2, r2
 8006d06:	701a      	strb	r2, [r3, #0]
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	6979      	ldr	r1, [r7, #20]
 8006d10:	69b8      	ldr	r0, [r7, #24]
 8006d12:	f7ff fda5 	bl	8006860 <_SendPacket>
  RECORD_END();
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	f383 8811 	msr	BASEPRI, r3
}
 8006d1c:	bf00      	nop
 8006d1e:	3738      	adds	r7, #56	; 0x38
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	200066d4 	.word	0x200066d4

08006d28 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b090      	sub	sp, #64	; 0x40
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d36:	f3ef 8311 	mrs	r3, BASEPRI
 8006d3a:	f04f 0120 	mov.w	r1, #32
 8006d3e:	f381 8811 	msr	BASEPRI, r1
 8006d42:	61fb      	str	r3, [r7, #28]
 8006d44:	4840      	ldr	r0, [pc, #256]	; (8006e48 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006d46:	f7ff fc9b 	bl	8006680 <_PreparePacket>
 8006d4a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d58:	e00b      	b.n	8006d72 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d60:	1c59      	adds	r1, r3, #1
 8006d62:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006d64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d68:	b2d2      	uxtb	r2, r2
 8006d6a:	701a      	strb	r2, [r3, #0]
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6e:	09db      	lsrs	r3, r3, #7
 8006d70:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d74:	2b7f      	cmp	r3, #127	; 0x7f
 8006d76:	d8f0      	bhi.n	8006d5a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d7a:	1c5a      	adds	r2, r3, #1
 8006d7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d80:	b2d2      	uxtb	r2, r2
 8006d82:	701a      	strb	r2, [r3, #0]
 8006d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d86:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	633b      	str	r3, [r7, #48]	; 0x30
 8006d90:	e00b      	b.n	8006daa <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d98:	1c59      	adds	r1, r3, #1
 8006d9a:	6379      	str	r1, [r7, #52]	; 0x34
 8006d9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	701a      	strb	r2, [r3, #0]
 8006da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da6:	09db      	lsrs	r3, r3, #7
 8006da8:	633b      	str	r3, [r7, #48]	; 0x30
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	2b7f      	cmp	r3, #127	; 0x7f
 8006dae:	d8f0      	bhi.n	8006d92 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	637a      	str	r2, [r7, #52]	; 0x34
 8006db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006db8:	b2d2      	uxtb	r2, r2
 8006dba:	701a      	strb	r2, [r3, #0]
 8006dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dbe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dc8:	e00b      	b.n	8006de2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dcc:	b2da      	uxtb	r2, r3
 8006dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd0:	1c59      	adds	r1, r3, #1
 8006dd2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006dd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dd8:	b2d2      	uxtb	r2, r2
 8006dda:	701a      	strb	r2, [r3, #0]
 8006ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dde:	09db      	lsrs	r3, r3, #7
 8006de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de4:	2b7f      	cmp	r3, #127	; 0x7f
 8006de6:	d8f0      	bhi.n	8006dca <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	701a      	strb	r2, [r3, #0]
 8006df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8006dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dfe:	623b      	str	r3, [r7, #32]
 8006e00:	e00b      	b.n	8006e1a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	1c59      	adds	r1, r3, #1
 8006e0a:	6279      	str	r1, [r7, #36]	; 0x24
 8006e0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e10:	b2d2      	uxtb	r2, r2
 8006e12:	701a      	strb	r2, [r3, #0]
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	09db      	lsrs	r3, r3, #7
 8006e18:	623b      	str	r3, [r7, #32]
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e1e:	d8f0      	bhi.n	8006e02 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	627a      	str	r2, [r7, #36]	; 0x24
 8006e26:	6a3a      	ldr	r2, [r7, #32]
 8006e28:	b2d2      	uxtb	r2, r2
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	6979      	ldr	r1, [r7, #20]
 8006e34:	69b8      	ldr	r0, [r7, #24]
 8006e36:	f7ff fd13 	bl	8006860 <_SendPacket>
  RECORD_END();
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	f383 8811 	msr	BASEPRI, r3
}
 8006e40:	bf00      	nop
 8006e42:	3740      	adds	r7, #64	; 0x40
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	200066d4 	.word	0x200066d4

08006e4c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08c      	sub	sp, #48	; 0x30
 8006e50:	af00      	add	r7, sp, #0

	vSetVarulMaxPRIGROUPValue(); // Adjust priorities for not getting stuck (Sozza)
 8006e52:	f7fe fe41 	bl	8005ad8 <vSetVarulMaxPRIGROUPValue>

#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006e56:	4b58      	ldr	r3, [pc, #352]	; (8006fb8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006e58:	2201      	movs	r2, #1
 8006e5a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006e5c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e60:	f04f 0120 	mov.w	r1, #32
 8006e64:	f381 8811 	msr	BASEPRI, r1
 8006e68:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006e6a:	4b53      	ldr	r3, [pc, #332]	; (8006fb8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006e6c:	785b      	ldrb	r3, [r3, #1]
 8006e6e:	220a      	movs	r2, #10
 8006e70:	4952      	ldr	r1, [pc, #328]	; (8006fbc <SEGGER_SYSVIEW_Start+0x170>)
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7f9 f9ac 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006e7e:	200a      	movs	r0, #10
 8006e80:	f7ff fe28 	bl	8006ad4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e84:	f3ef 8311 	mrs	r3, BASEPRI
 8006e88:	f04f 0120 	mov.w	r1, #32
 8006e8c:	f381 8811 	msr	BASEPRI, r1
 8006e90:	60bb      	str	r3, [r7, #8]
 8006e92:	484b      	ldr	r0, [pc, #300]	; (8006fc0 <SEGGER_SYSVIEW_Start+0x174>)
 8006e94:	f7ff fbf4 	bl	8006680 <_PreparePacket>
 8006e98:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ea2:	4b45      	ldr	r3, [pc, #276]	; (8006fb8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ea8:	e00b      	b.n	8006ec2 <SEGGER_SYSVIEW_Start+0x76>
 8006eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eac:	b2da      	uxtb	r2, r3
 8006eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb0:	1c59      	adds	r1, r3, #1
 8006eb2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006eb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eb8:	b2d2      	uxtb	r2, r2
 8006eba:	701a      	strb	r2, [r3, #0]
 8006ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebe:	09db      	lsrs	r3, r3, #7
 8006ec0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec4:	2b7f      	cmp	r3, #127	; 0x7f
 8006ec6:	d8f0      	bhi.n	8006eaa <SEGGER_SYSVIEW_Start+0x5e>
 8006ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ed0:	b2d2      	uxtb	r2, r2
 8006ed2:	701a      	strb	r2, [r3, #0]
 8006ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	627b      	str	r3, [r7, #36]	; 0x24
 8006edc:	4b36      	ldr	r3, [pc, #216]	; (8006fb8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	623b      	str	r3, [r7, #32]
 8006ee2:	e00b      	b.n	8006efc <SEGGER_SYSVIEW_Start+0xb0>
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eea:	1c59      	adds	r1, r3, #1
 8006eec:	6279      	str	r1, [r7, #36]	; 0x24
 8006eee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	701a      	strb	r2, [r3, #0]
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	09db      	lsrs	r3, r3, #7
 8006efa:	623b      	str	r3, [r7, #32]
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	2b7f      	cmp	r3, #127	; 0x7f
 8006f00:	d8f0      	bhi.n	8006ee4 <SEGGER_SYSVIEW_Start+0x98>
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	1c5a      	adds	r2, r3, #1
 8006f06:	627a      	str	r2, [r7, #36]	; 0x24
 8006f08:	6a3a      	ldr	r2, [r7, #32]
 8006f0a:	b2d2      	uxtb	r2, r2
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	61fb      	str	r3, [r7, #28]
 8006f16:	4b28      	ldr	r3, [pc, #160]	; (8006fb8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	61bb      	str	r3, [r7, #24]
 8006f1c:	e00b      	b.n	8006f36 <SEGGER_SYSVIEW_Start+0xea>
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	1c59      	adds	r1, r3, #1
 8006f26:	61f9      	str	r1, [r7, #28]
 8006f28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f2c:	b2d2      	uxtb	r2, r2
 8006f2e:	701a      	strb	r2, [r3, #0]
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	09db      	lsrs	r3, r3, #7
 8006f34:	61bb      	str	r3, [r7, #24]
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	2b7f      	cmp	r3, #127	; 0x7f
 8006f3a:	d8f0      	bhi.n	8006f1e <SEGGER_SYSVIEW_Start+0xd2>
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	61fa      	str	r2, [r7, #28]
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	b2d2      	uxtb	r2, r2
 8006f46:	701a      	strb	r2, [r3, #0]
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	617b      	str	r3, [r7, #20]
 8006f50:	2300      	movs	r3, #0
 8006f52:	613b      	str	r3, [r7, #16]
 8006f54:	e00b      	b.n	8006f6e <SEGGER_SYSVIEW_Start+0x122>
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	1c59      	adds	r1, r3, #1
 8006f5e:	6179      	str	r1, [r7, #20]
 8006f60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f64:	b2d2      	uxtb	r2, r2
 8006f66:	701a      	strb	r2, [r3, #0]
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	09db      	lsrs	r3, r3, #7
 8006f6c:	613b      	str	r3, [r7, #16]
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	2b7f      	cmp	r3, #127	; 0x7f
 8006f72:	d8f0      	bhi.n	8006f56 <SEGGER_SYSVIEW_Start+0x10a>
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	1c5a      	adds	r2, r3, #1
 8006f78:	617a      	str	r2, [r7, #20]
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	b2d2      	uxtb	r2, r2
 8006f7e:	701a      	strb	r2, [r3, #0]
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006f84:	2218      	movs	r2, #24
 8006f86:	6839      	ldr	r1, [r7, #0]
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7ff fc69 	bl	8006860 <_SendPacket>
      RECORD_END();
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006f94:	4b08      	ldr	r3, [pc, #32]	; (8006fb8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d002      	beq.n	8006fa2 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006f9c:	4b06      	ldr	r3, [pc, #24]	; (8006fb8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006fa2:	f000 f9eb 	bl	800737c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006fa6:	f000 f9b1 	bl	800730c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006faa:	f000 fc83 	bl	80078b4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006fae:	bf00      	nop
 8006fb0:	3730      	adds	r7, #48	; 0x30
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	200066a4 	.word	0x200066a4
 8006fbc:	08007f18 	.word	0x08007f18
 8006fc0:	200066d4 	.word	0x200066d4

08006fc4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006fca:	f3ef 8311 	mrs	r3, BASEPRI
 8006fce:	f04f 0120 	mov.w	r1, #32
 8006fd2:	f381 8811 	msr	BASEPRI, r1
 8006fd6:	607b      	str	r3, [r7, #4]
 8006fd8:	480b      	ldr	r0, [pc, #44]	; (8007008 <SEGGER_SYSVIEW_Stop+0x44>)
 8006fda:	f7ff fb51 	bl	8006680 <_PreparePacket>
 8006fde:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006fe0:	4b0a      	ldr	r3, [pc, #40]	; (800700c <SEGGER_SYSVIEW_Stop+0x48>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d007      	beq.n	8006ff8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006fe8:	220b      	movs	r2, #11
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6838      	ldr	r0, [r7, #0]
 8006fee:	f7ff fc37 	bl	8006860 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006ff2:	4b06      	ldr	r3, [pc, #24]	; (800700c <SEGGER_SYSVIEW_Stop+0x48>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f383 8811 	msr	BASEPRI, r3
}
 8006ffe:	bf00      	nop
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	200066d4 	.word	0x200066d4
 800700c:	200066a4 	.word	0x200066a4

08007010 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007010:	b580      	push	{r7, lr}
 8007012:	b08c      	sub	sp, #48	; 0x30
 8007014:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007016:	f3ef 8311 	mrs	r3, BASEPRI
 800701a:	f04f 0120 	mov.w	r1, #32
 800701e:	f381 8811 	msr	BASEPRI, r1
 8007022:	60fb      	str	r3, [r7, #12]
 8007024:	4845      	ldr	r0, [pc, #276]	; (800713c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007026:	f7ff fb2b 	bl	8006680 <_PreparePacket>
 800702a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007034:	4b42      	ldr	r3, [pc, #264]	; (8007140 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	62bb      	str	r3, [r7, #40]	; 0x28
 800703a:	e00b      	b.n	8007054 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800703c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703e:	b2da      	uxtb	r2, r3
 8007040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007042:	1c59      	adds	r1, r3, #1
 8007044:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007046:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800704a:	b2d2      	uxtb	r2, r2
 800704c:	701a      	strb	r2, [r3, #0]
 800704e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007050:	09db      	lsrs	r3, r3, #7
 8007052:	62bb      	str	r3, [r7, #40]	; 0x28
 8007054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007056:	2b7f      	cmp	r3, #127	; 0x7f
 8007058:	d8f0      	bhi.n	800703c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705c:	1c5a      	adds	r2, r3, #1
 800705e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007062:	b2d2      	uxtb	r2, r2
 8007064:	701a      	strb	r2, [r3, #0]
 8007066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007068:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	627b      	str	r3, [r7, #36]	; 0x24
 800706e:	4b34      	ldr	r3, [pc, #208]	; (8007140 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	623b      	str	r3, [r7, #32]
 8007074:	e00b      	b.n	800708e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	b2da      	uxtb	r2, r3
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	1c59      	adds	r1, r3, #1
 800707e:	6279      	str	r1, [r7, #36]	; 0x24
 8007080:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007084:	b2d2      	uxtb	r2, r2
 8007086:	701a      	strb	r2, [r3, #0]
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	09db      	lsrs	r3, r3, #7
 800708c:	623b      	str	r3, [r7, #32]
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	2b7f      	cmp	r3, #127	; 0x7f
 8007092:	d8f0      	bhi.n	8007076 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	1c5a      	adds	r2, r3, #1
 8007098:	627a      	str	r2, [r7, #36]	; 0x24
 800709a:	6a3a      	ldr	r2, [r7, #32]
 800709c:	b2d2      	uxtb	r2, r2
 800709e:	701a      	strb	r2, [r3, #0]
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	61fb      	str	r3, [r7, #28]
 80070a8:	4b25      	ldr	r3, [pc, #148]	; (8007140 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	61bb      	str	r3, [r7, #24]
 80070ae:	e00b      	b.n	80070c8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	1c59      	adds	r1, r3, #1
 80070b8:	61f9      	str	r1, [r7, #28]
 80070ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070be:	b2d2      	uxtb	r2, r2
 80070c0:	701a      	strb	r2, [r3, #0]
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	09db      	lsrs	r3, r3, #7
 80070c6:	61bb      	str	r3, [r7, #24]
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	2b7f      	cmp	r3, #127	; 0x7f
 80070cc:	d8f0      	bhi.n	80070b0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	1c5a      	adds	r2, r3, #1
 80070d2:	61fa      	str	r2, [r7, #28]
 80070d4:	69ba      	ldr	r2, [r7, #24]
 80070d6:	b2d2      	uxtb	r2, r2
 80070d8:	701a      	strb	r2, [r3, #0]
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	617b      	str	r3, [r7, #20]
 80070e2:	2300      	movs	r3, #0
 80070e4:	613b      	str	r3, [r7, #16]
 80070e6:	e00b      	b.n	8007100 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	1c59      	adds	r1, r3, #1
 80070f0:	6179      	str	r1, [r7, #20]
 80070f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070f6:	b2d2      	uxtb	r2, r2
 80070f8:	701a      	strb	r2, [r3, #0]
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	09db      	lsrs	r3, r3, #7
 80070fe:	613b      	str	r3, [r7, #16]
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	2b7f      	cmp	r3, #127	; 0x7f
 8007104:	d8f0      	bhi.n	80070e8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	1c5a      	adds	r2, r3, #1
 800710a:	617a      	str	r2, [r7, #20]
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	b2d2      	uxtb	r2, r2
 8007110:	701a      	strb	r2, [r3, #0]
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007116:	2218      	movs	r2, #24
 8007118:	6879      	ldr	r1, [r7, #4]
 800711a:	68b8      	ldr	r0, [r7, #8]
 800711c:	f7ff fba0 	bl	8006860 <_SendPacket>
  RECORD_END();
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007126:	4b06      	ldr	r3, [pc, #24]	; (8007140 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	2b00      	cmp	r3, #0
 800712c:	d002      	beq.n	8007134 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800712e:	4b04      	ldr	r3, [pc, #16]	; (8007140 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007132:	4798      	blx	r3
  }
}
 8007134:	bf00      	nop
 8007136:	3730      	adds	r7, #48	; 0x30
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	200066d4 	.word	0x200066d4
 8007140:	200066a4 	.word	0x200066a4

08007144 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007144:	b580      	push	{r7, lr}
 8007146:	b092      	sub	sp, #72	; 0x48
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800714c:	f3ef 8311 	mrs	r3, BASEPRI
 8007150:	f04f 0120 	mov.w	r1, #32
 8007154:	f381 8811 	msr	BASEPRI, r1
 8007158:	617b      	str	r3, [r7, #20]
 800715a:	486a      	ldr	r0, [pc, #424]	; (8007304 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800715c:	f7ff fa90 	bl	8006680 <_PreparePacket>
 8007160:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	647b      	str	r3, [r7, #68]	; 0x44
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	4b66      	ldr	r3, [pc, #408]	; (8007308 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	643b      	str	r3, [r7, #64]	; 0x40
 8007176:	e00b      	b.n	8007190 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800717a:	b2da      	uxtb	r2, r3
 800717c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800717e:	1c59      	adds	r1, r3, #1
 8007180:	6479      	str	r1, [r7, #68]	; 0x44
 8007182:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007186:	b2d2      	uxtb	r2, r2
 8007188:	701a      	strb	r2, [r3, #0]
 800718a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800718c:	09db      	lsrs	r3, r3, #7
 800718e:	643b      	str	r3, [r7, #64]	; 0x40
 8007190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007192:	2b7f      	cmp	r3, #127	; 0x7f
 8007194:	d8f0      	bhi.n	8007178 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007198:	1c5a      	adds	r2, r3, #1
 800719a:	647a      	str	r2, [r7, #68]	; 0x44
 800719c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80071b0:	e00b      	b.n	80071ca <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80071b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b8:	1c59      	adds	r1, r3, #1
 80071ba:	63f9      	str	r1, [r7, #60]	; 0x3c
 80071bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071c0:	b2d2      	uxtb	r2, r2
 80071c2:	701a      	strb	r2, [r3, #0]
 80071c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c6:	09db      	lsrs	r3, r3, #7
 80071c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80071ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071cc:	2b7f      	cmp	r3, #127	; 0x7f
 80071ce:	d8f0      	bhi.n	80071b2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80071d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d2:	1c5a      	adds	r2, r3, #1
 80071d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80071d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071d8:	b2d2      	uxtb	r2, r2
 80071da:	701a      	strb	r2, [r3, #0]
 80071dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071de:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	2220      	movs	r2, #32
 80071e6:	4619      	mov	r1, r3
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f7ff f9f9 	bl	80065e0 <_EncodeStr>
 80071ee:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80071f0:	2209      	movs	r2, #9
 80071f2:	68f9      	ldr	r1, [r7, #12]
 80071f4:	6938      	ldr	r0, [r7, #16]
 80071f6:	f7ff fb33 	bl	8006860 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	637b      	str	r3, [r7, #52]	; 0x34
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	4b40      	ldr	r3, [pc, #256]	; (8007308 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	633b      	str	r3, [r7, #48]	; 0x30
 800720e:	e00b      	b.n	8007228 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007212:	b2da      	uxtb	r2, r3
 8007214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007216:	1c59      	adds	r1, r3, #1
 8007218:	6379      	str	r1, [r7, #52]	; 0x34
 800721a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800721e:	b2d2      	uxtb	r2, r2
 8007220:	701a      	strb	r2, [r3, #0]
 8007222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007224:	09db      	lsrs	r3, r3, #7
 8007226:	633b      	str	r3, [r7, #48]	; 0x30
 8007228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722a:	2b7f      	cmp	r3, #127	; 0x7f
 800722c:	d8f0      	bhi.n	8007210 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800722e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007230:	1c5a      	adds	r2, r3, #1
 8007232:	637a      	str	r2, [r7, #52]	; 0x34
 8007234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007236:	b2d2      	uxtb	r2, r2
 8007238:	701a      	strb	r2, [r3, #0]
 800723a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800723c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	62bb      	str	r3, [r7, #40]	; 0x28
 8007248:	e00b      	b.n	8007262 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800724a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724c:	b2da      	uxtb	r2, r3
 800724e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007250:	1c59      	adds	r1, r3, #1
 8007252:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007254:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007258:	b2d2      	uxtb	r2, r2
 800725a:	701a      	strb	r2, [r3, #0]
 800725c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725e:	09db      	lsrs	r3, r3, #7
 8007260:	62bb      	str	r3, [r7, #40]	; 0x28
 8007262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007264:	2b7f      	cmp	r3, #127	; 0x7f
 8007266:	d8f0      	bhi.n	800724a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800726e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007270:	b2d2      	uxtb	r2, r2
 8007272:	701a      	strb	r2, [r3, #0]
 8007274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007276:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	627b      	str	r3, [r7, #36]	; 0x24
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	623b      	str	r3, [r7, #32]
 8007282:	e00b      	b.n	800729c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	b2da      	uxtb	r2, r3
 8007288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728a:	1c59      	adds	r1, r3, #1
 800728c:	6279      	str	r1, [r7, #36]	; 0x24
 800728e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007292:	b2d2      	uxtb	r2, r2
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	09db      	lsrs	r3, r3, #7
 800729a:	623b      	str	r3, [r7, #32]
 800729c:	6a3b      	ldr	r3, [r7, #32]
 800729e:	2b7f      	cmp	r3, #127	; 0x7f
 80072a0:	d8f0      	bhi.n	8007284 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	1c5a      	adds	r2, r3, #1
 80072a6:	627a      	str	r2, [r7, #36]	; 0x24
 80072a8:	6a3a      	ldr	r2, [r7, #32]
 80072aa:	b2d2      	uxtb	r2, r2
 80072ac:	701a      	strb	r2, [r3, #0]
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	61fb      	str	r3, [r7, #28]
 80072b6:	2300      	movs	r3, #0
 80072b8:	61bb      	str	r3, [r7, #24]
 80072ba:	e00b      	b.n	80072d4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	1c59      	adds	r1, r3, #1
 80072c4:	61f9      	str	r1, [r7, #28]
 80072c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072ca:	b2d2      	uxtb	r2, r2
 80072cc:	701a      	strb	r2, [r3, #0]
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	09db      	lsrs	r3, r3, #7
 80072d2:	61bb      	str	r3, [r7, #24]
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	2b7f      	cmp	r3, #127	; 0x7f
 80072d8:	d8f0      	bhi.n	80072bc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	1c5a      	adds	r2, r3, #1
 80072de:	61fa      	str	r2, [r7, #28]
 80072e0:	69ba      	ldr	r2, [r7, #24]
 80072e2:	b2d2      	uxtb	r2, r2
 80072e4:	701a      	strb	r2, [r3, #0]
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80072ea:	2215      	movs	r2, #21
 80072ec:	68f9      	ldr	r1, [r7, #12]
 80072ee:	6938      	ldr	r0, [r7, #16]
 80072f0:	f7ff fab6 	bl	8006860 <_SendPacket>
  RECORD_END();
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f383 8811 	msr	BASEPRI, r3
}
 80072fa:	bf00      	nop
 80072fc:	3748      	adds	r7, #72	; 0x48
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	200066d4 	.word	0x200066d4
 8007308:	200066a4 	.word	0x200066a4

0800730c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007310:	4b07      	ldr	r3, [pc, #28]	; (8007330 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d008      	beq.n	800732a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007318:	4b05      	ldr	r3, [pc, #20]	; (8007330 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007322:	4b03      	ldr	r3, [pc, #12]	; (8007330 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	4798      	blx	r3
  }
}
 800732a:	bf00      	nop
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	200066a4 	.word	0x200066a4

08007334 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800733c:	f3ef 8311 	mrs	r3, BASEPRI
 8007340:	f04f 0120 	mov.w	r1, #32
 8007344:	f381 8811 	msr	BASEPRI, r1
 8007348:	617b      	str	r3, [r7, #20]
 800734a:	480b      	ldr	r0, [pc, #44]	; (8007378 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800734c:	f7ff f998 	bl	8006680 <_PreparePacket>
 8007350:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007352:	2280      	movs	r2, #128	; 0x80
 8007354:	6879      	ldr	r1, [r7, #4]
 8007356:	6938      	ldr	r0, [r7, #16]
 8007358:	f7ff f942 	bl	80065e0 <_EncodeStr>
 800735c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800735e:	220e      	movs	r2, #14
 8007360:	68f9      	ldr	r1, [r7, #12]
 8007362:	6938      	ldr	r0, [r7, #16]
 8007364:	f7ff fa7c 	bl	8006860 <_SendPacket>
  RECORD_END();
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f383 8811 	msr	BASEPRI, r3
}
 800736e:	bf00      	nop
 8007370:	3718      	adds	r7, #24
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	200066d4 	.word	0x200066d4

0800737c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800737c:	b590      	push	{r4, r7, lr}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007382:	4b15      	ldr	r3, [pc, #84]	; (80073d8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d01a      	beq.n	80073c0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800738a:	4b13      	ldr	r3, [pc, #76]	; (80073d8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d015      	beq.n	80073c0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007394:	4b10      	ldr	r3, [pc, #64]	; (80073d8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4798      	blx	r3
 800739c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80073a0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80073a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073a6:	f04f 0200 	mov.w	r2, #0
 80073aa:	f04f 0300 	mov.w	r3, #0
 80073ae:	000a      	movs	r2, r1
 80073b0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80073b2:	4613      	mov	r3, r2
 80073b4:	461a      	mov	r2, r3
 80073b6:	4621      	mov	r1, r4
 80073b8:	200d      	movs	r0, #13
 80073ba:	f7ff fbe5 	bl	8006b88 <SEGGER_SYSVIEW_RecordU32x2>
 80073be:	e006      	b.n	80073ce <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80073c0:	4b06      	ldr	r3, [pc, #24]	; (80073dc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4619      	mov	r1, r3
 80073c6:	200c      	movs	r0, #12
 80073c8:	f7ff fba2 	bl	8006b10 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80073cc:	bf00      	nop
 80073ce:	bf00      	nop
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd90      	pop	{r4, r7, pc}
 80073d6:	bf00      	nop
 80073d8:	200066a4 	.word	0x200066a4
 80073dc:	e0001004 	.word	0xe0001004

080073e0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80073e6:	f3ef 8311 	mrs	r3, BASEPRI
 80073ea:	f04f 0120 	mov.w	r1, #32
 80073ee:	f381 8811 	msr	BASEPRI, r1
 80073f2:	60fb      	str	r3, [r7, #12]
 80073f4:	4819      	ldr	r0, [pc, #100]	; (800745c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80073f6:	f7ff f943 	bl	8006680 <_PreparePacket>
 80073fa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007400:	4b17      	ldr	r3, [pc, #92]	; (8007460 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007408:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	617b      	str	r3, [r7, #20]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	613b      	str	r3, [r7, #16]
 8007412:	e00b      	b.n	800742c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	b2da      	uxtb	r2, r3
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	1c59      	adds	r1, r3, #1
 800741c:	6179      	str	r1, [r7, #20]
 800741e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007422:	b2d2      	uxtb	r2, r2
 8007424:	701a      	strb	r2, [r3, #0]
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	09db      	lsrs	r3, r3, #7
 800742a:	613b      	str	r3, [r7, #16]
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	2b7f      	cmp	r3, #127	; 0x7f
 8007430:	d8f0      	bhi.n	8007414 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	1c5a      	adds	r2, r3, #1
 8007436:	617a      	str	r2, [r7, #20]
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	701a      	strb	r2, [r3, #0]
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007442:	2202      	movs	r2, #2
 8007444:	6879      	ldr	r1, [r7, #4]
 8007446:	68b8      	ldr	r0, [r7, #8]
 8007448:	f7ff fa0a 	bl	8006860 <_SendPacket>
  RECORD_END();
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f383 8811 	msr	BASEPRI, r3
}
 8007452:	bf00      	nop
 8007454:	3718      	adds	r7, #24
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	200066d4 	.word	0x200066d4
 8007460:	e000ed04 	.word	0xe000ed04

08007464 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800746a:	f3ef 8311 	mrs	r3, BASEPRI
 800746e:	f04f 0120 	mov.w	r1, #32
 8007472:	f381 8811 	msr	BASEPRI, r1
 8007476:	607b      	str	r3, [r7, #4]
 8007478:	4807      	ldr	r0, [pc, #28]	; (8007498 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800747a:	f7ff f901 	bl	8006680 <_PreparePacket>
 800747e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007480:	2203      	movs	r2, #3
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6838      	ldr	r0, [r7, #0]
 8007486:	f7ff f9eb 	bl	8006860 <_SendPacket>
  RECORD_END();
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f383 8811 	msr	BASEPRI, r3
}
 8007490:	bf00      	nop
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	200066d4 	.word	0x200066d4

0800749c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80074a2:	f3ef 8311 	mrs	r3, BASEPRI
 80074a6:	f04f 0120 	mov.w	r1, #32
 80074aa:	f381 8811 	msr	BASEPRI, r1
 80074ae:	607b      	str	r3, [r7, #4]
 80074b0:	4807      	ldr	r0, [pc, #28]	; (80074d0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80074b2:	f7ff f8e5 	bl	8006680 <_PreparePacket>
 80074b6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80074b8:	2212      	movs	r2, #18
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	6838      	ldr	r0, [r7, #0]
 80074be:	f7ff f9cf 	bl	8006860 <_SendPacket>
  RECORD_END();
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f383 8811 	msr	BASEPRI, r3
}
 80074c8:	bf00      	nop
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	200066d4 	.word	0x200066d4

080074d4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80074da:	f3ef 8311 	mrs	r3, BASEPRI
 80074de:	f04f 0120 	mov.w	r1, #32
 80074e2:	f381 8811 	msr	BASEPRI, r1
 80074e6:	607b      	str	r3, [r7, #4]
 80074e8:	4807      	ldr	r0, [pc, #28]	; (8007508 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80074ea:	f7ff f8c9 	bl	8006680 <_PreparePacket>
 80074ee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80074f0:	2211      	movs	r2, #17
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	6838      	ldr	r0, [r7, #0]
 80074f6:	f7ff f9b3 	bl	8006860 <_SendPacket>
  RECORD_END();
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f383 8811 	msr	BASEPRI, r3
}
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	200066d4 	.word	0x200066d4

0800750c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800750c:	b580      	push	{r7, lr}
 800750e:	b088      	sub	sp, #32
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007514:	f3ef 8311 	mrs	r3, BASEPRI
 8007518:	f04f 0120 	mov.w	r1, #32
 800751c:	f381 8811 	msr	BASEPRI, r1
 8007520:	617b      	str	r3, [r7, #20]
 8007522:	4819      	ldr	r0, [pc, #100]	; (8007588 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007524:	f7ff f8ac 	bl	8006680 <_PreparePacket>
 8007528:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800752e:	4b17      	ldr	r3, [pc, #92]	; (800758c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	61fb      	str	r3, [r7, #28]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	61bb      	str	r3, [r7, #24]
 8007540:	e00b      	b.n	800755a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	b2da      	uxtb	r2, r3
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	1c59      	adds	r1, r3, #1
 800754a:	61f9      	str	r1, [r7, #28]
 800754c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007550:	b2d2      	uxtb	r2, r2
 8007552:	701a      	strb	r2, [r3, #0]
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	09db      	lsrs	r3, r3, #7
 8007558:	61bb      	str	r3, [r7, #24]
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	2b7f      	cmp	r3, #127	; 0x7f
 800755e:	d8f0      	bhi.n	8007542 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	61fa      	str	r2, [r7, #28]
 8007566:	69ba      	ldr	r2, [r7, #24]
 8007568:	b2d2      	uxtb	r2, r2
 800756a:	701a      	strb	r2, [r3, #0]
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007570:	2208      	movs	r2, #8
 8007572:	68f9      	ldr	r1, [r7, #12]
 8007574:	6938      	ldr	r0, [r7, #16]
 8007576:	f7ff f973 	bl	8006860 <_SendPacket>
  RECORD_END();
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f383 8811 	msr	BASEPRI, r3
}
 8007580:	bf00      	nop
 8007582:	3720      	adds	r7, #32
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	200066d4 	.word	0x200066d4
 800758c:	200066a4 	.word	0x200066a4

08007590 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007590:	b580      	push	{r7, lr}
 8007592:	b088      	sub	sp, #32
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007598:	f3ef 8311 	mrs	r3, BASEPRI
 800759c:	f04f 0120 	mov.w	r1, #32
 80075a0:	f381 8811 	msr	BASEPRI, r1
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	4819      	ldr	r0, [pc, #100]	; (800760c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80075a8:	f7ff f86a 	bl	8006680 <_PreparePacket>
 80075ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80075b2:	4b17      	ldr	r3, [pc, #92]	; (8007610 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	61fb      	str	r3, [r7, #28]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	61bb      	str	r3, [r7, #24]
 80075c4:	e00b      	b.n	80075de <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	1c59      	adds	r1, r3, #1
 80075ce:	61f9      	str	r1, [r7, #28]
 80075d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075d4:	b2d2      	uxtb	r2, r2
 80075d6:	701a      	strb	r2, [r3, #0]
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	09db      	lsrs	r3, r3, #7
 80075dc:	61bb      	str	r3, [r7, #24]
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	2b7f      	cmp	r3, #127	; 0x7f
 80075e2:	d8f0      	bhi.n	80075c6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	1c5a      	adds	r2, r3, #1
 80075e8:	61fa      	str	r2, [r7, #28]
 80075ea:	69ba      	ldr	r2, [r7, #24]
 80075ec:	b2d2      	uxtb	r2, r2
 80075ee:	701a      	strb	r2, [r3, #0]
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80075f4:	2204      	movs	r2, #4
 80075f6:	68f9      	ldr	r1, [r7, #12]
 80075f8:	6938      	ldr	r0, [r7, #16]
 80075fa:	f7ff f931 	bl	8006860 <_SendPacket>
  RECORD_END();
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	f383 8811 	msr	BASEPRI, r3
}
 8007604:	bf00      	nop
 8007606:	3720      	adds	r7, #32
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	200066d4 	.word	0x200066d4
 8007610:	200066a4 	.word	0x200066a4

08007614 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007614:	b580      	push	{r7, lr}
 8007616:	b088      	sub	sp, #32
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800761c:	f3ef 8311 	mrs	r3, BASEPRI
 8007620:	f04f 0120 	mov.w	r1, #32
 8007624:	f381 8811 	msr	BASEPRI, r1
 8007628:	617b      	str	r3, [r7, #20]
 800762a:	4819      	ldr	r0, [pc, #100]	; (8007690 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800762c:	f7ff f828 	bl	8006680 <_PreparePacket>
 8007630:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007636:	4b17      	ldr	r3, [pc, #92]	; (8007694 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	61fb      	str	r3, [r7, #28]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	61bb      	str	r3, [r7, #24]
 8007648:	e00b      	b.n	8007662 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	b2da      	uxtb	r2, r3
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	1c59      	adds	r1, r3, #1
 8007652:	61f9      	str	r1, [r7, #28]
 8007654:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007658:	b2d2      	uxtb	r2, r2
 800765a:	701a      	strb	r2, [r3, #0]
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	09db      	lsrs	r3, r3, #7
 8007660:	61bb      	str	r3, [r7, #24]
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	2b7f      	cmp	r3, #127	; 0x7f
 8007666:	d8f0      	bhi.n	800764a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	1c5a      	adds	r2, r3, #1
 800766c:	61fa      	str	r2, [r7, #28]
 800766e:	69ba      	ldr	r2, [r7, #24]
 8007670:	b2d2      	uxtb	r2, r2
 8007672:	701a      	strb	r2, [r3, #0]
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007678:	2206      	movs	r2, #6
 800767a:	68f9      	ldr	r1, [r7, #12]
 800767c:	6938      	ldr	r0, [r7, #16]
 800767e:	f7ff f8ef 	bl	8006860 <_SendPacket>
  RECORD_END();
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	f383 8811 	msr	BASEPRI, r3
}
 8007688:	bf00      	nop
 800768a:	3720      	adds	r7, #32
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	200066d4 	.word	0x200066d4
 8007694:	200066a4 	.word	0x200066a4

08007698 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007698:	b580      	push	{r7, lr}
 800769a:	b08a      	sub	sp, #40	; 0x28
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80076a2:	f3ef 8311 	mrs	r3, BASEPRI
 80076a6:	f04f 0120 	mov.w	r1, #32
 80076aa:	f381 8811 	msr	BASEPRI, r1
 80076ae:	617b      	str	r3, [r7, #20]
 80076b0:	4827      	ldr	r0, [pc, #156]	; (8007750 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80076b2:	f7fe ffe5 	bl	8006680 <_PreparePacket>
 80076b6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80076bc:	4b25      	ldr	r3, [pc, #148]	; (8007754 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	627b      	str	r3, [r7, #36]	; 0x24
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	623b      	str	r3, [r7, #32]
 80076ce:	e00b      	b.n	80076e8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d6:	1c59      	adds	r1, r3, #1
 80076d8:	6279      	str	r1, [r7, #36]	; 0x24
 80076da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076de:	b2d2      	uxtb	r2, r2
 80076e0:	701a      	strb	r2, [r3, #0]
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	09db      	lsrs	r3, r3, #7
 80076e6:	623b      	str	r3, [r7, #32]
 80076e8:	6a3b      	ldr	r3, [r7, #32]
 80076ea:	2b7f      	cmp	r3, #127	; 0x7f
 80076ec:	d8f0      	bhi.n	80076d0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	627a      	str	r2, [r7, #36]	; 0x24
 80076f4:	6a3a      	ldr	r2, [r7, #32]
 80076f6:	b2d2      	uxtb	r2, r2
 80076f8:	701a      	strb	r2, [r3, #0]
 80076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	61fb      	str	r3, [r7, #28]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	61bb      	str	r3, [r7, #24]
 8007706:	e00b      	b.n	8007720 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	b2da      	uxtb	r2, r3
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	1c59      	adds	r1, r3, #1
 8007710:	61f9      	str	r1, [r7, #28]
 8007712:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007716:	b2d2      	uxtb	r2, r2
 8007718:	701a      	strb	r2, [r3, #0]
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	09db      	lsrs	r3, r3, #7
 800771e:	61bb      	str	r3, [r7, #24]
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	2b7f      	cmp	r3, #127	; 0x7f
 8007724:	d8f0      	bhi.n	8007708 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	1c5a      	adds	r2, r3, #1
 800772a:	61fa      	str	r2, [r7, #28]
 800772c:	69ba      	ldr	r2, [r7, #24]
 800772e:	b2d2      	uxtb	r2, r2
 8007730:	701a      	strb	r2, [r3, #0]
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007736:	2207      	movs	r2, #7
 8007738:	68f9      	ldr	r1, [r7, #12]
 800773a:	6938      	ldr	r0, [r7, #16]
 800773c:	f7ff f890 	bl	8006860 <_SendPacket>
  RECORD_END();
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f383 8811 	msr	BASEPRI, r3
}
 8007746:	bf00      	nop
 8007748:	3728      	adds	r7, #40	; 0x28
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	200066d4 	.word	0x200066d4
 8007754:	200066a4 	.word	0x200066a4

08007758 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007760:	4b04      	ldr	r3, [pc, #16]	; (8007774 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	1ad3      	subs	r3, r2, r3
}
 8007768:	4618      	mov	r0, r3
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	200066a4 	.word	0x200066a4

08007778 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007778:	b580      	push	{r7, lr}
 800777a:	b08c      	sub	sp, #48	; 0x30
 800777c:	af00      	add	r7, sp, #0
 800777e:	4603      	mov	r3, r0
 8007780:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007782:	4b3b      	ldr	r3, [pc, #236]	; (8007870 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d06d      	beq.n	8007866 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800778a:	4b39      	ldr	r3, [pc, #228]	; (8007870 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007790:	2300      	movs	r3, #0
 8007792:	62bb      	str	r3, [r7, #40]	; 0x28
 8007794:	e008      	b.n	80077a8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800779c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d007      	beq.n	80077b2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80077a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a4:	3301      	adds	r3, #1
 80077a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80077a8:	79fb      	ldrb	r3, [r7, #7]
 80077aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d3f2      	bcc.n	8007796 <SEGGER_SYSVIEW_SendModule+0x1e>
 80077b0:	e000      	b.n	80077b4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80077b2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80077b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d055      	beq.n	8007866 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80077ba:	f3ef 8311 	mrs	r3, BASEPRI
 80077be:	f04f 0120 	mov.w	r1, #32
 80077c2:	f381 8811 	msr	BASEPRI, r1
 80077c6:	617b      	str	r3, [r7, #20]
 80077c8:	482a      	ldr	r0, [pc, #168]	; (8007874 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80077ca:	f7fe ff59 	bl	8006680 <_PreparePacket>
 80077ce:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	627b      	str	r3, [r7, #36]	; 0x24
 80077d8:	79fb      	ldrb	r3, [r7, #7]
 80077da:	623b      	str	r3, [r7, #32]
 80077dc:	e00b      	b.n	80077f6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	1c59      	adds	r1, r3, #1
 80077e6:	6279      	str	r1, [r7, #36]	; 0x24
 80077e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077ec:	b2d2      	uxtb	r2, r2
 80077ee:	701a      	strb	r2, [r3, #0]
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	09db      	lsrs	r3, r3, #7
 80077f4:	623b      	str	r3, [r7, #32]
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	2b7f      	cmp	r3, #127	; 0x7f
 80077fa:	d8f0      	bhi.n	80077de <SEGGER_SYSVIEW_SendModule+0x66>
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	1c5a      	adds	r2, r3, #1
 8007800:	627a      	str	r2, [r7, #36]	; 0x24
 8007802:	6a3a      	ldr	r2, [r7, #32]
 8007804:	b2d2      	uxtb	r2, r2
 8007806:	701a      	strb	r2, [r3, #0]
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	61fb      	str	r3, [r7, #28]
 8007810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	61bb      	str	r3, [r7, #24]
 8007816:	e00b      	b.n	8007830 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	b2da      	uxtb	r2, r3
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	1c59      	adds	r1, r3, #1
 8007820:	61f9      	str	r1, [r7, #28]
 8007822:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007826:	b2d2      	uxtb	r2, r2
 8007828:	701a      	strb	r2, [r3, #0]
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	09db      	lsrs	r3, r3, #7
 800782e:	61bb      	str	r3, [r7, #24]
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	2b7f      	cmp	r3, #127	; 0x7f
 8007834:	d8f0      	bhi.n	8007818 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	1c5a      	adds	r2, r3, #1
 800783a:	61fa      	str	r2, [r7, #28]
 800783c:	69ba      	ldr	r2, [r7, #24]
 800783e:	b2d2      	uxtb	r2, r2
 8007840:	701a      	strb	r2, [r3, #0]
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2280      	movs	r2, #128	; 0x80
 800784c:	4619      	mov	r1, r3
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f7fe fec6 	bl	80065e0 <_EncodeStr>
 8007854:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007856:	2216      	movs	r2, #22
 8007858:	68f9      	ldr	r1, [r7, #12]
 800785a:	6938      	ldr	r0, [r7, #16]
 800785c:	f7ff f800 	bl	8006860 <_SendPacket>
      RECORD_END();
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007866:	bf00      	nop
 8007868:	3730      	adds	r7, #48	; 0x30
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	200066cc 	.word	0x200066cc
 8007874:	200066d4 	.word	0x200066d4

08007878 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800787e:	4b0c      	ldr	r3, [pc, #48]	; (80078b0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00f      	beq.n	80078a6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007886:	4b0a      	ldr	r3, [pc, #40]	; (80078b0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d002      	beq.n	800789a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1f2      	bne.n	800788c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80078a6:	bf00      	nop
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	200066cc 	.word	0x200066cc

080078b4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80078ba:	f3ef 8311 	mrs	r3, BASEPRI
 80078be:	f04f 0120 	mov.w	r1, #32
 80078c2:	f381 8811 	msr	BASEPRI, r1
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	4817      	ldr	r0, [pc, #92]	; (8007928 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80078ca:	f7fe fed9 	bl	8006680 <_PreparePacket>
 80078ce:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	617b      	str	r3, [r7, #20]
 80078d8:	4b14      	ldr	r3, [pc, #80]	; (800792c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	613b      	str	r3, [r7, #16]
 80078de:	e00b      	b.n	80078f8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	1c59      	adds	r1, r3, #1
 80078e8:	6179      	str	r1, [r7, #20]
 80078ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078ee:	b2d2      	uxtb	r2, r2
 80078f0:	701a      	strb	r2, [r3, #0]
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	09db      	lsrs	r3, r3, #7
 80078f6:	613b      	str	r3, [r7, #16]
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	2b7f      	cmp	r3, #127	; 0x7f
 80078fc:	d8f0      	bhi.n	80078e0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	1c5a      	adds	r2, r3, #1
 8007902:	617a      	str	r2, [r7, #20]
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	b2d2      	uxtb	r2, r2
 8007908:	701a      	strb	r2, [r3, #0]
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800790e:	221b      	movs	r2, #27
 8007910:	6879      	ldr	r1, [r7, #4]
 8007912:	68b8      	ldr	r0, [r7, #8]
 8007914:	f7fe ffa4 	bl	8006860 <_SendPacket>
  RECORD_END();
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f383 8811 	msr	BASEPRI, r3
}
 800791e:	bf00      	nop
 8007920:	3718      	adds	r7, #24
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	200066d4 	.word	0x200066d4
 800792c:	200066d0 	.word	0x200066d0

08007930 <SEGGER_SYSVIEW_Print>:
*    Print a string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Print(const char* s) {
 8007930:	b580      	push	{r7, lr}
 8007932:	b08a      	sub	sp, #40	; 0x28
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007938:	f3ef 8311 	mrs	r3, BASEPRI
 800793c:	f04f 0120 	mov.w	r1, #32
 8007940:	f381 8811 	msr	BASEPRI, r1
 8007944:	617b      	str	r3, [r7, #20]
 8007946:	4827      	ldr	r0, [pc, #156]	; (80079e4 <SEGGER_SYSVIEW_Print+0xb4>)
 8007948:	f7fe fe9a 	bl	8006680 <_PreparePacket>
 800794c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800794e:	2280      	movs	r2, #128	; 0x80
 8007950:	6879      	ldr	r1, [r7, #4]
 8007952:	6938      	ldr	r0, [r7, #16]
 8007954:	f7fe fe44 	bl	80065e0 <_EncodeStr>
 8007958:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_LOG);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	627b      	str	r3, [r7, #36]	; 0x24
 800795e:	2300      	movs	r3, #0
 8007960:	623b      	str	r3, [r7, #32]
 8007962:	e00b      	b.n	800797c <SEGGER_SYSVIEW_Print+0x4c>
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	b2da      	uxtb	r2, r3
 8007968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796a:	1c59      	adds	r1, r3, #1
 800796c:	6279      	str	r1, [r7, #36]	; 0x24
 800796e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007972:	b2d2      	uxtb	r2, r2
 8007974:	701a      	strb	r2, [r3, #0]
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	09db      	lsrs	r3, r3, #7
 800797a:	623b      	str	r3, [r7, #32]
 800797c:	6a3b      	ldr	r3, [r7, #32]
 800797e:	2b7f      	cmp	r3, #127	; 0x7f
 8007980:	d8f0      	bhi.n	8007964 <SEGGER_SYSVIEW_Print+0x34>
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	1c5a      	adds	r2, r3, #1
 8007986:	627a      	str	r2, [r7, #36]	; 0x24
 8007988:	6a3a      	ldr	r2, [r7, #32]
 800798a:	b2d2      	uxtb	r2, r2
 800798c:	701a      	strb	r2, [r3, #0]
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007990:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	61fb      	str	r3, [r7, #28]
 8007996:	2300      	movs	r3, #0
 8007998:	61bb      	str	r3, [r7, #24]
 800799a:	e00b      	b.n	80079b4 <SEGGER_SYSVIEW_Print+0x84>
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	1c59      	adds	r1, r3, #1
 80079a4:	61f9      	str	r1, [r7, #28]
 80079a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079aa:	b2d2      	uxtb	r2, r2
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	09db      	lsrs	r3, r3, #7
 80079b2:	61bb      	str	r3, [r7, #24]
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	2b7f      	cmp	r3, #127	; 0x7f
 80079b8:	d8f0      	bhi.n	800799c <SEGGER_SYSVIEW_Print+0x6c>
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	1c5a      	adds	r2, r3, #1
 80079be:	61fa      	str	r2, [r7, #28]
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	701a      	strb	r2, [r3, #0]
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80079ca:	221a      	movs	r2, #26
 80079cc:	68f9      	ldr	r1, [r7, #12]
 80079ce:	6938      	ldr	r0, [r7, #16]
 80079d0:	f7fe ff46 	bl	8006860 <_SendPacket>
  RECORD_END();
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	f383 8811 	msr	BASEPRI, r3
}
 80079da:	bf00      	nop
 80079dc:	3728      	adds	r7, #40	; 0x28
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	200066d4 	.word	0x200066d4

080079e8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b08a      	sub	sp, #40	; 0x28
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80079f0:	f3ef 8311 	mrs	r3, BASEPRI
 80079f4:	f04f 0120 	mov.w	r1, #32
 80079f8:	f381 8811 	msr	BASEPRI, r1
 80079fc:	617b      	str	r3, [r7, #20]
 80079fe:	4827      	ldr	r0, [pc, #156]	; (8007a9c <SEGGER_SYSVIEW_Warn+0xb4>)
 8007a00:	f7fe fe3e 	bl	8006680 <_PreparePacket>
 8007a04:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007a06:	2280      	movs	r2, #128	; 0x80
 8007a08:	6879      	ldr	r1, [r7, #4]
 8007a0a:	6938      	ldr	r0, [r7, #16]
 8007a0c:	f7fe fde8 	bl	80065e0 <_EncodeStr>
 8007a10:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	627b      	str	r3, [r7, #36]	; 0x24
 8007a16:	2301      	movs	r3, #1
 8007a18:	623b      	str	r3, [r7, #32]
 8007a1a:	e00b      	b.n	8007a34 <SEGGER_SYSVIEW_Warn+0x4c>
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	1c59      	adds	r1, r3, #1
 8007a24:	6279      	str	r1, [r7, #36]	; 0x24
 8007a26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a2a:	b2d2      	uxtb	r2, r2
 8007a2c:	701a      	strb	r2, [r3, #0]
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	09db      	lsrs	r3, r3, #7
 8007a32:	623b      	str	r3, [r7, #32]
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	2b7f      	cmp	r3, #127	; 0x7f
 8007a38:	d8f0      	bhi.n	8007a1c <SEGGER_SYSVIEW_Warn+0x34>
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	627a      	str	r2, [r7, #36]	; 0x24
 8007a40:	6a3a      	ldr	r2, [r7, #32]
 8007a42:	b2d2      	uxtb	r2, r2
 8007a44:	701a      	strb	r2, [r3, #0]
 8007a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	61fb      	str	r3, [r7, #28]
 8007a4e:	2300      	movs	r3, #0
 8007a50:	61bb      	str	r3, [r7, #24]
 8007a52:	e00b      	b.n	8007a6c <SEGGER_SYSVIEW_Warn+0x84>
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	1c59      	adds	r1, r3, #1
 8007a5c:	61f9      	str	r1, [r7, #28]
 8007a5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a62:	b2d2      	uxtb	r2, r2
 8007a64:	701a      	strb	r2, [r3, #0]
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	09db      	lsrs	r3, r3, #7
 8007a6a:	61bb      	str	r3, [r7, #24]
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	2b7f      	cmp	r3, #127	; 0x7f
 8007a70:	d8f0      	bhi.n	8007a54 <SEGGER_SYSVIEW_Warn+0x6c>
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	1c5a      	adds	r2, r3, #1
 8007a76:	61fa      	str	r2, [r7, #28]
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	b2d2      	uxtb	r2, r2
 8007a7c:	701a      	strb	r2, [r3, #0]
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007a82:	221a      	movs	r2, #26
 8007a84:	68f9      	ldr	r1, [r7, #12]
 8007a86:	6938      	ldr	r0, [r7, #16]
 8007a88:	f7fe feea 	bl	8006860 <_SendPacket>
  RECORD_END();
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f383 8811 	msr	BASEPRI, r3
}
 8007a92:	bf00      	nop
 8007a94:	3728      	adds	r7, #40	; 0x28
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	200066d4 	.word	0x200066d4

08007aa0 <USART2_addToQueue>:
/* Internal variables includes -----------------------------------------------*/
USART_message_t *USART2_msg2Queue;
int poolCount = 0;

/* Functions implementation --------------------------------------------------*/
int USART2_addToQueue(char *msg){
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
	//Add to queue
	USART2_msg2Queue = (USART_message_t*) osPoolAlloc(mPoolUSART2Handle);
 8007aa8:	4b0d      	ldr	r3, [pc, #52]	; (8007ae0 <USART2_addToQueue+0x40>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7fb fba2 	bl	80031f6 <osPoolAlloc>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	4a0b      	ldr	r2, [pc, #44]	; (8007ae4 <USART2_addToQueue+0x44>)
 8007ab6:	6013      	str	r3, [r2, #0]

	strcpy(USART2_msg2Queue->message, msg);
 8007ab8:	4b0a      	ldr	r3, [pc, #40]	; (8007ae4 <USART2_addToQueue+0x44>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6879      	ldr	r1, [r7, #4]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 f94e 	bl	8007d60 <strcpy>
	osMessagePut(queueUSART2Handle, (uint32_t) USART2_msg2Queue, 0);
 8007ac4:	4b08      	ldr	r3, [pc, #32]	; (8007ae8 <USART2_addToQueue+0x48>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a06      	ldr	r2, [pc, #24]	; (8007ae4 <USART2_addToQueue+0x44>)
 8007aca:	6812      	ldr	r2, [r2, #0]
 8007acc:	4611      	mov	r1, r2
 8007ace:	2200      	movs	r2, #0
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fb fc5b 	bl	800338c <osMessagePut>

	return 0;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	20000090 	.word	0x20000090
 8007ae4:	200067b8 	.word	0x200067b8
 8007ae8:	2000009c 	.word	0x2000009c

08007aec <USART2_consumeFromQueue>:

int USART2_consumeFromQueue(){
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
	//Check if USART is not busy before attempt to consume from queue
	if(huart2.gState != HAL_UART_STATE_BUSY_TX && huart2.gState != HAL_UART_STATE_BUSY_TX_RX ){
 8007af2:	4b17      	ldr	r3, [pc, #92]	; (8007b50 <USART2_consumeFromQueue+0x64>)
 8007af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b21      	cmp	r3, #33	; 0x21
 8007afc:	d022      	beq.n	8007b44 <USART2_consumeFromQueue+0x58>
 8007afe:	4b14      	ldr	r3, [pc, #80]	; (8007b50 <USART2_consumeFromQueue+0x64>)
 8007b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b23      	cmp	r3, #35	; 0x23
 8007b08:	d01c      	beq.n	8007b44 <USART2_consumeFromQueue+0x58>
		//Check queue and consume if available
		osEvent evt = osMessageGet(queueUSART2Handle, osWaitForever);
 8007b0a:	4b12      	ldr	r3, [pc, #72]	; (8007b54 <USART2_consumeFromQueue+0x68>)
 8007b0c:	6819      	ldr	r1, [r3, #0]
 8007b0e:	463b      	mov	r3, r7
 8007b10:	f04f 32ff 	mov.w	r2, #4294967295
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7fb fc85 	bl	8003424 <osMessageGet>

		//If there's data to consume, proceed
		if (evt.status == osEventMessage)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2b10      	cmp	r3, #16
 8007b1e:	d111      	bne.n	8007b44 <USART2_consumeFromQueue+0x58>
		{
			USART_message_t *msgFromQueue = (USART_message_t*) evt.value.p;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	60fb      	str	r3, [r7, #12]
			osPoolFree(mPoolUSART2Handle, msgFromQueue);
 8007b24:	4b0c      	ldr	r3, [pc, #48]	; (8007b58 <USART2_consumeFromQueue+0x6c>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68f9      	ldr	r1, [r7, #12]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fb fbc5 	bl	80032ba <osPoolFree>

			// Transmit prepared message to USART2
			#if(UART_USE_IT == 0)	//Blocking mode (no interruption)
				HAL_UART_Transmit( &huart2,	(uint8_t*) msgFromQueue, strlen((char*)msgFromQueue), 5000);
			#else 					//Non-blocking mode (Interuption)
				HAL_UART_Transmit_IT(&huart2,(uint8_t*) msgFromQueue, strlen((char*)msgFromQueue));
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f7f8 fb97 	bl	8000264 <strlen>
 8007b36:	4603      	mov	r3, r0
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	68f9      	ldr	r1, [r7, #12]
 8007b3e:	4804      	ldr	r0, [pc, #16]	; (8007b50 <USART2_consumeFromQueue+0x64>)
 8007b40:	f7fa fb59 	bl	80021f6 <HAL_UART_Transmit_IT>
			#endif
		}
	}

	return 0;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	200003a4 	.word	0x200003a4
 8007b54:	2000009c 	.word	0x2000009c
 8007b58:	20000090 	.word	0x20000090

08007b5c <__libc_init_array>:
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	4d0d      	ldr	r5, [pc, #52]	; (8007b94 <__libc_init_array+0x38>)
 8007b60:	4c0d      	ldr	r4, [pc, #52]	; (8007b98 <__libc_init_array+0x3c>)
 8007b62:	1b64      	subs	r4, r4, r5
 8007b64:	10a4      	asrs	r4, r4, #2
 8007b66:	2600      	movs	r6, #0
 8007b68:	42a6      	cmp	r6, r4
 8007b6a:	d109      	bne.n	8007b80 <__libc_init_array+0x24>
 8007b6c:	4d0b      	ldr	r5, [pc, #44]	; (8007b9c <__libc_init_array+0x40>)
 8007b6e:	4c0c      	ldr	r4, [pc, #48]	; (8007ba0 <__libc_init_array+0x44>)
 8007b70:	f000 f90a 	bl	8007d88 <_init>
 8007b74:	1b64      	subs	r4, r4, r5
 8007b76:	10a4      	asrs	r4, r4, #2
 8007b78:	2600      	movs	r6, #0
 8007b7a:	42a6      	cmp	r6, r4
 8007b7c:	d105      	bne.n	8007b8a <__libc_init_array+0x2e>
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}
 8007b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b84:	4798      	blx	r3
 8007b86:	3601      	adds	r6, #1
 8007b88:	e7ee      	b.n	8007b68 <__libc_init_array+0xc>
 8007b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b8e:	4798      	blx	r3
 8007b90:	3601      	adds	r6, #1
 8007b92:	e7f2      	b.n	8007b7a <__libc_init_array+0x1e>
 8007b94:	08007f8c 	.word	0x08007f8c
 8007b98:	08007f8c 	.word	0x08007f8c
 8007b9c:	08007f8c 	.word	0x08007f8c
 8007ba0:	08007f90 	.word	0x08007f90

08007ba4 <__retarget_lock_acquire_recursive>:
 8007ba4:	4770      	bx	lr

08007ba6 <__retarget_lock_release_recursive>:
 8007ba6:	4770      	bx	lr

08007ba8 <memcmp>:
 8007ba8:	b510      	push	{r4, lr}
 8007baa:	3901      	subs	r1, #1
 8007bac:	4402      	add	r2, r0
 8007bae:	4290      	cmp	r0, r2
 8007bb0:	d101      	bne.n	8007bb6 <memcmp+0xe>
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	e005      	b.n	8007bc2 <memcmp+0x1a>
 8007bb6:	7803      	ldrb	r3, [r0, #0]
 8007bb8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007bbc:	42a3      	cmp	r3, r4
 8007bbe:	d001      	beq.n	8007bc4 <memcmp+0x1c>
 8007bc0:	1b18      	subs	r0, r3, r4
 8007bc2:	bd10      	pop	{r4, pc}
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	e7f2      	b.n	8007bae <memcmp+0x6>

08007bc8 <memcpy>:
 8007bc8:	440a      	add	r2, r1
 8007bca:	4291      	cmp	r1, r2
 8007bcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bd0:	d100      	bne.n	8007bd4 <memcpy+0xc>
 8007bd2:	4770      	bx	lr
 8007bd4:	b510      	push	{r4, lr}
 8007bd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bde:	4291      	cmp	r1, r2
 8007be0:	d1f9      	bne.n	8007bd6 <memcpy+0xe>
 8007be2:	bd10      	pop	{r4, pc}

08007be4 <memset>:
 8007be4:	4402      	add	r2, r0
 8007be6:	4603      	mov	r3, r0
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d100      	bne.n	8007bee <memset+0xa>
 8007bec:	4770      	bx	lr
 8007bee:	f803 1b01 	strb.w	r1, [r3], #1
 8007bf2:	e7f9      	b.n	8007be8 <memset+0x4>

08007bf4 <_free_r>:
 8007bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bf6:	2900      	cmp	r1, #0
 8007bf8:	d044      	beq.n	8007c84 <_free_r+0x90>
 8007bfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bfe:	9001      	str	r0, [sp, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f1a1 0404 	sub.w	r4, r1, #4
 8007c06:	bfb8      	it	lt
 8007c08:	18e4      	addlt	r4, r4, r3
 8007c0a:	f000 f8b1 	bl	8007d70 <__malloc_lock>
 8007c0e:	4a1e      	ldr	r2, [pc, #120]	; (8007c88 <_free_r+0x94>)
 8007c10:	9801      	ldr	r0, [sp, #4]
 8007c12:	6813      	ldr	r3, [r2, #0]
 8007c14:	b933      	cbnz	r3, 8007c24 <_free_r+0x30>
 8007c16:	6063      	str	r3, [r4, #4]
 8007c18:	6014      	str	r4, [r2, #0]
 8007c1a:	b003      	add	sp, #12
 8007c1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c20:	f000 b8ac 	b.w	8007d7c <__malloc_unlock>
 8007c24:	42a3      	cmp	r3, r4
 8007c26:	d908      	bls.n	8007c3a <_free_r+0x46>
 8007c28:	6825      	ldr	r5, [r4, #0]
 8007c2a:	1961      	adds	r1, r4, r5
 8007c2c:	428b      	cmp	r3, r1
 8007c2e:	bf01      	itttt	eq
 8007c30:	6819      	ldreq	r1, [r3, #0]
 8007c32:	685b      	ldreq	r3, [r3, #4]
 8007c34:	1949      	addeq	r1, r1, r5
 8007c36:	6021      	streq	r1, [r4, #0]
 8007c38:	e7ed      	b.n	8007c16 <_free_r+0x22>
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	b10b      	cbz	r3, 8007c44 <_free_r+0x50>
 8007c40:	42a3      	cmp	r3, r4
 8007c42:	d9fa      	bls.n	8007c3a <_free_r+0x46>
 8007c44:	6811      	ldr	r1, [r2, #0]
 8007c46:	1855      	adds	r5, r2, r1
 8007c48:	42a5      	cmp	r5, r4
 8007c4a:	d10b      	bne.n	8007c64 <_free_r+0x70>
 8007c4c:	6824      	ldr	r4, [r4, #0]
 8007c4e:	4421      	add	r1, r4
 8007c50:	1854      	adds	r4, r2, r1
 8007c52:	42a3      	cmp	r3, r4
 8007c54:	6011      	str	r1, [r2, #0]
 8007c56:	d1e0      	bne.n	8007c1a <_free_r+0x26>
 8007c58:	681c      	ldr	r4, [r3, #0]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	6053      	str	r3, [r2, #4]
 8007c5e:	4421      	add	r1, r4
 8007c60:	6011      	str	r1, [r2, #0]
 8007c62:	e7da      	b.n	8007c1a <_free_r+0x26>
 8007c64:	d902      	bls.n	8007c6c <_free_r+0x78>
 8007c66:	230c      	movs	r3, #12
 8007c68:	6003      	str	r3, [r0, #0]
 8007c6a:	e7d6      	b.n	8007c1a <_free_r+0x26>
 8007c6c:	6825      	ldr	r5, [r4, #0]
 8007c6e:	1961      	adds	r1, r4, r5
 8007c70:	428b      	cmp	r3, r1
 8007c72:	bf04      	itt	eq
 8007c74:	6819      	ldreq	r1, [r3, #0]
 8007c76:	685b      	ldreq	r3, [r3, #4]
 8007c78:	6063      	str	r3, [r4, #4]
 8007c7a:	bf04      	itt	eq
 8007c7c:	1949      	addeq	r1, r1, r5
 8007c7e:	6021      	streq	r1, [r4, #0]
 8007c80:	6054      	str	r4, [r2, #4]
 8007c82:	e7ca      	b.n	8007c1a <_free_r+0x26>
 8007c84:	b003      	add	sp, #12
 8007c86:	bd30      	pop	{r4, r5, pc}
 8007c88:	200067c0 	.word	0x200067c0

08007c8c <cleanup_glue>:
 8007c8c:	b538      	push	{r3, r4, r5, lr}
 8007c8e:	460c      	mov	r4, r1
 8007c90:	6809      	ldr	r1, [r1, #0]
 8007c92:	4605      	mov	r5, r0
 8007c94:	b109      	cbz	r1, 8007c9a <cleanup_glue+0xe>
 8007c96:	f7ff fff9 	bl	8007c8c <cleanup_glue>
 8007c9a:	4621      	mov	r1, r4
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ca2:	f7ff bfa7 	b.w	8007bf4 <_free_r>
	...

08007ca8 <_reclaim_reent>:
 8007ca8:	4b2c      	ldr	r3, [pc, #176]	; (8007d5c <_reclaim_reent+0xb4>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4283      	cmp	r3, r0
 8007cae:	b570      	push	{r4, r5, r6, lr}
 8007cb0:	4604      	mov	r4, r0
 8007cb2:	d051      	beq.n	8007d58 <_reclaim_reent+0xb0>
 8007cb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007cb6:	b143      	cbz	r3, 8007cca <_reclaim_reent+0x22>
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d14a      	bne.n	8007d54 <_reclaim_reent+0xac>
 8007cbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cc0:	6819      	ldr	r1, [r3, #0]
 8007cc2:	b111      	cbz	r1, 8007cca <_reclaim_reent+0x22>
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	f7ff ff95 	bl	8007bf4 <_free_r>
 8007cca:	6961      	ldr	r1, [r4, #20]
 8007ccc:	b111      	cbz	r1, 8007cd4 <_reclaim_reent+0x2c>
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f7ff ff90 	bl	8007bf4 <_free_r>
 8007cd4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007cd6:	b111      	cbz	r1, 8007cde <_reclaim_reent+0x36>
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f7ff ff8b 	bl	8007bf4 <_free_r>
 8007cde:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007ce0:	b111      	cbz	r1, 8007ce8 <_reclaim_reent+0x40>
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f7ff ff86 	bl	8007bf4 <_free_r>
 8007ce8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007cea:	b111      	cbz	r1, 8007cf2 <_reclaim_reent+0x4a>
 8007cec:	4620      	mov	r0, r4
 8007cee:	f7ff ff81 	bl	8007bf4 <_free_r>
 8007cf2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007cf4:	b111      	cbz	r1, 8007cfc <_reclaim_reent+0x54>
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	f7ff ff7c 	bl	8007bf4 <_free_r>
 8007cfc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007cfe:	b111      	cbz	r1, 8007d06 <_reclaim_reent+0x5e>
 8007d00:	4620      	mov	r0, r4
 8007d02:	f7ff ff77 	bl	8007bf4 <_free_r>
 8007d06:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007d08:	b111      	cbz	r1, 8007d10 <_reclaim_reent+0x68>
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	f7ff ff72 	bl	8007bf4 <_free_r>
 8007d10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d12:	b111      	cbz	r1, 8007d1a <_reclaim_reent+0x72>
 8007d14:	4620      	mov	r0, r4
 8007d16:	f7ff ff6d 	bl	8007bf4 <_free_r>
 8007d1a:	69a3      	ldr	r3, [r4, #24]
 8007d1c:	b1e3      	cbz	r3, 8007d58 <_reclaim_reent+0xb0>
 8007d1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007d20:	4620      	mov	r0, r4
 8007d22:	4798      	blx	r3
 8007d24:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007d26:	b1b9      	cbz	r1, 8007d58 <_reclaim_reent+0xb0>
 8007d28:	4620      	mov	r0, r4
 8007d2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d2e:	f7ff bfad 	b.w	8007c8c <cleanup_glue>
 8007d32:	5949      	ldr	r1, [r1, r5]
 8007d34:	b941      	cbnz	r1, 8007d48 <_reclaim_reent+0xa0>
 8007d36:	3504      	adds	r5, #4
 8007d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d3a:	2d80      	cmp	r5, #128	; 0x80
 8007d3c:	68d9      	ldr	r1, [r3, #12]
 8007d3e:	d1f8      	bne.n	8007d32 <_reclaim_reent+0x8a>
 8007d40:	4620      	mov	r0, r4
 8007d42:	f7ff ff57 	bl	8007bf4 <_free_r>
 8007d46:	e7ba      	b.n	8007cbe <_reclaim_reent+0x16>
 8007d48:	680e      	ldr	r6, [r1, #0]
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	f7ff ff52 	bl	8007bf4 <_free_r>
 8007d50:	4631      	mov	r1, r6
 8007d52:	e7ef      	b.n	8007d34 <_reclaim_reent+0x8c>
 8007d54:	2500      	movs	r5, #0
 8007d56:	e7ef      	b.n	8007d38 <_reclaim_reent+0x90>
 8007d58:	bd70      	pop	{r4, r5, r6, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20000010 	.word	0x20000010

08007d60 <strcpy>:
 8007d60:	4603      	mov	r3, r0
 8007d62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d66:	f803 2b01 	strb.w	r2, [r3], #1
 8007d6a:	2a00      	cmp	r2, #0
 8007d6c:	d1f9      	bne.n	8007d62 <strcpy+0x2>
 8007d6e:	4770      	bx	lr

08007d70 <__malloc_lock>:
 8007d70:	4801      	ldr	r0, [pc, #4]	; (8007d78 <__malloc_lock+0x8>)
 8007d72:	f7ff bf17 	b.w	8007ba4 <__retarget_lock_acquire_recursive>
 8007d76:	bf00      	nop
 8007d78:	200067bc 	.word	0x200067bc

08007d7c <__malloc_unlock>:
 8007d7c:	4801      	ldr	r0, [pc, #4]	; (8007d84 <__malloc_unlock+0x8>)
 8007d7e:	f7ff bf12 	b.w	8007ba6 <__retarget_lock_release_recursive>
 8007d82:	bf00      	nop
 8007d84:	200067bc 	.word	0x200067bc

08007d88 <_init>:
 8007d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8a:	bf00      	nop
 8007d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d8e:	bc08      	pop	{r3}
 8007d90:	469e      	mov	lr, r3
 8007d92:	4770      	bx	lr

08007d94 <_fini>:
 8007d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d96:	bf00      	nop
 8007d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9a:	bc08      	pop	{r3}
 8007d9c:	469e      	mov	lr, r3
 8007d9e:	4770      	bx	lr
