
STM32_SnakeGameNokia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002218  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080023a0  080023a0  000123a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023f0  080023f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080023f0  080023f0  000123f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080023f8  080023f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023f8  080023f8  000123f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023fc  080023fc  000123fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000007c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007a31  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001520  00000000  00000000  00027ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000660  00000000  00000000  00028ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005c8  00000000  00000000  00029658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020546  00000000  00000000  00029c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009465  00000000  00000000  0004a166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1b8d  00000000  00000000  000535cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00115158  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b28  00000000  00000000  001151a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002388 	.word	0x08002388

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08002388 	.word	0x08002388

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	f107 030c 	add.w	r3, r7, #12
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	4b19      	ldr	r3, [pc, #100]	; (800055c <MX_GPIO_Init+0x80>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a18      	ldr	r2, [pc, #96]	; (800055c <MX_GPIO_Init+0x80>)
 80004fc:	f043 0320 	orr.w	r3, r3, #32
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b16      	ldr	r3, [pc, #88]	; (800055c <MX_GPIO_Init+0x80>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0320 	and.w	r3, r3, #32
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	4b12      	ldr	r3, [pc, #72]	; (800055c <MX_GPIO_Init+0x80>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a11      	ldr	r2, [pc, #68]	; (800055c <MX_GPIO_Init+0x80>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <MX_GPIO_Init+0x80>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800052a:	2201      	movs	r2, #1
 800052c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000530:	480b      	ldr	r0, [pc, #44]	; (8000560 <MX_GPIO_Init+0x84>)
 8000532:	f000 fd27 	bl	8000f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800053a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053c:	2301      	movs	r3, #1
 800053e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000540:	2301      	movs	r3, #1
 8000542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	4619      	mov	r1, r3
 800054e:	4804      	ldr	r0, [pc, #16]	; (8000560 <MX_GPIO_Init+0x84>)
 8000550:	f000 fb7c 	bl	8000c4c <HAL_GPIO_Init>

}
 8000554:	bf00      	nop
 8000556:	3720      	adds	r7, #32
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40023800 	.word	0x40023800
 8000560:	40021400 	.word	0x40021400

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fa17 	bl	800099c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f847 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f7ff ffb3 	bl	80004dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000576:	f000 f941 	bl	80007fc <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  char *testStr;
  testStr = malloc(sizeof(char)*16);
 800057a:	2010      	movs	r0, #16
 800057c:	f001 fd94 	bl	80020a8 <malloc>
 8000580:	4603      	mov	r3, r0
 8000582:	60fb      	str	r3, [r7, #12]
  strcpy(testStr,"TestStr ");
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	491b      	ldr	r1, [pc, #108]	; (80005f4 <main+0x90>)
 8000588:	461a      	mov	r2, r3
 800058a:	460b      	mov	r3, r1
 800058c:	cb03      	ldmia	r3!, {r0, r1}
 800058e:	6010      	str	r0, [r2, #0]
 8000590:	6051      	str	r1, [r2, #4]
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	7213      	strb	r3, [r2, #8]

  char *testStrCat;
  testStrCat = malloc(sizeof(char)*32);
 8000596:	2020      	movs	r0, #32
 8000598:	f001 fd86 	bl	80020a8 <malloc>
 800059c:	4603      	mov	r3, r0
 800059e:	60bb      	str	r3, [r7, #8]

  char *numberStr;
  numberStr = malloc(sizeof(char)*32);
 80005a0:	2020      	movs	r0, #32
 80005a2:	f001 fd81 	bl	80020a8 <malloc>
 80005a6:	4603      	mov	r3, r0
 80005a8:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Print Message + Counter
	  itoa(ledCounter,numberStr,10);
 80005aa:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <main+0x94>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	220a      	movs	r2, #10
 80005b0:	6879      	ldr	r1, [r7, #4]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 fd76 	bl	80020a4 <itoa>
	  strcpy(testStrCat,testStr);
 80005b8:	68f9      	ldr	r1, [r7, #12]
 80005ba:	68b8      	ldr	r0, [r7, #8]
 80005bc:	f001 fe8b 	bl	80022d6 <strcpy>
	  strcat(testStrCat, numberStr);
 80005c0:	6879      	ldr	r1, [r7, #4]
 80005c2:	68b8      	ldr	r0, [r7, #8]
 80005c4:	f001 fe78 	bl	80022b8 <strcat>
	  USART2_printMsg( testStrCat );
 80005c8:	68b8      	ldr	r0, [r7, #8]
 80005ca:	f000 f989 	bl	80008e0 <USART2_printMsg>

	  //Toggle LED
	  if(ledCounter > 1000){
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <main+0x94>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005d6:	dd07      	ble.n	80005e8 <main+0x84>
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80005d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005dc:	4807      	ldr	r0, [pc, #28]	; (80005fc <main+0x98>)
 80005de:	f000 fcea 	bl	8000fb6 <HAL_GPIO_TogglePin>
		  ledCounter=0;
 80005e2:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <main+0x94>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
	  }
	  ledCounter++;
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <main+0x94>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a02      	ldr	r2, [pc, #8]	; (80005f8 <main+0x94>)
 80005f0:	6013      	str	r3, [r2, #0]
	  itoa(ledCounter,numberStr,10);
 80005f2:	e7da      	b.n	80005aa <main+0x46>
 80005f4:	080023a0 	.word	0x080023a0
 80005f8:	2000008c 	.word	0x2000008c
 80005fc:	40021400 	.word	0x40021400

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f001 fd5a 	bl	80020c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <SystemClock_Config+0xb4>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a21      	ldr	r2, [pc, #132]	; (80006b4 <SystemClock_Config+0xb4>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <SystemClock_Config+0xb4>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <SystemClock_Config+0xb8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a1b      	ldr	r2, [pc, #108]	; (80006b8 <SystemClock_Config+0xb8>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <SystemClock_Config+0xb8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2310      	movs	r3, #16
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000668:	2300      	movs	r3, #0
 800066a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fcbb 	bl	8000fec <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800067c:	f000 f81e 	bl	80006bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f000 ff1e 	bl	80014dc <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006a6:	f000 f809 	bl	80006bc <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
}
 80006c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <Error_Handler+0x8>
	...

080006c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <HAL_MspInit+0x4c>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <HAL_MspInit+0x4c>)
 80006d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006dc:	6453      	str	r3, [r2, #68]	; 0x44
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <HAL_MspInit+0x4c>)
 80006e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <HAL_MspInit+0x4c>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	4a08      	ldr	r2, [pc, #32]	; (8000714 <HAL_MspInit+0x4c>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f8:	6413      	str	r3, [r2, #64]	; 0x40
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_MspInit+0x4c>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800071c:	e7fe      	b.n	800071c <NMI_Handler+0x4>

0800071e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <HardFault_Handler+0x4>

08000724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <MemManage_Handler+0x4>

0800072a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <BusFault_Handler+0x4>

08000730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <UsageFault_Handler+0x4>

08000736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000764:	f000 f96c 	bl	8000a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000774:	4a14      	ldr	r2, [pc, #80]	; (80007c8 <_sbrk+0x5c>)
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <_sbrk+0x60>)
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <_sbrk+0x64>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d102      	bne.n	800078e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <_sbrk+0x64>)
 800078a:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <_sbrk+0x68>)
 800078c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <_sbrk+0x64>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	693a      	ldr	r2, [r7, #16]
 8000798:	429a      	cmp	r2, r3
 800079a:	d207      	bcs.n	80007ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800079c:	f001 fc40 	bl	8002020 <__errno>
 80007a0:	4603      	mov	r3, r0
 80007a2:	220c      	movs	r2, #12
 80007a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	e009      	b.n	80007c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <_sbrk+0x64>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007b2:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <_sbrk+0x64>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <_sbrk+0x64>)
 80007bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007be:	68fb      	ldr	r3, [r7, #12]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20020000 	.word	0x20020000
 80007cc:	00000400 	.word	0x00000400
 80007d0:	20000090 	.word	0x20000090
 80007d4:	200000f0 	.word	0x200000f0

080007d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <SystemInit+0x20>)
 80007de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007e2:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <SystemInit+0x20>)
 80007e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000802:	4a12      	ldr	r2, [pc, #72]	; (800084c <MX_USART2_UART_Init+0x50>)
 8000804:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000808:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800080c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 800082e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000832:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000836:	f001 f831 	bl	800189c <HAL_UART_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000840:	f7ff ff3c 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000094 	.word	0x20000094
 800084c:	40004400 	.word	0x40004400

08000850 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <HAL_UART_MspInit+0x84>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d12b      	bne.n	80008ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <HAL_UART_MspInit+0x88>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <HAL_UART_MspInit+0x88>)
 800087c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000880:	6413      	str	r3, [r2, #64]	; 0x40
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <HAL_UART_MspInit+0x88>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <HAL_UART_MspInit+0x88>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a10      	ldr	r2, [pc, #64]	; (80008d8 <HAL_UART_MspInit+0x88>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <HAL_UART_MspInit+0x88>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008aa:	230c      	movs	r3, #12
 80008ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ba:	2307      	movs	r3, #7
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <HAL_UART_MspInit+0x8c>)
 80008c6:	f000 f9c1 	bl	8000c4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80008ca:	bf00      	nop
 80008cc:	3728      	adds	r7, #40	; 0x28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40004400 	.word	0x40004400
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020000 	.word	0x40020000

080008e0 <USART2_printMsg>:
}

/* USER CODE BEGIN 1 */

void USART2_printMsg(char *msg)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	//Allocate memory for string preparation
	char *preparedStr = malloc(sizeof(char)* (strlen(msg) + 32));
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff fc6d 	bl	80001c8 <strlen>
 80008ee:	4603      	mov	r3, r0
 80008f0:	3320      	adds	r3, #32
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 fbd8 	bl	80020a8 <malloc>
 80008f8:	4603      	mov	r3, r0
 80008fa:	60fb      	str	r3, [r7, #12]

	//Prepare a string with a line break + carriage return
	strcpy(preparedStr, msg);
 80008fc:	6879      	ldr	r1, [r7, #4]
 80008fe:	68f8      	ldr	r0, [r7, #12]
 8000900:	f001 fce9 	bl	80022d6 <strcpy>
	strcat(preparedStr, "\n\r");
 8000904:	68f8      	ldr	r0, [r7, #12]
 8000906:	f7ff fc5f 	bl	80001c8 <strlen>
 800090a:	4603      	mov	r3, r0
 800090c:	461a      	mov	r2, r3
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	4413      	add	r3, r2
 8000912:	4a0b      	ldr	r2, [pc, #44]	; (8000940 <USART2_printMsg+0x60>)
 8000914:	8811      	ldrh	r1, [r2, #0]
 8000916:	7892      	ldrb	r2, [r2, #2]
 8000918:	8019      	strh	r1, [r3, #0]
 800091a:	709a      	strb	r2, [r3, #2]

	// Transmit prepared message to USART2
	HAL_UART_Transmit(&huart2, preparedStr, strlen(preparedStr), 5000);
 800091c:	68f8      	ldr	r0, [r7, #12]
 800091e:	f7ff fc53 	bl	80001c8 <strlen>
 8000922:	4603      	mov	r3, r0
 8000924:	b29a      	uxth	r2, r3
 8000926:	f241 3388 	movw	r3, #5000	; 0x1388
 800092a:	68f9      	ldr	r1, [r7, #12]
 800092c:	4805      	ldr	r0, [pc, #20]	; (8000944 <USART2_printMsg+0x64>)
 800092e:	f001 f802 	bl	8001936 <HAL_UART_Transmit>

	//Free allocated memory
	free(preparedStr);
 8000932:	68f8      	ldr	r0, [r7, #12]
 8000934:	f001 fbc0 	bl	80020b8 <free>
}
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	080023ac 	.word	0x080023ac
 8000944:	20000094 	.word	0x20000094

08000948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000980 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800094e:	490e      	ldr	r1, [pc, #56]	; (8000988 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000950:	4a0e      	ldr	r2, [pc, #56]	; (800098c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000964:	4c0b      	ldr	r4, [pc, #44]	; (8000994 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000972:	f7ff ff31 	bl	80007d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000976:	f001 fb59 	bl	800202c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097a:	f7ff fdf3 	bl	8000564 <main>
  bx  lr    
 800097e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000980:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000988:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800098c:	08002400 	.word	0x08002400
  ldr r2, =_sbss
 8000990:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000994:	200000ec 	.word	0x200000ec

08000998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000998:	e7fe      	b.n	8000998 <ADC_IRQHandler>
	...

0800099c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_Init+0x40>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <HAL_Init+0x40>)
 80009a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_Init+0x40>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <HAL_Init+0x40>)
 80009b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_Init+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a07      	ldr	r2, [pc, #28]	; (80009dc <HAL_Init+0x40>)
 80009be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c4:	2003      	movs	r0, #3
 80009c6:	f000 f90d 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ca:	200f      	movs	r0, #15
 80009cc:	f000 f808 	bl	80009e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d0:	f7ff fe7a 	bl	80006c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023c00 	.word	0x40023c00

080009e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_InitTick+0x54>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_InitTick+0x58>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 f917 	bl	8000c32 <HAL_SYSTICK_Config>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e00e      	b.n	8000a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b0f      	cmp	r3, #15
 8000a12:	d80a      	bhi.n	8000a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a14:	2200      	movs	r2, #0
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	f04f 30ff 	mov.w	r0, #4294967295
 8000a1c:	f000 f8ed 	bl	8000bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a20:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <HAL_InitTick+0x5c>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a26:	2300      	movs	r3, #0
 8000a28:	e000      	b.n	8000a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	20000004 	.word	0x20000004

08000a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_IncTick+0x20>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_IncTick+0x24>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4413      	add	r3, r2
 8000a50:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <HAL_IncTick+0x24>)
 8000a52:	6013      	str	r3, [r2, #0]
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000008 	.word	0x20000008
 8000a64:	200000d8 	.word	0x200000d8

08000a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <HAL_GetTick+0x14>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	200000d8 	.word	0x200000d8

08000a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab2:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	60d3      	str	r3, [r2, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	f003 0307 	and.w	r3, r3, #7
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db0a      	blt.n	8000b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	490c      	ldr	r1, [pc, #48]	; (8000b30 <__NVIC_SetPriority+0x4c>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	0112      	lsls	r2, r2, #4
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	440b      	add	r3, r1
 8000b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b0c:	e00a      	b.n	8000b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4908      	ldr	r1, [pc, #32]	; (8000b34 <__NVIC_SetPriority+0x50>)
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	f003 030f 	and.w	r3, r3, #15
 8000b1a:	3b04      	subs	r3, #4
 8000b1c:	0112      	lsls	r2, r2, #4
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	440b      	add	r3, r1
 8000b22:	761a      	strb	r2, [r3, #24]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000e100 	.word	0xe000e100
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b089      	sub	sp, #36	; 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f1c3 0307 	rsb	r3, r3, #7
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	bf28      	it	cs
 8000b56:	2304      	movcs	r3, #4
 8000b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d902      	bls.n	8000b68 <NVIC_EncodePriority+0x30>
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3b03      	subs	r3, #3
 8000b66:	e000      	b.n	8000b6a <NVIC_EncodePriority+0x32>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43da      	mvns	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	43d9      	mvns	r1, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	4313      	orrs	r3, r2
         );
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3724      	adds	r7, #36	; 0x24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb0:	d301      	bcc.n	8000bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00f      	b.n	8000bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <SysTick_Config+0x40>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f7ff ff8e 	bl	8000ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <SysTick_Config+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <SysTick_Config+0x40>)
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff47 	bl	8000a80 <__NVIC_SetPriorityGrouping>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0c:	f7ff ff5c 	bl	8000ac8 <__NVIC_GetPriorityGrouping>
 8000c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	6978      	ldr	r0, [r7, #20]
 8000c18:	f7ff ff8e 	bl	8000b38 <NVIC_EncodePriority>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff5d 	bl	8000ae4 <__NVIC_SetPriority>
}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ffb0 	bl	8000ba0 <SysTick_Config>
 8000c40:	4603      	mov	r3, r0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
 8000c66:	e16b      	b.n	8000f40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c68:	2201      	movs	r2, #1
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f040 815a 	bne.w	8000f3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 0303 	and.w	r3, r3, #3
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d005      	beq.n	8000c9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d130      	bne.n	8000d00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2203      	movs	r2, #3
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	68da      	ldr	r2, [r3, #12]
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	091b      	lsrs	r3, r3, #4
 8000cea:	f003 0201 	and.w	r2, r3, #1
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 0303 	and.w	r3, r3, #3
 8000d08:	2b03      	cmp	r3, #3
 8000d0a:	d017      	beq.n	8000d3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	2203      	movs	r2, #3
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4013      	ands	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0303 	and.w	r3, r3, #3
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d123      	bne.n	8000d90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	08da      	lsrs	r2, r3, #3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3208      	adds	r2, #8
 8000d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	f003 0307 	and.w	r3, r3, #7
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	220f      	movs	r2, #15
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	691a      	ldr	r2, [r3, #16]
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	08da      	lsrs	r2, r3, #3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3208      	adds	r2, #8
 8000d8a:	69b9      	ldr	r1, [r7, #24]
 8000d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0203 	and.w	r2, r3, #3
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f000 80b4 	beq.w	8000f3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b60      	ldr	r3, [pc, #384]	; (8000f58 <HAL_GPIO_Init+0x30c>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	4a5f      	ldr	r2, [pc, #380]	; (8000f58 <HAL_GPIO_Init+0x30c>)
 8000ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de0:	6453      	str	r3, [r2, #68]	; 0x44
 8000de2:	4b5d      	ldr	r3, [pc, #372]	; (8000f58 <HAL_GPIO_Init+0x30c>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dee:	4a5b      	ldr	r2, [pc, #364]	; (8000f5c <HAL_GPIO_Init+0x310>)
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	089b      	lsrs	r3, r3, #2
 8000df4:	3302      	adds	r3, #2
 8000df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	220f      	movs	r2, #15
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a52      	ldr	r2, [pc, #328]	; (8000f60 <HAL_GPIO_Init+0x314>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d02b      	beq.n	8000e72 <HAL_GPIO_Init+0x226>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a51      	ldr	r2, [pc, #324]	; (8000f64 <HAL_GPIO_Init+0x318>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d025      	beq.n	8000e6e <HAL_GPIO_Init+0x222>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a50      	ldr	r2, [pc, #320]	; (8000f68 <HAL_GPIO_Init+0x31c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d01f      	beq.n	8000e6a <HAL_GPIO_Init+0x21e>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a4f      	ldr	r2, [pc, #316]	; (8000f6c <HAL_GPIO_Init+0x320>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d019      	beq.n	8000e66 <HAL_GPIO_Init+0x21a>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a4e      	ldr	r2, [pc, #312]	; (8000f70 <HAL_GPIO_Init+0x324>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d013      	beq.n	8000e62 <HAL_GPIO_Init+0x216>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a4d      	ldr	r2, [pc, #308]	; (8000f74 <HAL_GPIO_Init+0x328>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d00d      	beq.n	8000e5e <HAL_GPIO_Init+0x212>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a4c      	ldr	r2, [pc, #304]	; (8000f78 <HAL_GPIO_Init+0x32c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d007      	beq.n	8000e5a <HAL_GPIO_Init+0x20e>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a4b      	ldr	r2, [pc, #300]	; (8000f7c <HAL_GPIO_Init+0x330>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d101      	bne.n	8000e56 <HAL_GPIO_Init+0x20a>
 8000e52:	2307      	movs	r3, #7
 8000e54:	e00e      	b.n	8000e74 <HAL_GPIO_Init+0x228>
 8000e56:	2308      	movs	r3, #8
 8000e58:	e00c      	b.n	8000e74 <HAL_GPIO_Init+0x228>
 8000e5a:	2306      	movs	r3, #6
 8000e5c:	e00a      	b.n	8000e74 <HAL_GPIO_Init+0x228>
 8000e5e:	2305      	movs	r3, #5
 8000e60:	e008      	b.n	8000e74 <HAL_GPIO_Init+0x228>
 8000e62:	2304      	movs	r3, #4
 8000e64:	e006      	b.n	8000e74 <HAL_GPIO_Init+0x228>
 8000e66:	2303      	movs	r3, #3
 8000e68:	e004      	b.n	8000e74 <HAL_GPIO_Init+0x228>
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	e002      	b.n	8000e74 <HAL_GPIO_Init+0x228>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <HAL_GPIO_Init+0x228>
 8000e72:	2300      	movs	r3, #0
 8000e74:	69fa      	ldr	r2, [r7, #28]
 8000e76:	f002 0203 	and.w	r2, r2, #3
 8000e7a:	0092      	lsls	r2, r2, #2
 8000e7c:	4093      	lsls	r3, r2
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e84:	4935      	ldr	r1, [pc, #212]	; (8000f5c <HAL_GPIO_Init+0x310>)
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	089b      	lsrs	r3, r3, #2
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e92:	4b3b      	ldr	r3, [pc, #236]	; (8000f80 <HAL_GPIO_Init+0x334>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eb6:	4a32      	ldr	r2, [pc, #200]	; (8000f80 <HAL_GPIO_Init+0x334>)
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ebc:	4b30      	ldr	r3, [pc, #192]	; (8000f80 <HAL_GPIO_Init+0x334>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ee0:	4a27      	ldr	r2, [pc, #156]	; (8000f80 <HAL_GPIO_Init+0x334>)
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ee6:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <HAL_GPIO_Init+0x334>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f0a:	4a1d      	ldr	r2, [pc, #116]	; (8000f80 <HAL_GPIO_Init+0x334>)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f10:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <HAL_GPIO_Init+0x334>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f34:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <HAL_GPIO_Init+0x334>)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	61fb      	str	r3, [r7, #28]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	2b0f      	cmp	r3, #15
 8000f44:	f67f ae90 	bls.w	8000c68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40013800 	.word	0x40013800
 8000f60:	40020000 	.word	0x40020000
 8000f64:	40020400 	.word	0x40020400
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	40020c00 	.word	0x40020c00
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40021400 	.word	0x40021400
 8000f78:	40021800 	.word	0x40021800
 8000f7c:	40021c00 	.word	0x40021c00
 8000f80:	40013c00 	.word	0x40013c00

08000f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
 8000f90:	4613      	mov	r3, r2
 8000f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f94:	787b      	ldrb	r3, [r7, #1]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f9a:	887a      	ldrh	r2, [r7, #2]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fa0:	e003      	b.n	8000faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	041a      	lsls	r2, r3, #16
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	619a      	str	r2, [r3, #24]
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b085      	sub	sp, #20
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fc8:	887a      	ldrh	r2, [r7, #2]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	041a      	lsls	r2, r3, #16
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	43d9      	mvns	r1, r3
 8000fd4:	887b      	ldrh	r3, [r7, #2]
 8000fd6:	400b      	ands	r3, r1
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	619a      	str	r2, [r3, #24]
}
 8000fde:	bf00      	nop
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e267      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	2b00      	cmp	r3, #0
 8001008:	d075      	beq.n	80010f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800100a:	4b88      	ldr	r3, [pc, #544]	; (800122c <HAL_RCC_OscConfig+0x240>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 030c 	and.w	r3, r3, #12
 8001012:	2b04      	cmp	r3, #4
 8001014:	d00c      	beq.n	8001030 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001016:	4b85      	ldr	r3, [pc, #532]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800101e:	2b08      	cmp	r3, #8
 8001020:	d112      	bne.n	8001048 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001022:	4b82      	ldr	r3, [pc, #520]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800102e:	d10b      	bne.n	8001048 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001030:	4b7e      	ldr	r3, [pc, #504]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d05b      	beq.n	80010f4 <HAL_RCC_OscConfig+0x108>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d157      	bne.n	80010f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e242      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001050:	d106      	bne.n	8001060 <HAL_RCC_OscConfig+0x74>
 8001052:	4b76      	ldr	r3, [pc, #472]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a75      	ldr	r2, [pc, #468]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	e01d      	b.n	800109c <HAL_RCC_OscConfig+0xb0>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001068:	d10c      	bne.n	8001084 <HAL_RCC_OscConfig+0x98>
 800106a:	4b70      	ldr	r3, [pc, #448]	; (800122c <HAL_RCC_OscConfig+0x240>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a6f      	ldr	r2, [pc, #444]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	4b6d      	ldr	r3, [pc, #436]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a6c      	ldr	r2, [pc, #432]	; (800122c <HAL_RCC_OscConfig+0x240>)
 800107c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e00b      	b.n	800109c <HAL_RCC_OscConfig+0xb0>
 8001084:	4b69      	ldr	r3, [pc, #420]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a68      	ldr	r2, [pc, #416]	; (800122c <HAL_RCC_OscConfig+0x240>)
 800108a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b66      	ldr	r3, [pc, #408]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a65      	ldr	r2, [pc, #404]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d013      	beq.n	80010cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff fce0 	bl	8000a68 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ac:	f7ff fcdc 	bl	8000a68 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b64      	cmp	r3, #100	; 0x64
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e207      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010be:	4b5b      	ldr	r3, [pc, #364]	; (800122c <HAL_RCC_OscConfig+0x240>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f0      	beq.n	80010ac <HAL_RCC_OscConfig+0xc0>
 80010ca:	e014      	b.n	80010f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010cc:	f7ff fccc 	bl	8000a68 <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d4:	f7ff fcc8 	bl	8000a68 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b64      	cmp	r3, #100	; 0x64
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e1f3      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e6:	4b51      	ldr	r3, [pc, #324]	; (800122c <HAL_RCC_OscConfig+0x240>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f0      	bne.n	80010d4 <HAL_RCC_OscConfig+0xe8>
 80010f2:	e000      	b.n	80010f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d063      	beq.n	80011ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001102:	4b4a      	ldr	r3, [pc, #296]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 030c 	and.w	r3, r3, #12
 800110a:	2b00      	cmp	r3, #0
 800110c:	d00b      	beq.n	8001126 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800110e:	4b47      	ldr	r3, [pc, #284]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001116:	2b08      	cmp	r3, #8
 8001118:	d11c      	bne.n	8001154 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800111a:	4b44      	ldr	r3, [pc, #272]	; (800122c <HAL_RCC_OscConfig+0x240>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d116      	bne.n	8001154 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001126:	4b41      	ldr	r3, [pc, #260]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d005      	beq.n	800113e <HAL_RCC_OscConfig+0x152>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d001      	beq.n	800113e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e1c7      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113e:	4b3b      	ldr	r3, [pc, #236]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	4937      	ldr	r1, [pc, #220]	; (800122c <HAL_RCC_OscConfig+0x240>)
 800114e:	4313      	orrs	r3, r2
 8001150:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001152:	e03a      	b.n	80011ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d020      	beq.n	800119e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800115c:	4b34      	ldr	r3, [pc, #208]	; (8001230 <HAL_RCC_OscConfig+0x244>)
 800115e:	2201      	movs	r2, #1
 8001160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001162:	f7ff fc81 	bl	8000a68 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800116a:	f7ff fc7d 	bl	8000a68 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e1a8      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117c:	4b2b      	ldr	r3, [pc, #172]	; (800122c <HAL_RCC_OscConfig+0x240>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001188:	4b28      	ldr	r3, [pc, #160]	; (800122c <HAL_RCC_OscConfig+0x240>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	4925      	ldr	r1, [pc, #148]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001198:	4313      	orrs	r3, r2
 800119a:	600b      	str	r3, [r1, #0]
 800119c:	e015      	b.n	80011ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800119e:	4b24      	ldr	r3, [pc, #144]	; (8001230 <HAL_RCC_OscConfig+0x244>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a4:	f7ff fc60 	bl	8000a68 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ac:	f7ff fc5c 	bl	8000a68 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e187      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011be:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_RCC_OscConfig+0x240>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d036      	beq.n	8001244 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d016      	beq.n	800120c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_RCC_OscConfig+0x248>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e4:	f7ff fc40 	bl	8000a68 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011ec:	f7ff fc3c 	bl	8000a68 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e167      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <HAL_RCC_OscConfig+0x240>)
 8001200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f0      	beq.n	80011ec <HAL_RCC_OscConfig+0x200>
 800120a:	e01b      	b.n	8001244 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_RCC_OscConfig+0x248>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001212:	f7ff fc29 	bl	8000a68 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001218:	e00e      	b.n	8001238 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800121a:	f7ff fc25 	bl	8000a68 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d907      	bls.n	8001238 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e150      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
 800122c:	40023800 	.word	0x40023800
 8001230:	42470000 	.word	0x42470000
 8001234:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001238:	4b88      	ldr	r3, [pc, #544]	; (800145c <HAL_RCC_OscConfig+0x470>)
 800123a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1ea      	bne.n	800121a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 8097 	beq.w	8001380 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001256:	4b81      	ldr	r3, [pc, #516]	; (800145c <HAL_RCC_OscConfig+0x470>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10f      	bne.n	8001282 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	4b7d      	ldr	r3, [pc, #500]	; (800145c <HAL_RCC_OscConfig+0x470>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a7c      	ldr	r2, [pc, #496]	; (800145c <HAL_RCC_OscConfig+0x470>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b7a      	ldr	r3, [pc, #488]	; (800145c <HAL_RCC_OscConfig+0x470>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800127e:	2301      	movs	r3, #1
 8001280:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001282:	4b77      	ldr	r3, [pc, #476]	; (8001460 <HAL_RCC_OscConfig+0x474>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128a:	2b00      	cmp	r3, #0
 800128c:	d118      	bne.n	80012c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800128e:	4b74      	ldr	r3, [pc, #464]	; (8001460 <HAL_RCC_OscConfig+0x474>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a73      	ldr	r2, [pc, #460]	; (8001460 <HAL_RCC_OscConfig+0x474>)
 8001294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800129a:	f7ff fbe5 	bl	8000a68 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012a2:	f7ff fbe1 	bl	8000a68 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e10c      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b4:	4b6a      	ldr	r3, [pc, #424]	; (8001460 <HAL_RCC_OscConfig+0x474>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d106      	bne.n	80012d6 <HAL_RCC_OscConfig+0x2ea>
 80012c8:	4b64      	ldr	r3, [pc, #400]	; (800145c <HAL_RCC_OscConfig+0x470>)
 80012ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012cc:	4a63      	ldr	r2, [pc, #396]	; (800145c <HAL_RCC_OscConfig+0x470>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6713      	str	r3, [r2, #112]	; 0x70
 80012d4:	e01c      	b.n	8001310 <HAL_RCC_OscConfig+0x324>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2b05      	cmp	r3, #5
 80012dc:	d10c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x30c>
 80012de:	4b5f      	ldr	r3, [pc, #380]	; (800145c <HAL_RCC_OscConfig+0x470>)
 80012e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e2:	4a5e      	ldr	r2, [pc, #376]	; (800145c <HAL_RCC_OscConfig+0x470>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	6713      	str	r3, [r2, #112]	; 0x70
 80012ea:	4b5c      	ldr	r3, [pc, #368]	; (800145c <HAL_RCC_OscConfig+0x470>)
 80012ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ee:	4a5b      	ldr	r2, [pc, #364]	; (800145c <HAL_RCC_OscConfig+0x470>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6713      	str	r3, [r2, #112]	; 0x70
 80012f6:	e00b      	b.n	8001310 <HAL_RCC_OscConfig+0x324>
 80012f8:	4b58      	ldr	r3, [pc, #352]	; (800145c <HAL_RCC_OscConfig+0x470>)
 80012fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fc:	4a57      	ldr	r2, [pc, #348]	; (800145c <HAL_RCC_OscConfig+0x470>)
 80012fe:	f023 0301 	bic.w	r3, r3, #1
 8001302:	6713      	str	r3, [r2, #112]	; 0x70
 8001304:	4b55      	ldr	r3, [pc, #340]	; (800145c <HAL_RCC_OscConfig+0x470>)
 8001306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001308:	4a54      	ldr	r2, [pc, #336]	; (800145c <HAL_RCC_OscConfig+0x470>)
 800130a:	f023 0304 	bic.w	r3, r3, #4
 800130e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d015      	beq.n	8001344 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001318:	f7ff fba6 	bl	8000a68 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800131e:	e00a      	b.n	8001336 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001320:	f7ff fba2 	bl	8000a68 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	f241 3288 	movw	r2, #5000	; 0x1388
 800132e:	4293      	cmp	r3, r2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e0cb      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001336:	4b49      	ldr	r3, [pc, #292]	; (800145c <HAL_RCC_OscConfig+0x470>)
 8001338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0ee      	beq.n	8001320 <HAL_RCC_OscConfig+0x334>
 8001342:	e014      	b.n	800136e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001344:	f7ff fb90 	bl	8000a68 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800134a:	e00a      	b.n	8001362 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800134c:	f7ff fb8c 	bl	8000a68 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f241 3288 	movw	r2, #5000	; 0x1388
 800135a:	4293      	cmp	r3, r2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e0b5      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001362:	4b3e      	ldr	r3, [pc, #248]	; (800145c <HAL_RCC_OscConfig+0x470>)
 8001364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1ee      	bne.n	800134c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800136e:	7dfb      	ldrb	r3, [r7, #23]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d105      	bne.n	8001380 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001374:	4b39      	ldr	r3, [pc, #228]	; (800145c <HAL_RCC_OscConfig+0x470>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	4a38      	ldr	r2, [pc, #224]	; (800145c <HAL_RCC_OscConfig+0x470>)
 800137a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800137e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 80a1 	beq.w	80014cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800138a:	4b34      	ldr	r3, [pc, #208]	; (800145c <HAL_RCC_OscConfig+0x470>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b08      	cmp	r3, #8
 8001394:	d05c      	beq.n	8001450 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d141      	bne.n	8001422 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139e:	4b31      	ldr	r3, [pc, #196]	; (8001464 <HAL_RCC_OscConfig+0x478>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fb60 	bl	8000a68 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ac:	f7ff fb5c 	bl	8000a68 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e087      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013be:	4b27      	ldr	r3, [pc, #156]	; (800145c <HAL_RCC_OscConfig+0x470>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69da      	ldr	r2, [r3, #28]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	019b      	lsls	r3, r3, #6
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e0:	085b      	lsrs	r3, r3, #1
 80013e2:	3b01      	subs	r3, #1
 80013e4:	041b      	lsls	r3, r3, #16
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	061b      	lsls	r3, r3, #24
 80013ee:	491b      	ldr	r1, [pc, #108]	; (800145c <HAL_RCC_OscConfig+0x470>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_RCC_OscConfig+0x478>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fa:	f7ff fb35 	bl	8000a68 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001402:	f7ff fb31 	bl	8000a68 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e05c      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_RCC_OscConfig+0x470>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x416>
 8001420:	e054      	b.n	80014cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <HAL_RCC_OscConfig+0x478>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fb1e 	bl	8000a68 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001430:	f7ff fb1a 	bl	8000a68 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e045      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_RCC_OscConfig+0x470>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x444>
 800144e:	e03d      	b.n	80014cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d107      	bne.n	8001468 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e038      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
 800145c:	40023800 	.word	0x40023800
 8001460:	40007000 	.word	0x40007000
 8001464:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001468:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <HAL_RCC_OscConfig+0x4ec>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d028      	beq.n	80014c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001480:	429a      	cmp	r2, r3
 8001482:	d121      	bne.n	80014c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800148e:	429a      	cmp	r2, r3
 8001490:	d11a      	bne.n	80014c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001498:	4013      	ands	r3, r2
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800149e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d111      	bne.n	80014c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ae:	085b      	lsrs	r3, r3, #1
 80014b0:	3b01      	subs	r3, #1
 80014b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d107      	bne.n	80014c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800

080014dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0cc      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014f0:	4b68      	ldr	r3, [pc, #416]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d90c      	bls.n	8001518 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	4b65      	ldr	r3, [pc, #404]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001506:	4b63      	ldr	r3, [pc, #396]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d001      	beq.n	8001518 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e0b8      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d020      	beq.n	8001566 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	d005      	beq.n	800153c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001530:	4b59      	ldr	r3, [pc, #356]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	4a58      	ldr	r2, [pc, #352]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800153a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001548:	4b53      	ldr	r3, [pc, #332]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	4a52      	ldr	r2, [pc, #328]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001552:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001554:	4b50      	ldr	r3, [pc, #320]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	494d      	ldr	r1, [pc, #308]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	4313      	orrs	r3, r2
 8001564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d044      	beq.n	80015fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d107      	bne.n	800158a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157a:	4b47      	ldr	r3, [pc, #284]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d119      	bne.n	80015ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e07f      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d003      	beq.n	800159a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001596:	2b03      	cmp	r3, #3
 8001598:	d107      	bne.n	80015aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159a:	4b3f      	ldr	r3, [pc, #252]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d109      	bne.n	80015ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e06f      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015aa:	4b3b      	ldr	r3, [pc, #236]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e067      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ba:	4b37      	ldr	r3, [pc, #220]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f023 0203 	bic.w	r2, r3, #3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4934      	ldr	r1, [pc, #208]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015cc:	f7ff fa4c 	bl	8000a68 <HAL_GetTick>
 80015d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d2:	e00a      	b.n	80015ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d4:	f7ff fa48 	bl	8000a68 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e04f      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ea:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 020c 	and.w	r2, r3, #12
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d1eb      	bne.n	80015d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d20c      	bcs.n	8001624 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160a:	4b22      	ldr	r3, [pc, #136]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001612:	4b20      	ldr	r3, [pc, #128]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	429a      	cmp	r2, r3
 800161e:	d001      	beq.n	8001624 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e032      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d008      	beq.n	8001642 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	4916      	ldr	r1, [pc, #88]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	4313      	orrs	r3, r2
 8001640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d009      	beq.n	8001662 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	490e      	ldr	r1, [pc, #56]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001662:	f000 f821 	bl	80016a8 <HAL_RCC_GetSysClockFreq>
 8001666:	4602      	mov	r2, r0
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	091b      	lsrs	r3, r3, #4
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	490a      	ldr	r1, [pc, #40]	; (800169c <HAL_RCC_ClockConfig+0x1c0>)
 8001674:	5ccb      	ldrb	r3, [r1, r3]
 8001676:	fa22 f303 	lsr.w	r3, r2, r3
 800167a:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff f9ac 	bl	80009e0 <HAL_InitTick>

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023c00 	.word	0x40023c00
 8001698:	40023800 	.word	0x40023800
 800169c:	080023b0 	.word	0x080023b0
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000004 	.word	0x20000004

080016a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016ac:	b090      	sub	sp, #64	; 0x40
 80016ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	637b      	str	r3, [r7, #52]	; 0x34
 80016b4:	2300      	movs	r3, #0
 80016b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016b8:	2300      	movs	r3, #0
 80016ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80016bc:	2300      	movs	r3, #0
 80016be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016c0:	4b59      	ldr	r3, [pc, #356]	; (8001828 <HAL_RCC_GetSysClockFreq+0x180>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 030c 	and.w	r3, r3, #12
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d00d      	beq.n	80016e8 <HAL_RCC_GetSysClockFreq+0x40>
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	f200 80a1 	bhi.w	8001814 <HAL_RCC_GetSysClockFreq+0x16c>
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <HAL_RCC_GetSysClockFreq+0x34>
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	d003      	beq.n	80016e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80016da:	e09b      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016dc:	4b53      	ldr	r3, [pc, #332]	; (800182c <HAL_RCC_GetSysClockFreq+0x184>)
 80016de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80016e0:	e09b      	b.n	800181a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016e2:	4b53      	ldr	r3, [pc, #332]	; (8001830 <HAL_RCC_GetSysClockFreq+0x188>)
 80016e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016e6:	e098      	b.n	800181a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016e8:	4b4f      	ldr	r3, [pc, #316]	; (8001828 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016f2:	4b4d      	ldr	r3, [pc, #308]	; (8001828 <HAL_RCC_GetSysClockFreq+0x180>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d028      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016fe:	4b4a      	ldr	r3, [pc, #296]	; (8001828 <HAL_RCC_GetSysClockFreq+0x180>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	099b      	lsrs	r3, r3, #6
 8001704:	2200      	movs	r2, #0
 8001706:	623b      	str	r3, [r7, #32]
 8001708:	627a      	str	r2, [r7, #36]	; 0x24
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001710:	2100      	movs	r1, #0
 8001712:	4b47      	ldr	r3, [pc, #284]	; (8001830 <HAL_RCC_GetSysClockFreq+0x188>)
 8001714:	fb03 f201 	mul.w	r2, r3, r1
 8001718:	2300      	movs	r3, #0
 800171a:	fb00 f303 	mul.w	r3, r0, r3
 800171e:	4413      	add	r3, r2
 8001720:	4a43      	ldr	r2, [pc, #268]	; (8001830 <HAL_RCC_GetSysClockFreq+0x188>)
 8001722:	fba0 1202 	umull	r1, r2, r0, r2
 8001726:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001728:	460a      	mov	r2, r1
 800172a:	62ba      	str	r2, [r7, #40]	; 0x28
 800172c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800172e:	4413      	add	r3, r2
 8001730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001734:	2200      	movs	r2, #0
 8001736:	61bb      	str	r3, [r7, #24]
 8001738:	61fa      	str	r2, [r7, #28]
 800173a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800173e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001742:	f7fe fd49 	bl	80001d8 <__aeabi_uldivmod>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4613      	mov	r3, r2
 800174c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800174e:	e053      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001750:	4b35      	ldr	r3, [pc, #212]	; (8001828 <HAL_RCC_GetSysClockFreq+0x180>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	099b      	lsrs	r3, r3, #6
 8001756:	2200      	movs	r2, #0
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	617a      	str	r2, [r7, #20]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001762:	f04f 0b00 	mov.w	fp, #0
 8001766:	4652      	mov	r2, sl
 8001768:	465b      	mov	r3, fp
 800176a:	f04f 0000 	mov.w	r0, #0
 800176e:	f04f 0100 	mov.w	r1, #0
 8001772:	0159      	lsls	r1, r3, #5
 8001774:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001778:	0150      	lsls	r0, r2, #5
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	ebb2 080a 	subs.w	r8, r2, sl
 8001782:	eb63 090b 	sbc.w	r9, r3, fp
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001792:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001796:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800179a:	ebb2 0408 	subs.w	r4, r2, r8
 800179e:	eb63 0509 	sbc.w	r5, r3, r9
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	00eb      	lsls	r3, r5, #3
 80017ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017b0:	00e2      	lsls	r2, r4, #3
 80017b2:	4614      	mov	r4, r2
 80017b4:	461d      	mov	r5, r3
 80017b6:	eb14 030a 	adds.w	r3, r4, sl
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	eb45 030b 	adc.w	r3, r5, fp
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017ce:	4629      	mov	r1, r5
 80017d0:	028b      	lsls	r3, r1, #10
 80017d2:	4621      	mov	r1, r4
 80017d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017d8:	4621      	mov	r1, r4
 80017da:	028a      	lsls	r2, r1, #10
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e2:	2200      	movs	r2, #0
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	60fa      	str	r2, [r7, #12]
 80017e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017ec:	f7fe fcf4 	bl	80001d8 <__aeabi_uldivmod>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4613      	mov	r3, r2
 80017f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_RCC_GetSysClockFreq+0x180>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	0c1b      	lsrs	r3, r3, #16
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	3301      	adds	r3, #1
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001808:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800180a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800180c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001810:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001812:	e002      	b.n	800181a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_RCC_GetSysClockFreq+0x184>)
 8001816:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800181a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800181c:	4618      	mov	r0, r3
 800181e:	3740      	adds	r7, #64	; 0x40
 8001820:	46bd      	mov	sp, r7
 8001822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800
 800182c:	00f42400 	.word	0x00f42400
 8001830:	017d7840 	.word	0x017d7840

08001834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001838:	4b03      	ldr	r3, [pc, #12]	; (8001848 <HAL_RCC_GetHCLKFreq+0x14>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20000000 	.word	0x20000000

0800184c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001850:	f7ff fff0 	bl	8001834 <HAL_RCC_GetHCLKFreq>
 8001854:	4602      	mov	r2, r0
 8001856:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	0a9b      	lsrs	r3, r3, #10
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	4903      	ldr	r1, [pc, #12]	; (8001870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001862:	5ccb      	ldrb	r3, [r1, r3]
 8001864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001868:	4618      	mov	r0, r3
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40023800 	.word	0x40023800
 8001870:	080023c0 	.word	0x080023c0

08001874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001878:	f7ff ffdc 	bl	8001834 <HAL_RCC_GetHCLKFreq>
 800187c:	4602      	mov	r2, r0
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	0b5b      	lsrs	r3, r3, #13
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	4903      	ldr	r1, [pc, #12]	; (8001898 <HAL_RCC_GetPCLK2Freq+0x24>)
 800188a:	5ccb      	ldrb	r3, [r1, r3]
 800188c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001890:	4618      	mov	r0, r3
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40023800 	.word	0x40023800
 8001898:	080023c0 	.word	0x080023c0

0800189c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e03f      	b.n	800192e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d106      	bne.n	80018c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7fe ffc4 	bl	8000850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2224      	movs	r2, #36	; 0x24
 80018cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 f929 	bl	8001b38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695a      	ldr	r2, [r3, #20]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2220      	movs	r2, #32
 8001920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2220      	movs	r2, #32
 8001928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b08a      	sub	sp, #40	; 0x28
 800193a:	af02      	add	r7, sp, #8
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	4613      	mov	r3, r2
 8001944:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b20      	cmp	r3, #32
 8001954:	d17c      	bne.n	8001a50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <HAL_UART_Transmit+0x2c>
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e075      	b.n	8001a52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_UART_Transmit+0x3e>
 8001970:	2302      	movs	r3, #2
 8001972:	e06e      	b.n	8001a52 <HAL_UART_Transmit+0x11c>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2221      	movs	r2, #33	; 0x21
 8001986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800198a:	f7ff f86d 	bl	8000a68 <HAL_GetTick>
 800198e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	88fa      	ldrh	r2, [r7, #6]
 8001994:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	88fa      	ldrh	r2, [r7, #6]
 800199a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019a4:	d108      	bne.n	80019b8 <HAL_UART_Transmit+0x82>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d104      	bne.n	80019b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	e003      	b.n	80019c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80019c8:	e02a      	b.n	8001a20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	2200      	movs	r2, #0
 80019d2:	2180      	movs	r1, #128	; 0x80
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 f840 	bl	8001a5a <UART_WaitOnFlagUntilTimeout>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e036      	b.n	8001a52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10b      	bne.n	8001a02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	3302      	adds	r3, #2
 80019fe:	61bb      	str	r3, [r7, #24]
 8001a00:	e007      	b.n	8001a12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	781a      	ldrb	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1cf      	bne.n	80019ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	2200      	movs	r2, #0
 8001a32:	2140      	movs	r1, #64	; 0x40
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f000 f810 	bl	8001a5a <UART_WaitOnFlagUntilTimeout>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e006      	b.n	8001a52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2220      	movs	r2, #32
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e000      	b.n	8001a52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001a50:	2302      	movs	r3, #2
  }
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3720      	adds	r7, #32
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b090      	sub	sp, #64	; 0x40
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	603b      	str	r3, [r7, #0]
 8001a66:	4613      	mov	r3, r2
 8001a68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a6a:	e050      	b.n	8001b0e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a72:	d04c      	beq.n	8001b0e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <UART_WaitOnFlagUntilTimeout+0x30>
 8001a7a:	f7fe fff5 	bl	8000a68 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d241      	bcs.n	8001b0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	330c      	adds	r3, #12
 8001a90:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a94:	e853 3f00 	ldrex	r3, [r3]
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	330c      	adds	r3, #12
 8001aa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001aaa:	637a      	str	r2, [r7, #52]	; 0x34
 8001aac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001aae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ab0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ab2:	e841 2300 	strex	r3, r2, [r1]
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1e5      	bne.n	8001a8a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3314      	adds	r3, #20
 8001ac4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	e853 3f00 	ldrex	r3, [r3]
 8001acc:	613b      	str	r3, [r7, #16]
   return(result);
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	3314      	adds	r3, #20
 8001adc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ade:	623a      	str	r2, [r7, #32]
 8001ae0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ae2:	69f9      	ldr	r1, [r7, #28]
 8001ae4:	6a3a      	ldr	r2, [r7, #32]
 8001ae6:	e841 2300 	strex	r3, r2, [r1]
 8001aea:	61bb      	str	r3, [r7, #24]
   return(result);
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1e5      	bne.n	8001abe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2220      	movs	r2, #32
 8001af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2220      	movs	r2, #32
 8001afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e00f      	b.n	8001b2e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	4013      	ands	r3, r2
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	bf0c      	ite	eq
 8001b1e:	2301      	moveq	r3, #1
 8001b20:	2300      	movne	r3, #0
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	461a      	mov	r2, r3
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d09f      	beq.n	8001a6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3740      	adds	r7, #64	; 0x40
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b3c:	b0c0      	sub	sp, #256	; 0x100
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b54:	68d9      	ldr	r1, [r3, #12]
 8001b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	ea40 0301 	orr.w	r3, r0, r1
 8001b60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	431a      	orrs	r2, r3
 8001b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001b90:	f021 010c 	bic.w	r1, r1, #12
 8001b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001b9e:	430b      	orrs	r3, r1
 8001ba0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bb2:	6999      	ldr	r1, [r3, #24]
 8001bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	ea40 0301 	orr.w	r3, r0, r1
 8001bbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4b8f      	ldr	r3, [pc, #572]	; (8001e04 <UART_SetConfig+0x2cc>)
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d005      	beq.n	8001bd8 <UART_SetConfig+0xa0>
 8001bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4b8d      	ldr	r3, [pc, #564]	; (8001e08 <UART_SetConfig+0x2d0>)
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d104      	bne.n	8001be2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001bd8:	f7ff fe4c 	bl	8001874 <HAL_RCC_GetPCLK2Freq>
 8001bdc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001be0:	e003      	b.n	8001bea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001be2:	f7ff fe33 	bl	800184c <HAL_RCC_GetPCLK1Freq>
 8001be6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bf4:	f040 810c 	bne.w	8001e10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001c06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001c0a:	4622      	mov	r2, r4
 8001c0c:	462b      	mov	r3, r5
 8001c0e:	1891      	adds	r1, r2, r2
 8001c10:	65b9      	str	r1, [r7, #88]	; 0x58
 8001c12:	415b      	adcs	r3, r3
 8001c14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	eb12 0801 	adds.w	r8, r2, r1
 8001c20:	4629      	mov	r1, r5
 8001c22:	eb43 0901 	adc.w	r9, r3, r1
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	4699      	mov	r9, r3
 8001c3e:	4623      	mov	r3, r4
 8001c40:	eb18 0303 	adds.w	r3, r8, r3
 8001c44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001c48:	462b      	mov	r3, r5
 8001c4a:	eb49 0303 	adc.w	r3, r9, r3
 8001c4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001c5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001c62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001c66:	460b      	mov	r3, r1
 8001c68:	18db      	adds	r3, r3, r3
 8001c6a:	653b      	str	r3, [r7, #80]	; 0x50
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	eb42 0303 	adc.w	r3, r2, r3
 8001c72:	657b      	str	r3, [r7, #84]	; 0x54
 8001c74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001c7c:	f7fe faac 	bl	80001d8 <__aeabi_uldivmod>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4b61      	ldr	r3, [pc, #388]	; (8001e0c <UART_SetConfig+0x2d4>)
 8001c86:	fba3 2302 	umull	r2, r3, r3, r2
 8001c8a:	095b      	lsrs	r3, r3, #5
 8001c8c:	011c      	lsls	r4, r3, #4
 8001c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c92:	2200      	movs	r2, #0
 8001c94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001c98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001c9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001ca0:	4642      	mov	r2, r8
 8001ca2:	464b      	mov	r3, r9
 8001ca4:	1891      	adds	r1, r2, r2
 8001ca6:	64b9      	str	r1, [r7, #72]	; 0x48
 8001ca8:	415b      	adcs	r3, r3
 8001caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001cb0:	4641      	mov	r1, r8
 8001cb2:	eb12 0a01 	adds.w	sl, r2, r1
 8001cb6:	4649      	mov	r1, r9
 8001cb8:	eb43 0b01 	adc.w	fp, r3, r1
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001cc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ccc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001cd0:	4692      	mov	sl, r2
 8001cd2:	469b      	mov	fp, r3
 8001cd4:	4643      	mov	r3, r8
 8001cd6:	eb1a 0303 	adds.w	r3, sl, r3
 8001cda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001cde:	464b      	mov	r3, r9
 8001ce0:	eb4b 0303 	adc.w	r3, fp, r3
 8001ce4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001cf4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001cf8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	18db      	adds	r3, r3, r3
 8001d00:	643b      	str	r3, [r7, #64]	; 0x40
 8001d02:	4613      	mov	r3, r2
 8001d04:	eb42 0303 	adc.w	r3, r2, r3
 8001d08:	647b      	str	r3, [r7, #68]	; 0x44
 8001d0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d12:	f7fe fa61 	bl	80001d8 <__aeabi_uldivmod>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4b3b      	ldr	r3, [pc, #236]	; (8001e0c <UART_SetConfig+0x2d4>)
 8001d1e:	fba3 2301 	umull	r2, r3, r3, r1
 8001d22:	095b      	lsrs	r3, r3, #5
 8001d24:	2264      	movs	r2, #100	; 0x64
 8001d26:	fb02 f303 	mul.w	r3, r2, r3
 8001d2a:	1acb      	subs	r3, r1, r3
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001d32:	4b36      	ldr	r3, [pc, #216]	; (8001e0c <UART_SetConfig+0x2d4>)
 8001d34:	fba3 2302 	umull	r2, r3, r3, r2
 8001d38:	095b      	lsrs	r3, r3, #5
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d40:	441c      	add	r4, r3
 8001d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d46:	2200      	movs	r2, #0
 8001d48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001d50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001d54:	4642      	mov	r2, r8
 8001d56:	464b      	mov	r3, r9
 8001d58:	1891      	adds	r1, r2, r2
 8001d5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d5c:	415b      	adcs	r3, r3
 8001d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d64:	4641      	mov	r1, r8
 8001d66:	1851      	adds	r1, r2, r1
 8001d68:	6339      	str	r1, [r7, #48]	; 0x30
 8001d6a:	4649      	mov	r1, r9
 8001d6c:	414b      	adcs	r3, r1
 8001d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001d7c:	4659      	mov	r1, fp
 8001d7e:	00cb      	lsls	r3, r1, #3
 8001d80:	4651      	mov	r1, sl
 8001d82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d86:	4651      	mov	r1, sl
 8001d88:	00ca      	lsls	r2, r1, #3
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4642      	mov	r2, r8
 8001d92:	189b      	adds	r3, r3, r2
 8001d94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001d98:	464b      	mov	r3, r9
 8001d9a:	460a      	mov	r2, r1
 8001d9c:	eb42 0303 	adc.w	r3, r2, r3
 8001da0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001db0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001db4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001db8:	460b      	mov	r3, r1
 8001dba:	18db      	adds	r3, r3, r3
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	eb42 0303 	adc.w	r3, r2, r3
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001dce:	f7fe fa03 	bl	80001d8 <__aeabi_uldivmod>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <UART_SetConfig+0x2d4>)
 8001dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8001ddc:	095b      	lsrs	r3, r3, #5
 8001dde:	2164      	movs	r1, #100	; 0x64
 8001de0:	fb01 f303 	mul.w	r3, r1, r3
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	3332      	adds	r3, #50	; 0x32
 8001dea:	4a08      	ldr	r2, [pc, #32]	; (8001e0c <UART_SetConfig+0x2d4>)
 8001dec:	fba2 2303 	umull	r2, r3, r2, r3
 8001df0:	095b      	lsrs	r3, r3, #5
 8001df2:	f003 0207 	and.w	r2, r3, #7
 8001df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4422      	add	r2, r4
 8001dfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e00:	e105      	b.n	800200e <UART_SetConfig+0x4d6>
 8001e02:	bf00      	nop
 8001e04:	40011000 	.word	0x40011000
 8001e08:	40011400 	.word	0x40011400
 8001e0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e14:	2200      	movs	r2, #0
 8001e16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001e1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001e1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001e22:	4642      	mov	r2, r8
 8001e24:	464b      	mov	r3, r9
 8001e26:	1891      	adds	r1, r2, r2
 8001e28:	6239      	str	r1, [r7, #32]
 8001e2a:	415b      	adcs	r3, r3
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e32:	4641      	mov	r1, r8
 8001e34:	1854      	adds	r4, r2, r1
 8001e36:	4649      	mov	r1, r9
 8001e38:	eb43 0501 	adc.w	r5, r3, r1
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	00eb      	lsls	r3, r5, #3
 8001e46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e4a:	00e2      	lsls	r2, r4, #3
 8001e4c:	4614      	mov	r4, r2
 8001e4e:	461d      	mov	r5, r3
 8001e50:	4643      	mov	r3, r8
 8001e52:	18e3      	adds	r3, r4, r3
 8001e54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e58:	464b      	mov	r3, r9
 8001e5a:	eb45 0303 	adc.w	r3, r5, r3
 8001e5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	f04f 0300 	mov.w	r3, #0
 8001e7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001e7e:	4629      	mov	r1, r5
 8001e80:	008b      	lsls	r3, r1, #2
 8001e82:	4621      	mov	r1, r4
 8001e84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e88:	4621      	mov	r1, r4
 8001e8a:	008a      	lsls	r2, r1, #2
 8001e8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001e90:	f7fe f9a2 	bl	80001d8 <__aeabi_uldivmod>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4b60      	ldr	r3, [pc, #384]	; (800201c <UART_SetConfig+0x4e4>)
 8001e9a:	fba3 2302 	umull	r2, r3, r3, r2
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	011c      	lsls	r4, r3, #4
 8001ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001eac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001eb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001eb4:	4642      	mov	r2, r8
 8001eb6:	464b      	mov	r3, r9
 8001eb8:	1891      	adds	r1, r2, r2
 8001eba:	61b9      	str	r1, [r7, #24]
 8001ebc:	415b      	adcs	r3, r3
 8001ebe:	61fb      	str	r3, [r7, #28]
 8001ec0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ec4:	4641      	mov	r1, r8
 8001ec6:	1851      	adds	r1, r2, r1
 8001ec8:	6139      	str	r1, [r7, #16]
 8001eca:	4649      	mov	r1, r9
 8001ecc:	414b      	adcs	r3, r1
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	f04f 0300 	mov.w	r3, #0
 8001ed8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001edc:	4659      	mov	r1, fp
 8001ede:	00cb      	lsls	r3, r1, #3
 8001ee0:	4651      	mov	r1, sl
 8001ee2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ee6:	4651      	mov	r1, sl
 8001ee8:	00ca      	lsls	r2, r1, #3
 8001eea:	4610      	mov	r0, r2
 8001eec:	4619      	mov	r1, r3
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4642      	mov	r2, r8
 8001ef2:	189b      	adds	r3, r3, r2
 8001ef4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ef8:	464b      	mov	r3, r9
 8001efa:	460a      	mov	r2, r1
 8001efc:	eb42 0303 	adc.w	r3, r2, r3
 8001f00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001f1c:	4649      	mov	r1, r9
 8001f1e:	008b      	lsls	r3, r1, #2
 8001f20:	4641      	mov	r1, r8
 8001f22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f26:	4641      	mov	r1, r8
 8001f28:	008a      	lsls	r2, r1, #2
 8001f2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001f2e:	f7fe f953 	bl	80001d8 <__aeabi_uldivmod>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4b39      	ldr	r3, [pc, #228]	; (800201c <UART_SetConfig+0x4e4>)
 8001f38:	fba3 1302 	umull	r1, r3, r3, r2
 8001f3c:	095b      	lsrs	r3, r3, #5
 8001f3e:	2164      	movs	r1, #100	; 0x64
 8001f40:	fb01 f303 	mul.w	r3, r1, r3
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	3332      	adds	r3, #50	; 0x32
 8001f4a:	4a34      	ldr	r2, [pc, #208]	; (800201c <UART_SetConfig+0x4e4>)
 8001f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f50:	095b      	lsrs	r3, r3, #5
 8001f52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f56:	441c      	add	r4, r3
 8001f58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	673b      	str	r3, [r7, #112]	; 0x70
 8001f60:	677a      	str	r2, [r7, #116]	; 0x74
 8001f62:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001f66:	4642      	mov	r2, r8
 8001f68:	464b      	mov	r3, r9
 8001f6a:	1891      	adds	r1, r2, r2
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	415b      	adcs	r3, r3
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f76:	4641      	mov	r1, r8
 8001f78:	1851      	adds	r1, r2, r1
 8001f7a:	6039      	str	r1, [r7, #0]
 8001f7c:	4649      	mov	r1, r9
 8001f7e:	414b      	adcs	r3, r1
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001f8e:	4659      	mov	r1, fp
 8001f90:	00cb      	lsls	r3, r1, #3
 8001f92:	4651      	mov	r1, sl
 8001f94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f98:	4651      	mov	r1, sl
 8001f9a:	00ca      	lsls	r2, r1, #3
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4642      	mov	r2, r8
 8001fa4:	189b      	adds	r3, r3, r2
 8001fa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8001fa8:	464b      	mov	r3, r9
 8001faa:	460a      	mov	r2, r1
 8001fac:	eb42 0303 	adc.w	r3, r2, r3
 8001fb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	663b      	str	r3, [r7, #96]	; 0x60
 8001fbc:	667a      	str	r2, [r7, #100]	; 0x64
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	f04f 0300 	mov.w	r3, #0
 8001fc6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001fca:	4649      	mov	r1, r9
 8001fcc:	008b      	lsls	r3, r1, #2
 8001fce:	4641      	mov	r1, r8
 8001fd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fd4:	4641      	mov	r1, r8
 8001fd6:	008a      	lsls	r2, r1, #2
 8001fd8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001fdc:	f7fe f8fc 	bl	80001d8 <__aeabi_uldivmod>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <UART_SetConfig+0x4e4>)
 8001fe6:	fba3 1302 	umull	r1, r3, r3, r2
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	2164      	movs	r1, #100	; 0x64
 8001fee:	fb01 f303 	mul.w	r3, r1, r3
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	3332      	adds	r3, #50	; 0x32
 8001ff8:	4a08      	ldr	r2, [pc, #32]	; (800201c <UART_SetConfig+0x4e4>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	f003 020f 	and.w	r2, r3, #15
 8002004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4422      	add	r2, r4
 800200c:	609a      	str	r2, [r3, #8]
}
 800200e:	bf00      	nop
 8002010:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002014:	46bd      	mov	sp, r7
 8002016:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800201a:	bf00      	nop
 800201c:	51eb851f 	.word	0x51eb851f

08002020 <__errno>:
 8002020:	4b01      	ldr	r3, [pc, #4]	; (8002028 <__errno+0x8>)
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	2000000c 	.word	0x2000000c

0800202c <__libc_init_array>:
 800202c:	b570      	push	{r4, r5, r6, lr}
 800202e:	4d0d      	ldr	r5, [pc, #52]	; (8002064 <__libc_init_array+0x38>)
 8002030:	4c0d      	ldr	r4, [pc, #52]	; (8002068 <__libc_init_array+0x3c>)
 8002032:	1b64      	subs	r4, r4, r5
 8002034:	10a4      	asrs	r4, r4, #2
 8002036:	2600      	movs	r6, #0
 8002038:	42a6      	cmp	r6, r4
 800203a:	d109      	bne.n	8002050 <__libc_init_array+0x24>
 800203c:	4d0b      	ldr	r5, [pc, #44]	; (800206c <__libc_init_array+0x40>)
 800203e:	4c0c      	ldr	r4, [pc, #48]	; (8002070 <__libc_init_array+0x44>)
 8002040:	f000 f9a2 	bl	8002388 <_init>
 8002044:	1b64      	subs	r4, r4, r5
 8002046:	10a4      	asrs	r4, r4, #2
 8002048:	2600      	movs	r6, #0
 800204a:	42a6      	cmp	r6, r4
 800204c:	d105      	bne.n	800205a <__libc_init_array+0x2e>
 800204e:	bd70      	pop	{r4, r5, r6, pc}
 8002050:	f855 3b04 	ldr.w	r3, [r5], #4
 8002054:	4798      	blx	r3
 8002056:	3601      	adds	r6, #1
 8002058:	e7ee      	b.n	8002038 <__libc_init_array+0xc>
 800205a:	f855 3b04 	ldr.w	r3, [r5], #4
 800205e:	4798      	blx	r3
 8002060:	3601      	adds	r6, #1
 8002062:	e7f2      	b.n	800204a <__libc_init_array+0x1e>
 8002064:	080023f8 	.word	0x080023f8
 8002068:	080023f8 	.word	0x080023f8
 800206c:	080023f8 	.word	0x080023f8
 8002070:	080023fc 	.word	0x080023fc

08002074 <__itoa>:
 8002074:	1e93      	subs	r3, r2, #2
 8002076:	2b22      	cmp	r3, #34	; 0x22
 8002078:	b510      	push	{r4, lr}
 800207a:	460c      	mov	r4, r1
 800207c:	d904      	bls.n	8002088 <__itoa+0x14>
 800207e:	2300      	movs	r3, #0
 8002080:	700b      	strb	r3, [r1, #0]
 8002082:	461c      	mov	r4, r3
 8002084:	4620      	mov	r0, r4
 8002086:	bd10      	pop	{r4, pc}
 8002088:	2a0a      	cmp	r2, #10
 800208a:	d109      	bne.n	80020a0 <__itoa+0x2c>
 800208c:	2800      	cmp	r0, #0
 800208e:	da07      	bge.n	80020a0 <__itoa+0x2c>
 8002090:	232d      	movs	r3, #45	; 0x2d
 8002092:	700b      	strb	r3, [r1, #0]
 8002094:	4240      	negs	r0, r0
 8002096:	2101      	movs	r1, #1
 8002098:	4421      	add	r1, r4
 800209a:	f000 f925 	bl	80022e8 <__utoa>
 800209e:	e7f1      	b.n	8002084 <__itoa+0x10>
 80020a0:	2100      	movs	r1, #0
 80020a2:	e7f9      	b.n	8002098 <__itoa+0x24>

080020a4 <itoa>:
 80020a4:	f7ff bfe6 	b.w	8002074 <__itoa>

080020a8 <malloc>:
 80020a8:	4b02      	ldr	r3, [pc, #8]	; (80020b4 <malloc+0xc>)
 80020aa:	4601      	mov	r1, r0
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	f000 b87f 	b.w	80021b0 <_malloc_r>
 80020b2:	bf00      	nop
 80020b4:	2000000c 	.word	0x2000000c

080020b8 <free>:
 80020b8:	4b02      	ldr	r3, [pc, #8]	; (80020c4 <free+0xc>)
 80020ba:	4601      	mov	r1, r0
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	f000 b80b 	b.w	80020d8 <_free_r>
 80020c2:	bf00      	nop
 80020c4:	2000000c 	.word	0x2000000c

080020c8 <memset>:
 80020c8:	4402      	add	r2, r0
 80020ca:	4603      	mov	r3, r0
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d100      	bne.n	80020d2 <memset+0xa>
 80020d0:	4770      	bx	lr
 80020d2:	f803 1b01 	strb.w	r1, [r3], #1
 80020d6:	e7f9      	b.n	80020cc <memset+0x4>

080020d8 <_free_r>:
 80020d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80020da:	2900      	cmp	r1, #0
 80020dc:	d044      	beq.n	8002168 <_free_r+0x90>
 80020de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020e2:	9001      	str	r0, [sp, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f1a1 0404 	sub.w	r4, r1, #4
 80020ea:	bfb8      	it	lt
 80020ec:	18e4      	addlt	r4, r4, r3
 80020ee:	f000 f93d 	bl	800236c <__malloc_lock>
 80020f2:	4a1e      	ldr	r2, [pc, #120]	; (800216c <_free_r+0x94>)
 80020f4:	9801      	ldr	r0, [sp, #4]
 80020f6:	6813      	ldr	r3, [r2, #0]
 80020f8:	b933      	cbnz	r3, 8002108 <_free_r+0x30>
 80020fa:	6063      	str	r3, [r4, #4]
 80020fc:	6014      	str	r4, [r2, #0]
 80020fe:	b003      	add	sp, #12
 8002100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002104:	f000 b938 	b.w	8002378 <__malloc_unlock>
 8002108:	42a3      	cmp	r3, r4
 800210a:	d908      	bls.n	800211e <_free_r+0x46>
 800210c:	6825      	ldr	r5, [r4, #0]
 800210e:	1961      	adds	r1, r4, r5
 8002110:	428b      	cmp	r3, r1
 8002112:	bf01      	itttt	eq
 8002114:	6819      	ldreq	r1, [r3, #0]
 8002116:	685b      	ldreq	r3, [r3, #4]
 8002118:	1949      	addeq	r1, r1, r5
 800211a:	6021      	streq	r1, [r4, #0]
 800211c:	e7ed      	b.n	80020fa <_free_r+0x22>
 800211e:	461a      	mov	r2, r3
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	b10b      	cbz	r3, 8002128 <_free_r+0x50>
 8002124:	42a3      	cmp	r3, r4
 8002126:	d9fa      	bls.n	800211e <_free_r+0x46>
 8002128:	6811      	ldr	r1, [r2, #0]
 800212a:	1855      	adds	r5, r2, r1
 800212c:	42a5      	cmp	r5, r4
 800212e:	d10b      	bne.n	8002148 <_free_r+0x70>
 8002130:	6824      	ldr	r4, [r4, #0]
 8002132:	4421      	add	r1, r4
 8002134:	1854      	adds	r4, r2, r1
 8002136:	42a3      	cmp	r3, r4
 8002138:	6011      	str	r1, [r2, #0]
 800213a:	d1e0      	bne.n	80020fe <_free_r+0x26>
 800213c:	681c      	ldr	r4, [r3, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	6053      	str	r3, [r2, #4]
 8002142:	4421      	add	r1, r4
 8002144:	6011      	str	r1, [r2, #0]
 8002146:	e7da      	b.n	80020fe <_free_r+0x26>
 8002148:	d902      	bls.n	8002150 <_free_r+0x78>
 800214a:	230c      	movs	r3, #12
 800214c:	6003      	str	r3, [r0, #0]
 800214e:	e7d6      	b.n	80020fe <_free_r+0x26>
 8002150:	6825      	ldr	r5, [r4, #0]
 8002152:	1961      	adds	r1, r4, r5
 8002154:	428b      	cmp	r3, r1
 8002156:	bf04      	itt	eq
 8002158:	6819      	ldreq	r1, [r3, #0]
 800215a:	685b      	ldreq	r3, [r3, #4]
 800215c:	6063      	str	r3, [r4, #4]
 800215e:	bf04      	itt	eq
 8002160:	1949      	addeq	r1, r1, r5
 8002162:	6021      	streq	r1, [r4, #0]
 8002164:	6054      	str	r4, [r2, #4]
 8002166:	e7ca      	b.n	80020fe <_free_r+0x26>
 8002168:	b003      	add	sp, #12
 800216a:	bd30      	pop	{r4, r5, pc}
 800216c:	200000dc 	.word	0x200000dc

08002170 <sbrk_aligned>:
 8002170:	b570      	push	{r4, r5, r6, lr}
 8002172:	4e0e      	ldr	r6, [pc, #56]	; (80021ac <sbrk_aligned+0x3c>)
 8002174:	460c      	mov	r4, r1
 8002176:	6831      	ldr	r1, [r6, #0]
 8002178:	4605      	mov	r5, r0
 800217a:	b911      	cbnz	r1, 8002182 <sbrk_aligned+0x12>
 800217c:	f000 f88c 	bl	8002298 <_sbrk_r>
 8002180:	6030      	str	r0, [r6, #0]
 8002182:	4621      	mov	r1, r4
 8002184:	4628      	mov	r0, r5
 8002186:	f000 f887 	bl	8002298 <_sbrk_r>
 800218a:	1c43      	adds	r3, r0, #1
 800218c:	d00a      	beq.n	80021a4 <sbrk_aligned+0x34>
 800218e:	1cc4      	adds	r4, r0, #3
 8002190:	f024 0403 	bic.w	r4, r4, #3
 8002194:	42a0      	cmp	r0, r4
 8002196:	d007      	beq.n	80021a8 <sbrk_aligned+0x38>
 8002198:	1a21      	subs	r1, r4, r0
 800219a:	4628      	mov	r0, r5
 800219c:	f000 f87c 	bl	8002298 <_sbrk_r>
 80021a0:	3001      	adds	r0, #1
 80021a2:	d101      	bne.n	80021a8 <sbrk_aligned+0x38>
 80021a4:	f04f 34ff 	mov.w	r4, #4294967295
 80021a8:	4620      	mov	r0, r4
 80021aa:	bd70      	pop	{r4, r5, r6, pc}
 80021ac:	200000e0 	.word	0x200000e0

080021b0 <_malloc_r>:
 80021b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021b4:	1ccd      	adds	r5, r1, #3
 80021b6:	f025 0503 	bic.w	r5, r5, #3
 80021ba:	3508      	adds	r5, #8
 80021bc:	2d0c      	cmp	r5, #12
 80021be:	bf38      	it	cc
 80021c0:	250c      	movcc	r5, #12
 80021c2:	2d00      	cmp	r5, #0
 80021c4:	4607      	mov	r7, r0
 80021c6:	db01      	blt.n	80021cc <_malloc_r+0x1c>
 80021c8:	42a9      	cmp	r1, r5
 80021ca:	d905      	bls.n	80021d8 <_malloc_r+0x28>
 80021cc:	230c      	movs	r3, #12
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	2600      	movs	r6, #0
 80021d2:	4630      	mov	r0, r6
 80021d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021d8:	4e2e      	ldr	r6, [pc, #184]	; (8002294 <_malloc_r+0xe4>)
 80021da:	f000 f8c7 	bl	800236c <__malloc_lock>
 80021de:	6833      	ldr	r3, [r6, #0]
 80021e0:	461c      	mov	r4, r3
 80021e2:	bb34      	cbnz	r4, 8002232 <_malloc_r+0x82>
 80021e4:	4629      	mov	r1, r5
 80021e6:	4638      	mov	r0, r7
 80021e8:	f7ff ffc2 	bl	8002170 <sbrk_aligned>
 80021ec:	1c43      	adds	r3, r0, #1
 80021ee:	4604      	mov	r4, r0
 80021f0:	d14d      	bne.n	800228e <_malloc_r+0xde>
 80021f2:	6834      	ldr	r4, [r6, #0]
 80021f4:	4626      	mov	r6, r4
 80021f6:	2e00      	cmp	r6, #0
 80021f8:	d140      	bne.n	800227c <_malloc_r+0xcc>
 80021fa:	6823      	ldr	r3, [r4, #0]
 80021fc:	4631      	mov	r1, r6
 80021fe:	4638      	mov	r0, r7
 8002200:	eb04 0803 	add.w	r8, r4, r3
 8002204:	f000 f848 	bl	8002298 <_sbrk_r>
 8002208:	4580      	cmp	r8, r0
 800220a:	d13a      	bne.n	8002282 <_malloc_r+0xd2>
 800220c:	6821      	ldr	r1, [r4, #0]
 800220e:	3503      	adds	r5, #3
 8002210:	1a6d      	subs	r5, r5, r1
 8002212:	f025 0503 	bic.w	r5, r5, #3
 8002216:	3508      	adds	r5, #8
 8002218:	2d0c      	cmp	r5, #12
 800221a:	bf38      	it	cc
 800221c:	250c      	movcc	r5, #12
 800221e:	4629      	mov	r1, r5
 8002220:	4638      	mov	r0, r7
 8002222:	f7ff ffa5 	bl	8002170 <sbrk_aligned>
 8002226:	3001      	adds	r0, #1
 8002228:	d02b      	beq.n	8002282 <_malloc_r+0xd2>
 800222a:	6823      	ldr	r3, [r4, #0]
 800222c:	442b      	add	r3, r5
 800222e:	6023      	str	r3, [r4, #0]
 8002230:	e00e      	b.n	8002250 <_malloc_r+0xa0>
 8002232:	6822      	ldr	r2, [r4, #0]
 8002234:	1b52      	subs	r2, r2, r5
 8002236:	d41e      	bmi.n	8002276 <_malloc_r+0xc6>
 8002238:	2a0b      	cmp	r2, #11
 800223a:	d916      	bls.n	800226a <_malloc_r+0xba>
 800223c:	1961      	adds	r1, r4, r5
 800223e:	42a3      	cmp	r3, r4
 8002240:	6025      	str	r5, [r4, #0]
 8002242:	bf18      	it	ne
 8002244:	6059      	strne	r1, [r3, #4]
 8002246:	6863      	ldr	r3, [r4, #4]
 8002248:	bf08      	it	eq
 800224a:	6031      	streq	r1, [r6, #0]
 800224c:	5162      	str	r2, [r4, r5]
 800224e:	604b      	str	r3, [r1, #4]
 8002250:	4638      	mov	r0, r7
 8002252:	f104 060b 	add.w	r6, r4, #11
 8002256:	f000 f88f 	bl	8002378 <__malloc_unlock>
 800225a:	f026 0607 	bic.w	r6, r6, #7
 800225e:	1d23      	adds	r3, r4, #4
 8002260:	1af2      	subs	r2, r6, r3
 8002262:	d0b6      	beq.n	80021d2 <_malloc_r+0x22>
 8002264:	1b9b      	subs	r3, r3, r6
 8002266:	50a3      	str	r3, [r4, r2]
 8002268:	e7b3      	b.n	80021d2 <_malloc_r+0x22>
 800226a:	6862      	ldr	r2, [r4, #4]
 800226c:	42a3      	cmp	r3, r4
 800226e:	bf0c      	ite	eq
 8002270:	6032      	streq	r2, [r6, #0]
 8002272:	605a      	strne	r2, [r3, #4]
 8002274:	e7ec      	b.n	8002250 <_malloc_r+0xa0>
 8002276:	4623      	mov	r3, r4
 8002278:	6864      	ldr	r4, [r4, #4]
 800227a:	e7b2      	b.n	80021e2 <_malloc_r+0x32>
 800227c:	4634      	mov	r4, r6
 800227e:	6876      	ldr	r6, [r6, #4]
 8002280:	e7b9      	b.n	80021f6 <_malloc_r+0x46>
 8002282:	230c      	movs	r3, #12
 8002284:	603b      	str	r3, [r7, #0]
 8002286:	4638      	mov	r0, r7
 8002288:	f000 f876 	bl	8002378 <__malloc_unlock>
 800228c:	e7a1      	b.n	80021d2 <_malloc_r+0x22>
 800228e:	6025      	str	r5, [r4, #0]
 8002290:	e7de      	b.n	8002250 <_malloc_r+0xa0>
 8002292:	bf00      	nop
 8002294:	200000dc 	.word	0x200000dc

08002298 <_sbrk_r>:
 8002298:	b538      	push	{r3, r4, r5, lr}
 800229a:	4d06      	ldr	r5, [pc, #24]	; (80022b4 <_sbrk_r+0x1c>)
 800229c:	2300      	movs	r3, #0
 800229e:	4604      	mov	r4, r0
 80022a0:	4608      	mov	r0, r1
 80022a2:	602b      	str	r3, [r5, #0]
 80022a4:	f7fe fa62 	bl	800076c <_sbrk>
 80022a8:	1c43      	adds	r3, r0, #1
 80022aa:	d102      	bne.n	80022b2 <_sbrk_r+0x1a>
 80022ac:	682b      	ldr	r3, [r5, #0]
 80022ae:	b103      	cbz	r3, 80022b2 <_sbrk_r+0x1a>
 80022b0:	6023      	str	r3, [r4, #0]
 80022b2:	bd38      	pop	{r3, r4, r5, pc}
 80022b4:	200000e4 	.word	0x200000e4

080022b8 <strcat>:
 80022b8:	b510      	push	{r4, lr}
 80022ba:	4602      	mov	r2, r0
 80022bc:	7814      	ldrb	r4, [r2, #0]
 80022be:	4613      	mov	r3, r2
 80022c0:	3201      	adds	r2, #1
 80022c2:	2c00      	cmp	r4, #0
 80022c4:	d1fa      	bne.n	80022bc <strcat+0x4>
 80022c6:	3b01      	subs	r3, #1
 80022c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80022cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80022d0:	2a00      	cmp	r2, #0
 80022d2:	d1f9      	bne.n	80022c8 <strcat+0x10>
 80022d4:	bd10      	pop	{r4, pc}

080022d6 <strcpy>:
 80022d6:	4603      	mov	r3, r0
 80022d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80022dc:	f803 2b01 	strb.w	r2, [r3], #1
 80022e0:	2a00      	cmp	r2, #0
 80022e2:	d1f9      	bne.n	80022d8 <strcpy+0x2>
 80022e4:	4770      	bx	lr
	...

080022e8 <__utoa>:
 80022e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ea:	4c1f      	ldr	r4, [pc, #124]	; (8002368 <__utoa+0x80>)
 80022ec:	b08b      	sub	sp, #44	; 0x2c
 80022ee:	4605      	mov	r5, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	466e      	mov	r6, sp
 80022f4:	f104 0c20 	add.w	ip, r4, #32
 80022f8:	6820      	ldr	r0, [r4, #0]
 80022fa:	6861      	ldr	r1, [r4, #4]
 80022fc:	4637      	mov	r7, r6
 80022fe:	c703      	stmia	r7!, {r0, r1}
 8002300:	3408      	adds	r4, #8
 8002302:	4564      	cmp	r4, ip
 8002304:	463e      	mov	r6, r7
 8002306:	d1f7      	bne.n	80022f8 <__utoa+0x10>
 8002308:	7921      	ldrb	r1, [r4, #4]
 800230a:	7139      	strb	r1, [r7, #4]
 800230c:	1e91      	subs	r1, r2, #2
 800230e:	6820      	ldr	r0, [r4, #0]
 8002310:	6038      	str	r0, [r7, #0]
 8002312:	2922      	cmp	r1, #34	; 0x22
 8002314:	f04f 0100 	mov.w	r1, #0
 8002318:	d904      	bls.n	8002324 <__utoa+0x3c>
 800231a:	7019      	strb	r1, [r3, #0]
 800231c:	460b      	mov	r3, r1
 800231e:	4618      	mov	r0, r3
 8002320:	b00b      	add	sp, #44	; 0x2c
 8002322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002324:	1e58      	subs	r0, r3, #1
 8002326:	4684      	mov	ip, r0
 8002328:	fbb5 f7f2 	udiv	r7, r5, r2
 800232c:	fb02 5617 	mls	r6, r2, r7, r5
 8002330:	3628      	adds	r6, #40	; 0x28
 8002332:	446e      	add	r6, sp
 8002334:	460c      	mov	r4, r1
 8002336:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800233a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800233e:	462e      	mov	r6, r5
 8002340:	42b2      	cmp	r2, r6
 8002342:	f101 0101 	add.w	r1, r1, #1
 8002346:	463d      	mov	r5, r7
 8002348:	d9ee      	bls.n	8002328 <__utoa+0x40>
 800234a:	2200      	movs	r2, #0
 800234c:	545a      	strb	r2, [r3, r1]
 800234e:	1919      	adds	r1, r3, r4
 8002350:	1aa5      	subs	r5, r4, r2
 8002352:	42aa      	cmp	r2, r5
 8002354:	dae3      	bge.n	800231e <__utoa+0x36>
 8002356:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800235a:	780e      	ldrb	r6, [r1, #0]
 800235c:	7006      	strb	r6, [r0, #0]
 800235e:	3201      	adds	r2, #1
 8002360:	f801 5901 	strb.w	r5, [r1], #-1
 8002364:	e7f4      	b.n	8002350 <__utoa+0x68>
 8002366:	bf00      	nop
 8002368:	080023c8 	.word	0x080023c8

0800236c <__malloc_lock>:
 800236c:	4801      	ldr	r0, [pc, #4]	; (8002374 <__malloc_lock+0x8>)
 800236e:	f000 b809 	b.w	8002384 <__retarget_lock_acquire_recursive>
 8002372:	bf00      	nop
 8002374:	200000e8 	.word	0x200000e8

08002378 <__malloc_unlock>:
 8002378:	4801      	ldr	r0, [pc, #4]	; (8002380 <__malloc_unlock+0x8>)
 800237a:	f000 b804 	b.w	8002386 <__retarget_lock_release_recursive>
 800237e:	bf00      	nop
 8002380:	200000e8 	.word	0x200000e8

08002384 <__retarget_lock_acquire_recursive>:
 8002384:	4770      	bx	lr

08002386 <__retarget_lock_release_recursive>:
 8002386:	4770      	bx	lr

08002388 <_init>:
 8002388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800238a:	bf00      	nop
 800238c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800238e:	bc08      	pop	{r3}
 8002390:	469e      	mov	lr, r3
 8002392:	4770      	bx	lr

08002394 <_fini>:
 8002394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002396:	bf00      	nop
 8002398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800239a:	bc08      	pop	{r3}
 800239c:	469e      	mov	lr, r3
 800239e:	4770      	bx	lr
