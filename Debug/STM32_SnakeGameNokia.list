
STM32_SnakeGameNokia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003804  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003994  08003994  00013994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a14  08003a14  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003a14  08003a14  00013a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a1c  08003a1c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a1c  08003a1c  00013a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a20  08003a20  00013a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004034  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200040a8  200040a8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cebf  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024bf  00000000  00000000  0002cf63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b40  00000000  00000000  0002f428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a38  00000000  00000000  0002ff68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022130  00000000  00000000  000309a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f1d9  00000000  00000000  00052ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb5fa  00000000  00000000  00061ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d2a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ea4  00000000  00000000  0012d2f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800397c 	.word	0x0800397c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800397c 	.word	0x0800397c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <vApplicationGetIdleTaskMemory+0x30>)
 80004fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	200000a4 	.word	0x200000a4
 8000514:	200000f8 	.word	0x200000f8

08000518 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000518:	b5b0      	push	{r4, r5, r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  //Variables initialization
  ledCounter = 0;
 800051e:	4b1b      	ldr	r3, [pc, #108]	; (800058c <MX_FREERTOS_Init+0x74>)
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
  testStr = malloc(sizeof(char)*16);
 8000524:	2010      	movs	r0, #16
 8000526:	f003 f8b9 	bl	800369c <malloc>
 800052a:	4603      	mov	r3, r0
 800052c:	461a      	mov	r2, r3
 800052e:	4b18      	ldr	r3, [pc, #96]	; (8000590 <MX_FREERTOS_Init+0x78>)
 8000530:	601a      	str	r2, [r3, #0]
  testStrCat = malloc(sizeof(char)*32);
 8000532:	2020      	movs	r0, #32
 8000534:	f003 f8b2 	bl	800369c <malloc>
 8000538:	4603      	mov	r3, r0
 800053a:	461a      	mov	r2, r3
 800053c:	4b15      	ldr	r3, [pc, #84]	; (8000594 <MX_FREERTOS_Init+0x7c>)
 800053e:	601a      	str	r2, [r3, #0]
  numberStr = malloc(sizeof(char)*32);
 8000540:	2020      	movs	r0, #32
 8000542:	f003 f8ab 	bl	800369c <malloc>
 8000546:	4603      	mov	r3, r0
 8000548:	461a      	mov	r2, r3
 800054a:	4b13      	ldr	r3, [pc, #76]	; (8000598 <MX_FREERTOS_Init+0x80>)
 800054c:	601a      	str	r2, [r3, #0]

  strcpy(testStr,"TestStr ");
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <MX_FREERTOS_Init+0x78>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4912      	ldr	r1, [pc, #72]	; (800059c <MX_FREERTOS_Init+0x84>)
 8000554:	461a      	mov	r2, r3
 8000556:	460b      	mov	r3, r1
 8000558:	cb03      	ldmia	r3!, {r0, r1}
 800055a:	6010      	str	r0, [r2, #0]
 800055c:	6051      	str	r1, [r2, #4]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	7213      	strb	r3, [r2, #8]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <MX_FREERTOS_Init+0x88>)
 8000564:	1d3c      	adds	r4, r7, #4
 8000566:	461d      	mov	r5, r3
 8000568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000570:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2100      	movs	r1, #0
 8000578:	4618      	mov	r0, r3
 800057a:	f001 fdb8 	bl	80020ee <osThreadCreate>
 800057e:	4603      	mov	r3, r0
 8000580:	4a08      	ldr	r2, [pc, #32]	; (80005a4 <MX_FREERTOS_Init+0x8c>)
 8000582:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000584:	bf00      	nop
 8000586:	3720      	adds	r7, #32
 8000588:	46bd      	mov	sp, r7
 800058a:	bdb0      	pop	{r4, r5, r7, pc}
 800058c:	2000009c 	.word	0x2000009c
 8000590:	20000090 	.word	0x20000090
 8000594:	20000094 	.word	0x20000094
 8000598:	20000098 	.word	0x20000098
 800059c:	080039a0 	.word	0x080039a0
 80005a0:	080039ac 	.word	0x080039ac
 80005a4:	200000a0 	.word	0x200000a0

080005a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	  //Print Message + Counter
	  itoa(ledCounter,numberStr,10);
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <StartDefaultTask+0x7c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <StartDefaultTask+0x80>)
 80005b6:	6811      	ldr	r1, [r2, #0]
 80005b8:	220a      	movs	r2, #10
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 f86c 	bl	8003698 <itoa>
	  strcpy(testStrCat,testStr);
 80005c0:	4b1a      	ldr	r3, [pc, #104]	; (800062c <StartDefaultTask+0x84>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a1a      	ldr	r2, [pc, #104]	; (8000630 <StartDefaultTask+0x88>)
 80005c6:	6812      	ldr	r2, [r2, #0]
 80005c8:	4611      	mov	r1, r2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 f97d 	bl	80038ca <strcpy>
	  strcat(testStrCat, numberStr);
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <StartDefaultTask+0x84>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a14      	ldr	r2, [pc, #80]	; (8000628 <StartDefaultTask+0x80>)
 80005d6:	6812      	ldr	r2, [r2, #0]
 80005d8:	4611      	mov	r1, r2
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 f966 	bl	80038ac <strcat>
	  USART2_sendString( testStrCat );
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <StartDefaultTask+0x84>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 ffcf 	bl	8003588 <USART2_sendString>

	  //Toggle LED
	  if(ledCounter > 200){
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <StartDefaultTask+0x7c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2bc8      	cmp	r3, #200	; 0xc8
 80005f0:	dd07      	ble.n	8000602 <StartDefaultTask+0x5a>
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80005f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f6:	480f      	ldr	r0, [pc, #60]	; (8000634 <StartDefaultTask+0x8c>)
 80005f8:	f000 fd25 	bl	8001046 <HAL_GPIO_TogglePin>
		  ledCounter=0;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <StartDefaultTask+0x7c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
	  }

	  ledCounter++;
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <StartDefaultTask+0x7c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <StartDefaultTask+0x7c>)
 800060a:	6013      	str	r3, [r2, #0]
	  osDelay(1);
 800060c:	2001      	movs	r0, #1
 800060e:	f001 fdba 	bl	8002186 <osDelay>
	  taskYIELD();
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <StartDefaultTask+0x90>)
 8000614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	f3bf 8f4f 	dsb	sy
 800061e:	f3bf 8f6f 	isb	sy
	  itoa(ledCounter,numberStr,10);
 8000622:	e7c5      	b.n	80005b0 <StartDefaultTask+0x8>
 8000624:	2000009c 	.word	0x2000009c
 8000628:	20000098 	.word	0x20000098
 800062c:	20000094 	.word	0x20000094
 8000630:	20000090 	.word	0x20000090
 8000634:	40021400 	.word	0x40021400
 8000638:	e000ed04 	.word	0xe000ed04

0800063c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	4b19      	ldr	r3, [pc, #100]	; (80006bc <MX_GPIO_Init+0x80>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a18      	ldr	r2, [pc, #96]	; (80006bc <MX_GPIO_Init+0x80>)
 800065c:	f043 0320 	orr.w	r3, r3, #32
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b16      	ldr	r3, [pc, #88]	; (80006bc <MX_GPIO_Init+0x80>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0320 	and.w	r3, r3, #32
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_GPIO_Init+0x80>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a11      	ldr	r2, [pc, #68]	; (80006bc <MX_GPIO_Init+0x80>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_GPIO_Init+0x80>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000690:	480b      	ldr	r0, [pc, #44]	; (80006c0 <MX_GPIO_Init+0x84>)
 8000692:	f000 fcbf 	bl	8001014 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000696:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800069a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	4619      	mov	r1, r3
 80006ae:	4804      	ldr	r0, [pc, #16]	; (80006c0 <MX_GPIO_Init+0x84>)
 80006b0:	f000 fb14 	bl	8000cdc <HAL_GPIO_Init>

}
 80006b4:	bf00      	nop
 80006b6:	3720      	adds	r7, #32
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40021400 	.word	0x40021400

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c8:	f000 f9b0 	bl	8000a2c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006cc:	f000 f80a 	bl	80006e4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d0:	f7ff ffb4 	bl	800063c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006d4:	f000 f90e 	bl	80008f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80006d8:	f7ff ff1e 	bl	8000518 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80006dc:	f001 fd00 	bl	80020e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {}
 80006e0:	e7fe      	b.n	80006e0 <main+0x1c>
	...

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	; 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	2230      	movs	r2, #48	; 0x30
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 ffe2 	bl	80036bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <SystemClock_Config+0xcc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	4a27      	ldr	r2, [pc, #156]	; (80007b0 <SystemClock_Config+0xcc>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	; 0x40
 8000718:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <SystemClock_Config+0xcc>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <SystemClock_Config+0xd0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <SystemClock_Config+0xd0>)
 800072e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <SystemClock_Config+0xd0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000740:	2302      	movs	r3, #2
 8000742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000748:	2310      	movs	r3, #16
 800074a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074c:	2302      	movs	r3, #2
 800074e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000750:	2300      	movs	r3, #0
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000754:	2308      	movs	r3, #8
 8000756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000758:	23c0      	movs	r3, #192	; 0xc0
 800075a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800075c:	2304      	movs	r3, #4
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000760:	2304      	movs	r3, #4
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 0320 	add.w	r3, r7, #32
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fc87 	bl	800107c <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000774:	f000 f820 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	2302      	movs	r3, #2
 800077e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000784:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000788:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2103      	movs	r1, #3
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fee8 	bl	800156c <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007a2:	f000 f809 	bl	80007b8 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3750      	adds	r7, #80	; 0x50
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <Error_Handler+0x8>
	...

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <HAL_MspInit+0x54>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	4a11      	ldr	r2, [pc, #68]	; (8000818 <HAL_MspInit+0x54>)
 80007d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d8:	6453      	str	r3, [r2, #68]	; 0x44
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <HAL_MspInit+0x54>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <HAL_MspInit+0x54>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <HAL_MspInit+0x54>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	6413      	str	r3, [r2, #64]	; 0x40
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <HAL_MspInit+0x54>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	210f      	movs	r1, #15
 8000806:	f06f 0001 	mvn.w	r0, #1
 800080a:	f000 fa3e 	bl	8000c8a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <NMI_Handler+0x4>

08000822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <MemManage_Handler+0x4>

0800082e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler+0x4>

0800083a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084c:	f000 f940 	bl	8000ad0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000850:	f002 fe16 	bl	8003480 <xTaskGetSchedulerState>
 8000854:	4603      	mov	r3, r0
 8000856:	2b01      	cmp	r3, #1
 8000858:	d001      	beq.n	800085e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800085a:	f002 f905 	bl	8002a68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800086c:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <_sbrk+0x5c>)
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <_sbrk+0x60>)
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <_sbrk+0x64>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d102      	bne.n	8000886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <_sbrk+0x64>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <_sbrk+0x68>)
 8000884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <_sbrk+0x64>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	429a      	cmp	r2, r3
 8000892:	d207      	bcs.n	80008a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000894:	f002 febe 	bl	8003614 <__errno>
 8000898:	4603      	mov	r3, r0
 800089a:	220c      	movs	r2, #12
 800089c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
 80008a2:	e009      	b.n	80008b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <_sbrk+0x64>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <_sbrk+0x64>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <_sbrk+0x64>)
 80008b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008b6:	68fb      	ldr	r3, [r7, #12]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20020000 	.word	0x20020000
 80008c4:	00000400 	.word	0x00000400
 80008c8:	200002f8 	.word	0x200002f8
 80008cc:	200040a8 	.word	0x200040a8

080008d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <SystemInit+0x20>)
 80008d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008da:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <SystemInit+0x20>)
 80008dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <MX_USART2_UART_Init+0x50>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000900:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000904:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000926:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800092a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 800092e:	f000 fffd 	bl	800192c <HAL_UART_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000938:	f7ff ff3e 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	200002fc 	.word	0x200002fc
 8000944:	40004400 	.word	0x40004400

08000948 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	; 0x28
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a19      	ldr	r2, [pc, #100]	; (80009cc <HAL_UART_MspInit+0x84>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d12b      	bne.n	80009c2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <HAL_UART_MspInit+0x88>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <HAL_UART_MspInit+0x88>)
 8000974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <HAL_UART_MspInit+0x88>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <HAL_UART_MspInit+0x88>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a10      	ldr	r2, [pc, #64]	; (80009d0 <HAL_UART_MspInit+0x88>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <HAL_UART_MspInit+0x88>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009a2:	230c      	movs	r3, #12
 80009a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ae:	2303      	movs	r3, #3
 80009b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009b2:	2307      	movs	r3, #7
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <HAL_UART_MspInit+0x8c>)
 80009be:	f000 f98d 	bl	8000cdc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009c2:	bf00      	nop
 80009c4:	3728      	adds	r7, #40	; 0x28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40004400 	.word	0x40004400
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020000 	.word	0x40020000

080009d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009de:	490e      	ldr	r1, [pc, #56]	; (8000a18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009e0:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e4:	e002      	b.n	80009ec <LoopCopyDataInit>

080009e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ea:	3304      	adds	r3, #4

080009ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f0:	d3f9      	bcc.n	80009e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f2:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009f4:	4c0b      	ldr	r4, [pc, #44]	; (8000a24 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f8:	e001      	b.n	80009fe <LoopFillZerobss>

080009fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009fc:	3204      	adds	r2, #4

080009fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a00:	d3fb      	bcc.n	80009fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a02:	f7ff ff65 	bl	80008d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a06:	f002 fe0b 	bl	8003620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a0a:	f7ff fe5b 	bl	80006c4 <main>
  bx  lr    
 8000a0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a18:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a1c:	08003a24 	.word	0x08003a24
  ldr r2, =_sbss
 8000a20:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a24:	200040a8 	.word	0x200040a8

08000a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC_IRQHandler>
	...

08000a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a30:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0d      	ldr	r2, [pc, #52]	; (8000a6c <HAL_Init+0x40>)
 8000a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <HAL_Init+0x40>)
 8000a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <HAL_Init+0x40>)
 8000a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 f90d 	bl	8000c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5a:	200f      	movs	r0, #15
 8000a5c:	f000 f808 	bl	8000a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a60:	f7ff feb0 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023c00 	.word	0x40023c00

08000a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_InitTick+0x54>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_InitTick+0x58>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f917 	bl	8000cc2 <HAL_SYSTICK_Config>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00e      	b.n	8000abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b0f      	cmp	r3, #15
 8000aa2:	d80a      	bhi.n	8000aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f000 f8ed 	bl	8000c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab0:	4a06      	ldr	r2, [pc, #24]	; (8000acc <HAL_InitTick+0x5c>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e000      	b.n	8000abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	20000004 	.word	0x20000004

08000ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_IncTick+0x20>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x24>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_IncTick+0x24>)
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000340 	.word	0x20000340

08000af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <HAL_GetTick+0x14>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000340 	.word	0x20000340

08000b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b42:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	60d3      	str	r3, [r2, #12]
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <__NVIC_GetPriorityGrouping+0x18>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	f003 0307 	and.w	r3, r3, #7
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db0a      	blt.n	8000b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	490c      	ldr	r1, [pc, #48]	; (8000bc0 <__NVIC_SetPriority+0x4c>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	0112      	lsls	r2, r2, #4
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	440b      	add	r3, r1
 8000b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b9c:	e00a      	b.n	8000bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4908      	ldr	r1, [pc, #32]	; (8000bc4 <__NVIC_SetPriority+0x50>)
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	3b04      	subs	r3, #4
 8000bac:	0112      	lsls	r2, r2, #4
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	761a      	strb	r2, [r3, #24]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000e100 	.word	0xe000e100
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	; 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f1c3 0307 	rsb	r3, r3, #7
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	bf28      	it	cs
 8000be6:	2304      	movcs	r3, #4
 8000be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3304      	adds	r3, #4
 8000bee:	2b06      	cmp	r3, #6
 8000bf0:	d902      	bls.n	8000bf8 <NVIC_EncodePriority+0x30>
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	e000      	b.n	8000bfa <NVIC_EncodePriority+0x32>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43da      	mvns	r2, r3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c10:	f04f 31ff 	mov.w	r1, #4294967295
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43d9      	mvns	r1, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	4313      	orrs	r3, r2
         );
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3724      	adds	r7, #36	; 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c40:	d301      	bcc.n	8000c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00f      	b.n	8000c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <SysTick_Config+0x40>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4e:	210f      	movs	r1, #15
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f7ff ff8e 	bl	8000b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <SysTick_Config+0x40>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <SysTick_Config+0x40>)
 8000c60:	2207      	movs	r2, #7
 8000c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	e000e010 	.word	0xe000e010

08000c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ff47 	bl	8000b10 <__NVIC_SetPriorityGrouping>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
 8000c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c9c:	f7ff ff5c 	bl	8000b58 <__NVIC_GetPriorityGrouping>
 8000ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	68b9      	ldr	r1, [r7, #8]
 8000ca6:	6978      	ldr	r0, [r7, #20]
 8000ca8:	f7ff ff8e 	bl	8000bc8 <NVIC_EncodePriority>
 8000cac:	4602      	mov	r2, r0
 8000cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff5d 	bl	8000b74 <__NVIC_SetPriority>
}
 8000cba:	bf00      	nop
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ffb0 	bl	8000c30 <SysTick_Config>
 8000cd0:	4603      	mov	r3, r0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	; 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
 8000cf6:	e16b      	b.n	8000fd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f040 815a 	bne.w	8000fca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 0303 	and.w	r3, r3, #3
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d005      	beq.n	8000d2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d130      	bne.n	8000d90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	2203      	movs	r2, #3
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4013      	ands	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	68da      	ldr	r2, [r3, #12]
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d64:	2201      	movs	r2, #1
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	091b      	lsrs	r3, r3, #4
 8000d7a:	f003 0201 	and.w	r2, r3, #1
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d017      	beq.n	8000dcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	2203      	movs	r2, #3
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	689a      	ldr	r2, [r3, #8]
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d123      	bne.n	8000e20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	08da      	lsrs	r2, r3, #3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3208      	adds	r2, #8
 8000de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	f003 0307 	and.w	r3, r3, #7
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	220f      	movs	r2, #15
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	691a      	ldr	r2, [r3, #16]
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	08da      	lsrs	r2, r3, #3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3208      	adds	r2, #8
 8000e1a:	69b9      	ldr	r1, [r7, #24]
 8000e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0203 	and.w	r2, r3, #3
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	f000 80b4 	beq.w	8000fca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b60      	ldr	r3, [pc, #384]	; (8000fe8 <HAL_GPIO_Init+0x30c>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	4a5f      	ldr	r2, [pc, #380]	; (8000fe8 <HAL_GPIO_Init+0x30c>)
 8000e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e70:	6453      	str	r3, [r2, #68]	; 0x44
 8000e72:	4b5d      	ldr	r3, [pc, #372]	; (8000fe8 <HAL_GPIO_Init+0x30c>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e7e:	4a5b      	ldr	r2, [pc, #364]	; (8000fec <HAL_GPIO_Init+0x310>)
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	089b      	lsrs	r3, r3, #2
 8000e84:	3302      	adds	r3, #2
 8000e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f003 0303 	and.w	r3, r3, #3
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	220f      	movs	r2, #15
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a52      	ldr	r2, [pc, #328]	; (8000ff0 <HAL_GPIO_Init+0x314>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d02b      	beq.n	8000f02 <HAL_GPIO_Init+0x226>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a51      	ldr	r2, [pc, #324]	; (8000ff4 <HAL_GPIO_Init+0x318>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d025      	beq.n	8000efe <HAL_GPIO_Init+0x222>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a50      	ldr	r2, [pc, #320]	; (8000ff8 <HAL_GPIO_Init+0x31c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d01f      	beq.n	8000efa <HAL_GPIO_Init+0x21e>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a4f      	ldr	r2, [pc, #316]	; (8000ffc <HAL_GPIO_Init+0x320>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d019      	beq.n	8000ef6 <HAL_GPIO_Init+0x21a>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a4e      	ldr	r2, [pc, #312]	; (8001000 <HAL_GPIO_Init+0x324>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d013      	beq.n	8000ef2 <HAL_GPIO_Init+0x216>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a4d      	ldr	r2, [pc, #308]	; (8001004 <HAL_GPIO_Init+0x328>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d00d      	beq.n	8000eee <HAL_GPIO_Init+0x212>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a4c      	ldr	r2, [pc, #304]	; (8001008 <HAL_GPIO_Init+0x32c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d007      	beq.n	8000eea <HAL_GPIO_Init+0x20e>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a4b      	ldr	r2, [pc, #300]	; (800100c <HAL_GPIO_Init+0x330>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d101      	bne.n	8000ee6 <HAL_GPIO_Init+0x20a>
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	e00e      	b.n	8000f04 <HAL_GPIO_Init+0x228>
 8000ee6:	2308      	movs	r3, #8
 8000ee8:	e00c      	b.n	8000f04 <HAL_GPIO_Init+0x228>
 8000eea:	2306      	movs	r3, #6
 8000eec:	e00a      	b.n	8000f04 <HAL_GPIO_Init+0x228>
 8000eee:	2305      	movs	r3, #5
 8000ef0:	e008      	b.n	8000f04 <HAL_GPIO_Init+0x228>
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	e006      	b.n	8000f04 <HAL_GPIO_Init+0x228>
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e004      	b.n	8000f04 <HAL_GPIO_Init+0x228>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e002      	b.n	8000f04 <HAL_GPIO_Init+0x228>
 8000efe:	2301      	movs	r3, #1
 8000f00:	e000      	b.n	8000f04 <HAL_GPIO_Init+0x228>
 8000f02:	2300      	movs	r3, #0
 8000f04:	69fa      	ldr	r2, [r7, #28]
 8000f06:	f002 0203 	and.w	r2, r2, #3
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	4093      	lsls	r3, r2
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f14:	4935      	ldr	r1, [pc, #212]	; (8000fec <HAL_GPIO_Init+0x310>)
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f22:	4b3b      	ldr	r3, [pc, #236]	; (8001010 <HAL_GPIO_Init+0x334>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f46:	4a32      	ldr	r2, [pc, #200]	; (8001010 <HAL_GPIO_Init+0x334>)
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f4c:	4b30      	ldr	r3, [pc, #192]	; (8001010 <HAL_GPIO_Init+0x334>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f70:	4a27      	ldr	r2, [pc, #156]	; (8001010 <HAL_GPIO_Init+0x334>)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f76:	4b26      	ldr	r3, [pc, #152]	; (8001010 <HAL_GPIO_Init+0x334>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f9a:	4a1d      	ldr	r2, [pc, #116]	; (8001010 <HAL_GPIO_Init+0x334>)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <HAL_GPIO_Init+0x334>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fc4:	4a12      	ldr	r2, [pc, #72]	; (8001010 <HAL_GPIO_Init+0x334>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	61fb      	str	r3, [r7, #28]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	2b0f      	cmp	r3, #15
 8000fd4:	f67f ae90 	bls.w	8000cf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3724      	adds	r7, #36	; 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40013800 	.word	0x40013800
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	40020400 	.word	0x40020400
 8000ff8:	40020800 	.word	0x40020800
 8000ffc:	40020c00 	.word	0x40020c00
 8001000:	40021000 	.word	0x40021000
 8001004:	40021400 	.word	0x40021400
 8001008:	40021800 	.word	0x40021800
 800100c:	40021c00 	.word	0x40021c00
 8001010:	40013c00 	.word	0x40013c00

08001014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	807b      	strh	r3, [r7, #2]
 8001020:	4613      	mov	r3, r2
 8001022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001024:	787b      	ldrb	r3, [r7, #1]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800102a:	887a      	ldrh	r2, [r7, #2]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001030:	e003      	b.n	800103a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001032:	887b      	ldrh	r3, [r7, #2]
 8001034:	041a      	lsls	r2, r3, #16
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	619a      	str	r2, [r3, #24]
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001046:	b480      	push	{r7}
 8001048:	b085      	sub	sp, #20
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
 800104e:	460b      	mov	r3, r1
 8001050:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001058:	887a      	ldrh	r2, [r7, #2]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4013      	ands	r3, r2
 800105e:	041a      	lsls	r2, r3, #16
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43d9      	mvns	r1, r3
 8001064:	887b      	ldrh	r3, [r7, #2]
 8001066:	400b      	ands	r3, r1
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	619a      	str	r2, [r3, #24]
}
 800106e:	bf00      	nop
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e267      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	d075      	beq.n	8001186 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800109a:	4b88      	ldr	r3, [pc, #544]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 030c 	and.w	r3, r3, #12
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	d00c      	beq.n	80010c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010a6:	4b85      	ldr	r3, [pc, #532]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ae:	2b08      	cmp	r3, #8
 80010b0:	d112      	bne.n	80010d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010b2:	4b82      	ldr	r3, [pc, #520]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010be:	d10b      	bne.n	80010d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c0:	4b7e      	ldr	r3, [pc, #504]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d05b      	beq.n	8001184 <HAL_RCC_OscConfig+0x108>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d157      	bne.n	8001184 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e242      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e0:	d106      	bne.n	80010f0 <HAL_RCC_OscConfig+0x74>
 80010e2:	4b76      	ldr	r3, [pc, #472]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a75      	ldr	r2, [pc, #468]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 80010e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	e01d      	b.n	800112c <HAL_RCC_OscConfig+0xb0>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f8:	d10c      	bne.n	8001114 <HAL_RCC_OscConfig+0x98>
 80010fa:	4b70      	ldr	r3, [pc, #448]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a6f      	ldr	r2, [pc, #444]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 8001100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	4b6d      	ldr	r3, [pc, #436]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a6c      	ldr	r2, [pc, #432]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 800110c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	e00b      	b.n	800112c <HAL_RCC_OscConfig+0xb0>
 8001114:	4b69      	ldr	r3, [pc, #420]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a68      	ldr	r2, [pc, #416]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 800111a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b66      	ldr	r3, [pc, #408]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a65      	ldr	r2, [pc, #404]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 8001126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d013      	beq.n	800115c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff fce0 	bl	8000af8 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800113c:	f7ff fcdc 	bl	8000af8 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b64      	cmp	r3, #100	; 0x64
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e207      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114e:	4b5b      	ldr	r3, [pc, #364]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f0      	beq.n	800113c <HAL_RCC_OscConfig+0xc0>
 800115a:	e014      	b.n	8001186 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fccc 	bl	8000af8 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff fcc8 	bl	8000af8 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b64      	cmp	r3, #100	; 0x64
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e1f3      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001176:	4b51      	ldr	r3, [pc, #324]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f0      	bne.n	8001164 <HAL_RCC_OscConfig+0xe8>
 8001182:	e000      	b.n	8001186 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d063      	beq.n	800125a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001192:	4b4a      	ldr	r3, [pc, #296]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00b      	beq.n	80011b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800119e:	4b47      	ldr	r3, [pc, #284]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d11c      	bne.n	80011e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011aa:	4b44      	ldr	r3, [pc, #272]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d116      	bne.n	80011e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b6:	4b41      	ldr	r3, [pc, #260]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d005      	beq.n	80011ce <HAL_RCC_OscConfig+0x152>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d001      	beq.n	80011ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e1c7      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ce:	4b3b      	ldr	r3, [pc, #236]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	4937      	ldr	r1, [pc, #220]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e2:	e03a      	b.n	800125a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d020      	beq.n	800122e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ec:	4b34      	ldr	r3, [pc, #208]	; (80012c0 <HAL_RCC_OscConfig+0x244>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f2:	f7ff fc81 	bl	8000af8 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011fa:	f7ff fc7d 	bl	8000af8 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e1a8      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120c:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f0      	beq.n	80011fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001218:	4b28      	ldr	r3, [pc, #160]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4925      	ldr	r1, [pc, #148]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 8001228:	4313      	orrs	r3, r2
 800122a:	600b      	str	r3, [r1, #0]
 800122c:	e015      	b.n	800125a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800122e:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <HAL_RCC_OscConfig+0x244>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001234:	f7ff fc60 	bl	8000af8 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800123c:	f7ff fc5c 	bl	8000af8 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e187      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124e:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f0      	bne.n	800123c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	d036      	beq.n	80012d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d016      	beq.n	800129c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <HAL_RCC_OscConfig+0x248>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001274:	f7ff fc40 	bl	8000af8 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800127c:	f7ff fc3c 	bl	8000af8 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e167      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_RCC_OscConfig+0x240>)
 8001290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f0      	beq.n	800127c <HAL_RCC_OscConfig+0x200>
 800129a:	e01b      	b.n	80012d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_RCC_OscConfig+0x248>)
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a2:	f7ff fc29 	bl	8000af8 <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a8:	e00e      	b.n	80012c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012aa:	f7ff fc25 	bl	8000af8 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d907      	bls.n	80012c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e150      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
 80012bc:	40023800 	.word	0x40023800
 80012c0:	42470000 	.word	0x42470000
 80012c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c8:	4b88      	ldr	r3, [pc, #544]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 80012ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1ea      	bne.n	80012aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 8097 	beq.w	8001410 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e6:	4b81      	ldr	r3, [pc, #516]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10f      	bne.n	8001312 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	4b7d      	ldr	r3, [pc, #500]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	4a7c      	ldr	r2, [pc, #496]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001300:	6413      	str	r3, [r2, #64]	; 0x40
 8001302:	4b7a      	ldr	r3, [pc, #488]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800130e:	2301      	movs	r3, #1
 8001310:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001312:	4b77      	ldr	r3, [pc, #476]	; (80014f0 <HAL_RCC_OscConfig+0x474>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131a:	2b00      	cmp	r3, #0
 800131c:	d118      	bne.n	8001350 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800131e:	4b74      	ldr	r3, [pc, #464]	; (80014f0 <HAL_RCC_OscConfig+0x474>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a73      	ldr	r2, [pc, #460]	; (80014f0 <HAL_RCC_OscConfig+0x474>)
 8001324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001328:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800132a:	f7ff fbe5 	bl	8000af8 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001332:	f7ff fbe1 	bl	8000af8 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e10c      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001344:	4b6a      	ldr	r3, [pc, #424]	; (80014f0 <HAL_RCC_OscConfig+0x474>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f0      	beq.n	8001332 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d106      	bne.n	8001366 <HAL_RCC_OscConfig+0x2ea>
 8001358:	4b64      	ldr	r3, [pc, #400]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 800135a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135c:	4a63      	ldr	r2, [pc, #396]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	6713      	str	r3, [r2, #112]	; 0x70
 8001364:	e01c      	b.n	80013a0 <HAL_RCC_OscConfig+0x324>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b05      	cmp	r3, #5
 800136c:	d10c      	bne.n	8001388 <HAL_RCC_OscConfig+0x30c>
 800136e:	4b5f      	ldr	r3, [pc, #380]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 8001370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001372:	4a5e      	ldr	r2, [pc, #376]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	6713      	str	r3, [r2, #112]	; 0x70
 800137a:	4b5c      	ldr	r3, [pc, #368]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 800137c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137e:	4a5b      	ldr	r2, [pc, #364]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6713      	str	r3, [r2, #112]	; 0x70
 8001386:	e00b      	b.n	80013a0 <HAL_RCC_OscConfig+0x324>
 8001388:	4b58      	ldr	r3, [pc, #352]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 800138a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138c:	4a57      	ldr	r2, [pc, #348]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 800138e:	f023 0301 	bic.w	r3, r3, #1
 8001392:	6713      	str	r3, [r2, #112]	; 0x70
 8001394:	4b55      	ldr	r3, [pc, #340]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 8001396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001398:	4a54      	ldr	r2, [pc, #336]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 800139a:	f023 0304 	bic.w	r3, r3, #4
 800139e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d015      	beq.n	80013d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a8:	f7ff fba6 	bl	8000af8 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ae:	e00a      	b.n	80013c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b0:	f7ff fba2 	bl	8000af8 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80013be:	4293      	cmp	r3, r2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e0cb      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c6:	4b49      	ldr	r3, [pc, #292]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 80013c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0ee      	beq.n	80013b0 <HAL_RCC_OscConfig+0x334>
 80013d2:	e014      	b.n	80013fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d4:	f7ff fb90 	bl	8000af8 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013da:	e00a      	b.n	80013f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013dc:	f7ff fb8c 	bl	8000af8 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e0b5      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f2:	4b3e      	ldr	r3, [pc, #248]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 80013f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1ee      	bne.n	80013dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013fe:	7dfb      	ldrb	r3, [r7, #23]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d105      	bne.n	8001410 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001404:	4b39      	ldr	r3, [pc, #228]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	4a38      	ldr	r2, [pc, #224]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 800140a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800140e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 80a1 	beq.w	800155c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800141a:	4b34      	ldr	r3, [pc, #208]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b08      	cmp	r3, #8
 8001424:	d05c      	beq.n	80014e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d141      	bne.n	80014b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142e:	4b31      	ldr	r3, [pc, #196]	; (80014f4 <HAL_RCC_OscConfig+0x478>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff fb60 	bl	8000af8 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143c:	f7ff fb5c 	bl	8000af8 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e087      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800144e:	4b27      	ldr	r3, [pc, #156]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69da      	ldr	r2, [r3, #28]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	019b      	lsls	r3, r3, #6
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001470:	085b      	lsrs	r3, r3, #1
 8001472:	3b01      	subs	r3, #1
 8001474:	041b      	lsls	r3, r3, #16
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	061b      	lsls	r3, r3, #24
 800147e:	491b      	ldr	r1, [pc, #108]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 8001480:	4313      	orrs	r3, r2
 8001482:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <HAL_RCC_OscConfig+0x478>)
 8001486:	2201      	movs	r2, #1
 8001488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148a:	f7ff fb35 	bl	8000af8 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001492:	f7ff fb31 	bl	8000af8 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e05c      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0f0      	beq.n	8001492 <HAL_RCC_OscConfig+0x416>
 80014b0:	e054      	b.n	800155c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <HAL_RCC_OscConfig+0x478>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fb1e 	bl	8000af8 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c0:	f7ff fb1a 	bl	8000af8 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e045      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_RCC_OscConfig+0x470>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x444>
 80014de:	e03d      	b.n	800155c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d107      	bne.n	80014f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e038      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40007000 	.word	0x40007000
 80014f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <HAL_RCC_OscConfig+0x4ec>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d028      	beq.n	8001558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001510:	429a      	cmp	r2, r3
 8001512:	d121      	bne.n	8001558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800151e:	429a      	cmp	r2, r3
 8001520:	d11a      	bne.n	8001558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001528:	4013      	ands	r3, r2
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800152e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001530:	4293      	cmp	r3, r2
 8001532:	d111      	bne.n	8001558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153e:	085b      	lsrs	r3, r3, #1
 8001540:	3b01      	subs	r3, #1
 8001542:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001544:	429a      	cmp	r2, r3
 8001546:	d107      	bne.n	8001558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001552:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001554:	429a      	cmp	r2, r3
 8001556:	d001      	beq.n	800155c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800

0800156c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e0cc      	b.n	800171a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001580:	4b68      	ldr	r3, [pc, #416]	; (8001724 <HAL_RCC_ClockConfig+0x1b8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d90c      	bls.n	80015a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158e:	4b65      	ldr	r3, [pc, #404]	; (8001724 <HAL_RCC_ClockConfig+0x1b8>)
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001596:	4b63      	ldr	r3, [pc, #396]	; (8001724 <HAL_RCC_ClockConfig+0x1b8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0b8      	b.n	800171a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d020      	beq.n	80015f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015c0:	4b59      	ldr	r3, [pc, #356]	; (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	4a58      	ldr	r2, [pc, #352]	; (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0308 	and.w	r3, r3, #8
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d005      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015d8:	4b53      	ldr	r3, [pc, #332]	; (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	4a52      	ldr	r2, [pc, #328]	; (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e4:	4b50      	ldr	r3, [pc, #320]	; (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	494d      	ldr	r1, [pc, #308]	; (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d044      	beq.n	800168c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d107      	bne.n	800161a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	4b47      	ldr	r3, [pc, #284]	; (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d119      	bne.n	800164a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e07f      	b.n	800171a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d003      	beq.n	800162a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001626:	2b03      	cmp	r3, #3
 8001628:	d107      	bne.n	800163a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162a:	4b3f      	ldr	r3, [pc, #252]	; (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d109      	bne.n	800164a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e06f      	b.n	800171a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163a:	4b3b      	ldr	r3, [pc, #236]	; (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e067      	b.n	800171a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800164a:	4b37      	ldr	r3, [pc, #220]	; (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f023 0203 	bic.w	r2, r3, #3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4934      	ldr	r1, [pc, #208]	; (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	4313      	orrs	r3, r2
 800165a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800165c:	f7ff fa4c 	bl	8000af8 <HAL_GetTick>
 8001660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001662:	e00a      	b.n	800167a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001664:	f7ff fa48 	bl	8000af8 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e04f      	b.n	800171a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167a:	4b2b      	ldr	r3, [pc, #172]	; (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 020c 	and.w	r2, r3, #12
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	429a      	cmp	r2, r3
 800168a:	d1eb      	bne.n	8001664 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800168c:	4b25      	ldr	r3, [pc, #148]	; (8001724 <HAL_RCC_ClockConfig+0x1b8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d20c      	bcs.n	80016b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169a:	4b22      	ldr	r3, [pc, #136]	; (8001724 <HAL_RCC_ClockConfig+0x1b8>)
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d001      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e032      	b.n	800171a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d008      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	4916      	ldr	r1, [pc, #88]	; (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d009      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	490e      	ldr	r1, [pc, #56]	; (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016f2:	f000 f821 	bl	8001738 <HAL_RCC_GetSysClockFreq>
 80016f6:	4602      	mov	r2, r0
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	091b      	lsrs	r3, r3, #4
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	490a      	ldr	r1, [pc, #40]	; (800172c <HAL_RCC_ClockConfig+0x1c0>)
 8001704:	5ccb      	ldrb	r3, [r1, r3]
 8001706:	fa22 f303 	lsr.w	r3, r2, r3
 800170a:	4a09      	ldr	r2, [pc, #36]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_RCC_ClockConfig+0x1c8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff f9ac 	bl	8000a70 <HAL_InitTick>

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023c00 	.word	0x40023c00
 8001728:	40023800 	.word	0x40023800
 800172c:	080039d4 	.word	0x080039d4
 8001730:	20000000 	.word	0x20000000
 8001734:	20000004 	.word	0x20000004

08001738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800173c:	b090      	sub	sp, #64	; 0x40
 800173e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	637b      	str	r3, [r7, #52]	; 0x34
 8001744:	2300      	movs	r3, #0
 8001746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001748:	2300      	movs	r3, #0
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001750:	4b59      	ldr	r3, [pc, #356]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	2b08      	cmp	r3, #8
 800175a:	d00d      	beq.n	8001778 <HAL_RCC_GetSysClockFreq+0x40>
 800175c:	2b08      	cmp	r3, #8
 800175e:	f200 80a1 	bhi.w	80018a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <HAL_RCC_GetSysClockFreq+0x34>
 8001766:	2b04      	cmp	r3, #4
 8001768:	d003      	beq.n	8001772 <HAL_RCC_GetSysClockFreq+0x3a>
 800176a:	e09b      	b.n	80018a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800176c:	4b53      	ldr	r3, [pc, #332]	; (80018bc <HAL_RCC_GetSysClockFreq+0x184>)
 800176e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001770:	e09b      	b.n	80018aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001772:	4b53      	ldr	r3, [pc, #332]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001774:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001776:	e098      	b.n	80018aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001778:	4b4f      	ldr	r3, [pc, #316]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001780:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001782:	4b4d      	ldr	r3, [pc, #308]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d028      	beq.n	80017e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800178e:	4b4a      	ldr	r3, [pc, #296]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	099b      	lsrs	r3, r3, #6
 8001794:	2200      	movs	r2, #0
 8001796:	623b      	str	r3, [r7, #32]
 8001798:	627a      	str	r2, [r7, #36]	; 0x24
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017a0:	2100      	movs	r1, #0
 80017a2:	4b47      	ldr	r3, [pc, #284]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80017a4:	fb03 f201 	mul.w	r2, r3, r1
 80017a8:	2300      	movs	r3, #0
 80017aa:	fb00 f303 	mul.w	r3, r0, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	4a43      	ldr	r2, [pc, #268]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80017b2:	fba0 1202 	umull	r1, r2, r0, r2
 80017b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017b8:	460a      	mov	r2, r1
 80017ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80017bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017be:	4413      	add	r3, r2
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c4:	2200      	movs	r2, #0
 80017c6:	61bb      	str	r3, [r7, #24]
 80017c8:	61fa      	str	r2, [r7, #28]
 80017ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017d2:	f7fe fd05 	bl	80001e0 <__aeabi_uldivmod>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4613      	mov	r3, r2
 80017dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017de:	e053      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e0:	4b35      	ldr	r3, [pc, #212]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	099b      	lsrs	r3, r3, #6
 80017e6:	2200      	movs	r2, #0
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	617a      	str	r2, [r7, #20]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80017f2:	f04f 0b00 	mov.w	fp, #0
 80017f6:	4652      	mov	r2, sl
 80017f8:	465b      	mov	r3, fp
 80017fa:	f04f 0000 	mov.w	r0, #0
 80017fe:	f04f 0100 	mov.w	r1, #0
 8001802:	0159      	lsls	r1, r3, #5
 8001804:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001808:	0150      	lsls	r0, r2, #5
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	ebb2 080a 	subs.w	r8, r2, sl
 8001812:	eb63 090b 	sbc.w	r9, r3, fp
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001822:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001826:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800182a:	ebb2 0408 	subs.w	r4, r2, r8
 800182e:	eb63 0509 	sbc.w	r5, r3, r9
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	f04f 0300 	mov.w	r3, #0
 800183a:	00eb      	lsls	r3, r5, #3
 800183c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001840:	00e2      	lsls	r2, r4, #3
 8001842:	4614      	mov	r4, r2
 8001844:	461d      	mov	r5, r3
 8001846:	eb14 030a 	adds.w	r3, r4, sl
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	eb45 030b 	adc.w	r3, r5, fp
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800185e:	4629      	mov	r1, r5
 8001860:	028b      	lsls	r3, r1, #10
 8001862:	4621      	mov	r1, r4
 8001864:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001868:	4621      	mov	r1, r4
 800186a:	028a      	lsls	r2, r1, #10
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001872:	2200      	movs	r2, #0
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	60fa      	str	r2, [r7, #12]
 8001878:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800187c:	f7fe fcb0 	bl	80001e0 <__aeabi_uldivmod>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4613      	mov	r3, r2
 8001886:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	3301      	adds	r3, #1
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001898:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800189a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189c:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018a2:	e002      	b.n	80018aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_RCC_GetSysClockFreq+0x184>)
 80018a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3740      	adds	r7, #64	; 0x40
 80018b0:	46bd      	mov	sp, r7
 80018b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	00f42400 	.word	0x00f42400
 80018c0:	017d7840 	.word	0x017d7840

080018c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000000 	.word	0x20000000

080018dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018e0:	f7ff fff0 	bl	80018c4 <HAL_RCC_GetHCLKFreq>
 80018e4:	4602      	mov	r2, r0
 80018e6:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	0a9b      	lsrs	r3, r3, #10
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	4903      	ldr	r1, [pc, #12]	; (8001900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018f2:	5ccb      	ldrb	r3, [r1, r3]
 80018f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40023800 	.word	0x40023800
 8001900:	080039e4 	.word	0x080039e4

08001904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001908:	f7ff ffdc 	bl	80018c4 <HAL_RCC_GetHCLKFreq>
 800190c:	4602      	mov	r2, r0
 800190e:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	0b5b      	lsrs	r3, r3, #13
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	4903      	ldr	r1, [pc, #12]	; (8001928 <HAL_RCC_GetPCLK2Freq+0x24>)
 800191a:	5ccb      	ldrb	r3, [r1, r3]
 800191c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001920:	4618      	mov	r0, r3
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40023800 	.word	0x40023800
 8001928:	080039e4 	.word	0x080039e4

0800192c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e03f      	b.n	80019be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d106      	bne.n	8001958 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7fe fff8 	bl	8000948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2224      	movs	r2, #36	; 0x24
 800195c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800196e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f929 	bl	8001bc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001984:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	695a      	ldr	r2, [r3, #20]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001994:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2220      	movs	r2, #32
 80019b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2220      	movs	r2, #32
 80019b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b08a      	sub	sp, #40	; 0x28
 80019ca:	af02      	add	r7, sp, #8
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	4613      	mov	r3, r2
 80019d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b20      	cmp	r3, #32
 80019e4:	d17c      	bne.n	8001ae0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d002      	beq.n	80019f2 <HAL_UART_Transmit+0x2c>
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e075      	b.n	8001ae2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <HAL_UART_Transmit+0x3e>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e06e      	b.n	8001ae2 <HAL_UART_Transmit+0x11c>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2221      	movs	r2, #33	; 0x21
 8001a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a1a:	f7ff f86d 	bl	8000af8 <HAL_GetTick>
 8001a1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	88fa      	ldrh	r2, [r7, #6]
 8001a24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	88fa      	ldrh	r2, [r7, #6]
 8001a2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a34:	d108      	bne.n	8001a48 <HAL_UART_Transmit+0x82>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d104      	bne.n	8001a48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	61bb      	str	r3, [r7, #24]
 8001a46:	e003      	b.n	8001a50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001a58:	e02a      	b.n	8001ab0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2200      	movs	r2, #0
 8001a62:	2180      	movs	r1, #128	; 0x80
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 f840 	bl	8001aea <UART_WaitOnFlagUntilTimeout>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e036      	b.n	8001ae2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10b      	bne.n	8001a92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	61bb      	str	r3, [r7, #24]
 8001a90:	e007      	b.n	8001aa2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	781a      	ldrb	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1cf      	bne.n	8001a5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2140      	movs	r1, #64	; 0x40
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 f810 	bl	8001aea <UART_WaitOnFlagUntilTimeout>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e006      	b.n	8001ae2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	e000      	b.n	8001ae2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ae0:	2302      	movs	r3, #2
  }
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b090      	sub	sp, #64	; 0x40
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	4613      	mov	r3, r2
 8001af8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001afa:	e050      	b.n	8001b9e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b02:	d04c      	beq.n	8001b9e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d007      	beq.n	8001b1a <UART_WaitOnFlagUntilTimeout+0x30>
 8001b0a:	f7fe fff5 	bl	8000af8 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d241      	bcs.n	8001b9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	330c      	adds	r3, #12
 8001b20:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b24:	e853 3f00 	ldrex	r3, [r3]
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001b30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	330c      	adds	r3, #12
 8001b38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b3a:	637a      	str	r2, [r7, #52]	; 0x34
 8001b3c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b42:	e841 2300 	strex	r3, r2, [r1]
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1e5      	bne.n	8001b1a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	3314      	adds	r3, #20
 8001b54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	e853 3f00 	ldrex	r3, [r3]
 8001b5c:	613b      	str	r3, [r7, #16]
   return(result);
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	3314      	adds	r3, #20
 8001b6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b6e:	623a      	str	r2, [r7, #32]
 8001b70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b72:	69f9      	ldr	r1, [r7, #28]
 8001b74:	6a3a      	ldr	r2, [r7, #32]
 8001b76:	e841 2300 	strex	r3, r2, [r1]
 8001b7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1e5      	bne.n	8001b4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2220      	movs	r2, #32
 8001b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e00f      	b.n	8001bbe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	bf0c      	ite	eq
 8001bae:	2301      	moveq	r3, #1
 8001bb0:	2300      	movne	r3, #0
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d09f      	beq.n	8001afc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3740      	adds	r7, #64	; 0x40
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bcc:	b0c0      	sub	sp, #256	; 0x100
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001be4:	68d9      	ldr	r1, [r3, #12]
 8001be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	ea40 0301 	orr.w	r3, r0, r1
 8001bf0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	431a      	orrs	r2, r3
 8001c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001c20:	f021 010c 	bic.w	r1, r1, #12
 8001c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001c2e:	430b      	orrs	r3, r1
 8001c30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c42:	6999      	ldr	r1, [r3, #24]
 8001c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	ea40 0301 	orr.w	r3, r0, r1
 8001c4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	4b8f      	ldr	r3, [pc, #572]	; (8001e94 <UART_SetConfig+0x2cc>)
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d005      	beq.n	8001c68 <UART_SetConfig+0xa0>
 8001c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	4b8d      	ldr	r3, [pc, #564]	; (8001e98 <UART_SetConfig+0x2d0>)
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d104      	bne.n	8001c72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c68:	f7ff fe4c 	bl	8001904 <HAL_RCC_GetPCLK2Freq>
 8001c6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001c70:	e003      	b.n	8001c7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c72:	f7ff fe33 	bl	80018dc <HAL_RCC_GetPCLK1Freq>
 8001c76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c84:	f040 810c 	bne.w	8001ea0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001c96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001c9a:	4622      	mov	r2, r4
 8001c9c:	462b      	mov	r3, r5
 8001c9e:	1891      	adds	r1, r2, r2
 8001ca0:	65b9      	str	r1, [r7, #88]	; 0x58
 8001ca2:	415b      	adcs	r3, r3
 8001ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ca6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001caa:	4621      	mov	r1, r4
 8001cac:	eb12 0801 	adds.w	r8, r2, r1
 8001cb0:	4629      	mov	r1, r5
 8001cb2:	eb43 0901 	adc.w	r9, r3, r1
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cca:	4690      	mov	r8, r2
 8001ccc:	4699      	mov	r9, r3
 8001cce:	4623      	mov	r3, r4
 8001cd0:	eb18 0303 	adds.w	r3, r8, r3
 8001cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001cd8:	462b      	mov	r3, r5
 8001cda:	eb49 0303 	adc.w	r3, r9, r3
 8001cde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001cee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001cf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	18db      	adds	r3, r3, r3
 8001cfa:	653b      	str	r3, [r7, #80]	; 0x50
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	eb42 0303 	adc.w	r3, r2, r3
 8001d02:	657b      	str	r3, [r7, #84]	; 0x54
 8001d04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001d0c:	f7fe fa68 	bl	80001e0 <__aeabi_uldivmod>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4b61      	ldr	r3, [pc, #388]	; (8001e9c <UART_SetConfig+0x2d4>)
 8001d16:	fba3 2302 	umull	r2, r3, r3, r2
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	011c      	lsls	r4, r3, #4
 8001d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d22:	2200      	movs	r2, #0
 8001d24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001d28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001d2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001d30:	4642      	mov	r2, r8
 8001d32:	464b      	mov	r3, r9
 8001d34:	1891      	adds	r1, r2, r2
 8001d36:	64b9      	str	r1, [r7, #72]	; 0x48
 8001d38:	415b      	adcs	r3, r3
 8001d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d40:	4641      	mov	r1, r8
 8001d42:	eb12 0a01 	adds.w	sl, r2, r1
 8001d46:	4649      	mov	r1, r9
 8001d48:	eb43 0b01 	adc.w	fp, r3, r1
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d60:	4692      	mov	sl, r2
 8001d62:	469b      	mov	fp, r3
 8001d64:	4643      	mov	r3, r8
 8001d66:	eb1a 0303 	adds.w	r3, sl, r3
 8001d6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001d6e:	464b      	mov	r3, r9
 8001d70:	eb4b 0303 	adc.w	r3, fp, r3
 8001d74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001d84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001d88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	18db      	adds	r3, r3, r3
 8001d90:	643b      	str	r3, [r7, #64]	; 0x40
 8001d92:	4613      	mov	r3, r2
 8001d94:	eb42 0303 	adc.w	r3, r2, r3
 8001d98:	647b      	str	r3, [r7, #68]	; 0x44
 8001d9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001da2:	f7fe fa1d 	bl	80001e0 <__aeabi_uldivmod>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4611      	mov	r1, r2
 8001dac:	4b3b      	ldr	r3, [pc, #236]	; (8001e9c <UART_SetConfig+0x2d4>)
 8001dae:	fba3 2301 	umull	r2, r3, r3, r1
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	2264      	movs	r2, #100	; 0x64
 8001db6:	fb02 f303 	mul.w	r3, r2, r3
 8001dba:	1acb      	subs	r3, r1, r3
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001dc2:	4b36      	ldr	r3, [pc, #216]	; (8001e9c <UART_SetConfig+0x2d4>)
 8001dc4:	fba3 2302 	umull	r2, r3, r3, r2
 8001dc8:	095b      	lsrs	r3, r3, #5
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001dd0:	441c      	add	r4, r3
 8001dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ddc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001de0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001de4:	4642      	mov	r2, r8
 8001de6:	464b      	mov	r3, r9
 8001de8:	1891      	adds	r1, r2, r2
 8001dea:	63b9      	str	r1, [r7, #56]	; 0x38
 8001dec:	415b      	adcs	r3, r3
 8001dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001df0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001df4:	4641      	mov	r1, r8
 8001df6:	1851      	adds	r1, r2, r1
 8001df8:	6339      	str	r1, [r7, #48]	; 0x30
 8001dfa:	4649      	mov	r1, r9
 8001dfc:	414b      	adcs	r3, r1
 8001dfe:	637b      	str	r3, [r7, #52]	; 0x34
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001e0c:	4659      	mov	r1, fp
 8001e0e:	00cb      	lsls	r3, r1, #3
 8001e10:	4651      	mov	r1, sl
 8001e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e16:	4651      	mov	r1, sl
 8001e18:	00ca      	lsls	r2, r1, #3
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4603      	mov	r3, r0
 8001e20:	4642      	mov	r2, r8
 8001e22:	189b      	adds	r3, r3, r2
 8001e24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001e28:	464b      	mov	r3, r9
 8001e2a:	460a      	mov	r2, r1
 8001e2c:	eb42 0303 	adc.w	r3, r2, r3
 8001e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001e40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001e44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001e48:	460b      	mov	r3, r1
 8001e4a:	18db      	adds	r3, r3, r3
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e4e:	4613      	mov	r3, r2
 8001e50:	eb42 0303 	adc.w	r3, r2, r3
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001e5e:	f7fe f9bf 	bl	80001e0 <__aeabi_uldivmod>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <UART_SetConfig+0x2d4>)
 8001e68:	fba3 1302 	umull	r1, r3, r3, r2
 8001e6c:	095b      	lsrs	r3, r3, #5
 8001e6e:	2164      	movs	r1, #100	; 0x64
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	3332      	adds	r3, #50	; 0x32
 8001e7a:	4a08      	ldr	r2, [pc, #32]	; (8001e9c <UART_SetConfig+0x2d4>)
 8001e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e80:	095b      	lsrs	r3, r3, #5
 8001e82:	f003 0207 	and.w	r2, r3, #7
 8001e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4422      	add	r2, r4
 8001e8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e90:	e105      	b.n	800209e <UART_SetConfig+0x4d6>
 8001e92:	bf00      	nop
 8001e94:	40011000 	.word	0x40011000
 8001e98:	40011400 	.word	0x40011400
 8001e9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001eaa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001eae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001eb2:	4642      	mov	r2, r8
 8001eb4:	464b      	mov	r3, r9
 8001eb6:	1891      	adds	r1, r2, r2
 8001eb8:	6239      	str	r1, [r7, #32]
 8001eba:	415b      	adcs	r3, r3
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ebe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ec2:	4641      	mov	r1, r8
 8001ec4:	1854      	adds	r4, r2, r1
 8001ec6:	4649      	mov	r1, r9
 8001ec8:	eb43 0501 	adc.w	r5, r3, r1
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	00eb      	lsls	r3, r5, #3
 8001ed6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eda:	00e2      	lsls	r2, r4, #3
 8001edc:	4614      	mov	r4, r2
 8001ede:	461d      	mov	r5, r3
 8001ee0:	4643      	mov	r3, r8
 8001ee2:	18e3      	adds	r3, r4, r3
 8001ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001ee8:	464b      	mov	r3, r9
 8001eea:	eb45 0303 	adc.w	r3, r5, r3
 8001eee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001efe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001f0e:	4629      	mov	r1, r5
 8001f10:	008b      	lsls	r3, r1, #2
 8001f12:	4621      	mov	r1, r4
 8001f14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f18:	4621      	mov	r1, r4
 8001f1a:	008a      	lsls	r2, r1, #2
 8001f1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001f20:	f7fe f95e 	bl	80001e0 <__aeabi_uldivmod>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4b60      	ldr	r3, [pc, #384]	; (80020ac <UART_SetConfig+0x4e4>)
 8001f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	011c      	lsls	r4, r3, #4
 8001f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f36:	2200      	movs	r2, #0
 8001f38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001f40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001f44:	4642      	mov	r2, r8
 8001f46:	464b      	mov	r3, r9
 8001f48:	1891      	adds	r1, r2, r2
 8001f4a:	61b9      	str	r1, [r7, #24]
 8001f4c:	415b      	adcs	r3, r3
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f54:	4641      	mov	r1, r8
 8001f56:	1851      	adds	r1, r2, r1
 8001f58:	6139      	str	r1, [r7, #16]
 8001f5a:	4649      	mov	r1, r9
 8001f5c:	414b      	adcs	r3, r1
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f6c:	4659      	mov	r1, fp
 8001f6e:	00cb      	lsls	r3, r1, #3
 8001f70:	4651      	mov	r1, sl
 8001f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f76:	4651      	mov	r1, sl
 8001f78:	00ca      	lsls	r2, r1, #3
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4642      	mov	r2, r8
 8001f82:	189b      	adds	r3, r3, r2
 8001f84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f88:	464b      	mov	r3, r9
 8001f8a:	460a      	mov	r2, r1
 8001f8c:	eb42 0303 	adc.w	r3, r2, r3
 8001f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001fac:	4649      	mov	r1, r9
 8001fae:	008b      	lsls	r3, r1, #2
 8001fb0:	4641      	mov	r1, r8
 8001fb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fb6:	4641      	mov	r1, r8
 8001fb8:	008a      	lsls	r2, r1, #2
 8001fba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001fbe:	f7fe f90f 	bl	80001e0 <__aeabi_uldivmod>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4b39      	ldr	r3, [pc, #228]	; (80020ac <UART_SetConfig+0x4e4>)
 8001fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8001fcc:	095b      	lsrs	r3, r3, #5
 8001fce:	2164      	movs	r1, #100	; 0x64
 8001fd0:	fb01 f303 	mul.w	r3, r1, r3
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	011b      	lsls	r3, r3, #4
 8001fd8:	3332      	adds	r3, #50	; 0x32
 8001fda:	4a34      	ldr	r2, [pc, #208]	; (80020ac <UART_SetConfig+0x4e4>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	095b      	lsrs	r3, r3, #5
 8001fe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fe6:	441c      	add	r4, r3
 8001fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fec:	2200      	movs	r2, #0
 8001fee:	673b      	str	r3, [r7, #112]	; 0x70
 8001ff0:	677a      	str	r2, [r7, #116]	; 0x74
 8001ff2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001ff6:	4642      	mov	r2, r8
 8001ff8:	464b      	mov	r3, r9
 8001ffa:	1891      	adds	r1, r2, r2
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	415b      	adcs	r3, r3
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002006:	4641      	mov	r1, r8
 8002008:	1851      	adds	r1, r2, r1
 800200a:	6039      	str	r1, [r7, #0]
 800200c:	4649      	mov	r1, r9
 800200e:	414b      	adcs	r3, r1
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800201e:	4659      	mov	r1, fp
 8002020:	00cb      	lsls	r3, r1, #3
 8002022:	4651      	mov	r1, sl
 8002024:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002028:	4651      	mov	r1, sl
 800202a:	00ca      	lsls	r2, r1, #3
 800202c:	4610      	mov	r0, r2
 800202e:	4619      	mov	r1, r3
 8002030:	4603      	mov	r3, r0
 8002032:	4642      	mov	r2, r8
 8002034:	189b      	adds	r3, r3, r2
 8002036:	66bb      	str	r3, [r7, #104]	; 0x68
 8002038:	464b      	mov	r3, r9
 800203a:	460a      	mov	r2, r1
 800203c:	eb42 0303 	adc.w	r3, r2, r3
 8002040:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	663b      	str	r3, [r7, #96]	; 0x60
 800204c:	667a      	str	r2, [r7, #100]	; 0x64
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	f04f 0300 	mov.w	r3, #0
 8002056:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800205a:	4649      	mov	r1, r9
 800205c:	008b      	lsls	r3, r1, #2
 800205e:	4641      	mov	r1, r8
 8002060:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002064:	4641      	mov	r1, r8
 8002066:	008a      	lsls	r2, r1, #2
 8002068:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800206c:	f7fe f8b8 	bl	80001e0 <__aeabi_uldivmod>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <UART_SetConfig+0x4e4>)
 8002076:	fba3 1302 	umull	r1, r3, r3, r2
 800207a:	095b      	lsrs	r3, r3, #5
 800207c:	2164      	movs	r1, #100	; 0x64
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	3332      	adds	r3, #50	; 0x32
 8002088:	4a08      	ldr	r2, [pc, #32]	; (80020ac <UART_SetConfig+0x4e4>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	f003 020f 	and.w	r2, r3, #15
 8002094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4422      	add	r2, r4
 800209c:	609a      	str	r2, [r3, #8]
}
 800209e:	bf00      	nop
 80020a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80020a4:	46bd      	mov	sp, r7
 80020a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020aa:	bf00      	nop
 80020ac:	51eb851f 	.word	0x51eb851f

080020b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80020be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020c2:	2b84      	cmp	r3, #132	; 0x84
 80020c4:	d005      	beq.n	80020d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80020c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4413      	add	r3, r2
 80020ce:	3303      	adds	r3, #3
 80020d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80020d2:	68fb      	ldr	r3, [r7, #12]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80020e4:	f000 fed8 	bl	8002e98 <vTaskStartScheduler>
  
  return osOK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	bd80      	pop	{r7, pc}

080020ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80020ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f0:	b089      	sub	sp, #36	; 0x24
 80020f2:	af04      	add	r7, sp, #16
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d020      	beq.n	8002142 <osThreadCreate+0x54>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d01c      	beq.n	8002142 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685c      	ldr	r4, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681d      	ldr	r5, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691e      	ldr	r6, [r3, #16]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff ffc8 	bl	80020b0 <makeFreeRtosPriority>
 8002120:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800212a:	9202      	str	r2, [sp, #8]
 800212c:	9301      	str	r3, [sp, #4]
 800212e:	9100      	str	r1, [sp, #0]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	4632      	mov	r2, r6
 8002134:	4629      	mov	r1, r5
 8002136:	4620      	mov	r0, r4
 8002138:	f000 fce6 	bl	8002b08 <xTaskCreateStatic>
 800213c:	4603      	mov	r3, r0
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	e01c      	b.n	800217c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685c      	ldr	r4, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800214e:	b29e      	uxth	r6, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ffaa 	bl	80020b0 <makeFreeRtosPriority>
 800215c:	4602      	mov	r2, r0
 800215e:	f107 030c 	add.w	r3, r7, #12
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	9200      	str	r2, [sp, #0]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	4632      	mov	r2, r6
 800216a:	4629      	mov	r1, r5
 800216c:	4620      	mov	r0, r4
 800216e:	f000 fd28 	bl	8002bc2 <xTaskCreate>
 8002172:	4603      	mov	r3, r0
 8002174:	2b01      	cmp	r3, #1
 8002176:	d001      	beq.n	800217c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002178:	2300      	movs	r3, #0
 800217a:	e000      	b.n	800217e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800217c:	68fb      	ldr	r3, [r7, #12]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002186 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b084      	sub	sp, #16
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <osDelay+0x16>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	e000      	b.n	800219e <osDelay+0x18>
 800219c:	2301      	movs	r3, #1
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 fe46 	bl	8002e30 <vTaskDelay>
  
  return osOK;
 80021a4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	; 0x28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80021bc:	f000 fecc 	bl	8002f58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80021c0:	4b5b      	ldr	r3, [pc, #364]	; (8002330 <pvPortMalloc+0x180>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80021c8:	f000 f920 	bl	800240c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80021cc:	4b59      	ldr	r3, [pc, #356]	; (8002334 <pvPortMalloc+0x184>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f040 8093 	bne.w	8002300 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d01d      	beq.n	800221c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80021e0:	2208      	movs	r2, #8
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d014      	beq.n	800221c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f023 0307 	bic.w	r3, r3, #7
 80021f8:	3308      	adds	r3, #8
 80021fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800220a:	f383 8811 	msr	BASEPRI, r3
 800220e:	f3bf 8f6f 	isb	sy
 8002212:	f3bf 8f4f 	dsb	sy
 8002216:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002218:	bf00      	nop
 800221a:	e7fe      	b.n	800221a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d06e      	beq.n	8002300 <pvPortMalloc+0x150>
 8002222:	4b45      	ldr	r3, [pc, #276]	; (8002338 <pvPortMalloc+0x188>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	429a      	cmp	r2, r3
 800222a:	d869      	bhi.n	8002300 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800222c:	4b43      	ldr	r3, [pc, #268]	; (800233c <pvPortMalloc+0x18c>)
 800222e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002230:	4b42      	ldr	r3, [pc, #264]	; (800233c <pvPortMalloc+0x18c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002236:	e004      	b.n	8002242 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	429a      	cmp	r2, r3
 800224a:	d903      	bls.n	8002254 <pvPortMalloc+0xa4>
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f1      	bne.n	8002238 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002254:	4b36      	ldr	r3, [pc, #216]	; (8002330 <pvPortMalloc+0x180>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225a:	429a      	cmp	r2, r3
 800225c:	d050      	beq.n	8002300 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2208      	movs	r2, #8
 8002264:	4413      	add	r3, r2
 8002266:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	1ad2      	subs	r2, r2, r3
 8002278:	2308      	movs	r3, #8
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	429a      	cmp	r2, r3
 800227e:	d91f      	bls.n	80022c0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00a      	beq.n	80022a8 <pvPortMalloc+0xf8>
	__asm volatile
 8002292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002296:	f383 8811 	msr	BASEPRI, r3
 800229a:	f3bf 8f6f 	isb	sy
 800229e:	f3bf 8f4f 	dsb	sy
 80022a2:	613b      	str	r3, [r7, #16]
}
 80022a4:	bf00      	nop
 80022a6:	e7fe      	b.n	80022a6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	1ad2      	subs	r2, r2, r3
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80022ba:	69b8      	ldr	r0, [r7, #24]
 80022bc:	f000 f908 	bl	80024d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80022c0:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <pvPortMalloc+0x188>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	4a1b      	ldr	r2, [pc, #108]	; (8002338 <pvPortMalloc+0x188>)
 80022cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80022ce:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <pvPortMalloc+0x188>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <pvPortMalloc+0x190>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d203      	bcs.n	80022e2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80022da:	4b17      	ldr	r3, [pc, #92]	; (8002338 <pvPortMalloc+0x188>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a18      	ldr	r2, [pc, #96]	; (8002340 <pvPortMalloc+0x190>)
 80022e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	4b13      	ldr	r3, [pc, #76]	; (8002334 <pvPortMalloc+0x184>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	431a      	orrs	r2, r3
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80022f6:	4b13      	ldr	r3, [pc, #76]	; (8002344 <pvPortMalloc+0x194>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3301      	adds	r3, #1
 80022fc:	4a11      	ldr	r2, [pc, #68]	; (8002344 <pvPortMalloc+0x194>)
 80022fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002300:	f000 fe38 	bl	8002f74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <pvPortMalloc+0x174>
	__asm volatile
 800230e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002312:	f383 8811 	msr	BASEPRI, r3
 8002316:	f3bf 8f6f 	isb	sy
 800231a:	f3bf 8f4f 	dsb	sy
 800231e:	60fb      	str	r3, [r7, #12]
}
 8002320:	bf00      	nop
 8002322:	e7fe      	b.n	8002322 <pvPortMalloc+0x172>
	return pvReturn;
 8002324:	69fb      	ldr	r3, [r7, #28]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3728      	adds	r7, #40	; 0x28
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20003f4c 	.word	0x20003f4c
 8002334:	20003f60 	.word	0x20003f60
 8002338:	20003f50 	.word	0x20003f50
 800233c:	20003f44 	.word	0x20003f44
 8002340:	20003f54 	.word	0x20003f54
 8002344:	20003f58 	.word	0x20003f58

08002348 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d04d      	beq.n	80023f6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800235a:	2308      	movs	r3, #8
 800235c:	425b      	negs	r3, r3
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	4413      	add	r3, r2
 8002362:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	4b24      	ldr	r3, [pc, #144]	; (8002400 <vPortFree+0xb8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4013      	ands	r3, r2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10a      	bne.n	800238c <vPortFree+0x44>
	__asm volatile
 8002376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237a:	f383 8811 	msr	BASEPRI, r3
 800237e:	f3bf 8f6f 	isb	sy
 8002382:	f3bf 8f4f 	dsb	sy
 8002386:	60fb      	str	r3, [r7, #12]
}
 8002388:	bf00      	nop
 800238a:	e7fe      	b.n	800238a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00a      	beq.n	80023aa <vPortFree+0x62>
	__asm volatile
 8002394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002398:	f383 8811 	msr	BASEPRI, r3
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	60bb      	str	r3, [r7, #8]
}
 80023a6:	bf00      	nop
 80023a8:	e7fe      	b.n	80023a8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <vPortFree+0xb8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d01e      	beq.n	80023f6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d11a      	bne.n	80023f6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <vPortFree+0xb8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	401a      	ands	r2, r3
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80023d0:	f000 fdc2 	bl	8002f58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <vPortFree+0xbc>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4413      	add	r3, r2
 80023de:	4a09      	ldr	r2, [pc, #36]	; (8002404 <vPortFree+0xbc>)
 80023e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80023e2:	6938      	ldr	r0, [r7, #16]
 80023e4:	f000 f874 	bl	80024d0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80023e8:	4b07      	ldr	r3, [pc, #28]	; (8002408 <vPortFree+0xc0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	4a06      	ldr	r2, [pc, #24]	; (8002408 <vPortFree+0xc0>)
 80023f0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80023f2:	f000 fdbf 	bl	8002f74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80023f6:	bf00      	nop
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20003f60 	.word	0x20003f60
 8002404:	20003f50 	.word	0x20003f50
 8002408:	20003f5c 	.word	0x20003f5c

0800240c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002412:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002416:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002418:	4b27      	ldr	r3, [pc, #156]	; (80024b8 <prvHeapInit+0xac>)
 800241a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00c      	beq.n	8002440 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	3307      	adds	r3, #7
 800242a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f023 0307 	bic.w	r3, r3, #7
 8002432:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	4a1f      	ldr	r2, [pc, #124]	; (80024b8 <prvHeapInit+0xac>)
 800243c:	4413      	add	r3, r2
 800243e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002444:	4a1d      	ldr	r2, [pc, #116]	; (80024bc <prvHeapInit+0xb0>)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800244a:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <prvHeapInit+0xb0>)
 800244c:	2200      	movs	r2, #0
 800244e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	4413      	add	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002458:	2208      	movs	r2, #8
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f023 0307 	bic.w	r3, r3, #7
 8002466:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <prvHeapInit+0xb4>)
 800246c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800246e:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <prvHeapInit+0xb4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2200      	movs	r2, #0
 8002474:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002476:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <prvHeapInit+0xb4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	1ad2      	subs	r2, r2, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <prvHeapInit+0xb4>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <prvHeapInit+0xb8>)
 800249a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4a09      	ldr	r2, [pc, #36]	; (80024c8 <prvHeapInit+0xbc>)
 80024a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80024a4:	4b09      	ldr	r3, [pc, #36]	; (80024cc <prvHeapInit+0xc0>)
 80024a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80024aa:	601a      	str	r2, [r3, #0]
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	20000344 	.word	0x20000344
 80024bc:	20003f44 	.word	0x20003f44
 80024c0:	20003f4c 	.word	0x20003f4c
 80024c4:	20003f54 	.word	0x20003f54
 80024c8:	20003f50 	.word	0x20003f50
 80024cc:	20003f60 	.word	0x20003f60

080024d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80024d8:	4b28      	ldr	r3, [pc, #160]	; (800257c <prvInsertBlockIntoFreeList+0xac>)
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	e002      	b.n	80024e4 <prvInsertBlockIntoFreeList+0x14>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d8f7      	bhi.n	80024de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	4413      	add	r3, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d108      	bne.n	8002512 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	441a      	add	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	441a      	add	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d118      	bne.n	8002558 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	4b15      	ldr	r3, [pc, #84]	; (8002580 <prvInsertBlockIntoFreeList+0xb0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d00d      	beq.n	800254e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	441a      	add	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	e008      	b.n	8002560 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800254e:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <prvInsertBlockIntoFreeList+0xb0>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	e003      	b.n	8002560 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	429a      	cmp	r2, r3
 8002566:	d002      	beq.n	800256e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800256e:	bf00      	nop
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20003f44 	.word	0x20003f44
 8002580:	20003f4c 	.word	0x20003f4c

08002584 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f103 0208 	add.w	r2, r3, #8
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f04f 32ff 	mov.w	r2, #4294967295
 800259c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f103 0208 	add.w	r2, r3, #8
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f103 0208 	add.w	r2, r3, #8
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025de:	b480      	push	{r7}
 80025e0:	b085      	sub	sp, #20
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	601a      	str	r2, [r3, #0]
}
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002626:	b480      	push	{r7}
 8002628:	b085      	sub	sp, #20
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263c:	d103      	bne.n	8002646 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	e00c      	b.n	8002660 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3308      	adds	r3, #8
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	e002      	b.n	8002654 <vListInsert+0x2e>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	429a      	cmp	r2, r3
 800265e:	d2f6      	bcs.n	800264e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	601a      	str	r2, [r3, #0]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6892      	ldr	r2, [r2, #8]
 80026ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6852      	ldr	r2, [r2, #4]
 80026b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d103      	bne.n	80026cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	1e5a      	subs	r2, r3, #1
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	3b04      	subs	r3, #4
 80026fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002704:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3b04      	subs	r3, #4
 800270a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f023 0201 	bic.w	r2, r3, #1
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	3b04      	subs	r3, #4
 800271a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800271c:	4a0c      	ldr	r2, [pc, #48]	; (8002750 <pxPortInitialiseStack+0x64>)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	3b14      	subs	r3, #20
 8002726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3b04      	subs	r3, #4
 8002732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f06f 0202 	mvn.w	r2, #2
 800273a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	3b20      	subs	r3, #32
 8002740:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002742:	68fb      	ldr	r3, [r7, #12]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	08002755 	.word	0x08002755

08002754 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <prvTaskExitError+0x54>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002766:	d00a      	beq.n	800277e <prvTaskExitError+0x2a>
	__asm volatile
 8002768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276c:	f383 8811 	msr	BASEPRI, r3
 8002770:	f3bf 8f6f 	isb	sy
 8002774:	f3bf 8f4f 	dsb	sy
 8002778:	60fb      	str	r3, [r7, #12]
}
 800277a:	bf00      	nop
 800277c:	e7fe      	b.n	800277c <prvTaskExitError+0x28>
	__asm volatile
 800277e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002782:	f383 8811 	msr	BASEPRI, r3
 8002786:	f3bf 8f6f 	isb	sy
 800278a:	f3bf 8f4f 	dsb	sy
 800278e:	60bb      	str	r3, [r7, #8]
}
 8002790:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002792:	bf00      	nop
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0fc      	beq.n	8002794 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800279a:	bf00      	nop
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	2000000c 	.word	0x2000000c
 80027ac:	00000000 	.word	0x00000000

080027b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80027b0:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <pxCurrentTCBConst2>)
 80027b2:	6819      	ldr	r1, [r3, #0]
 80027b4:	6808      	ldr	r0, [r1, #0]
 80027b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027ba:	f380 8809 	msr	PSP, r0
 80027be:	f3bf 8f6f 	isb	sy
 80027c2:	f04f 0000 	mov.w	r0, #0
 80027c6:	f380 8811 	msr	BASEPRI, r0
 80027ca:	4770      	bx	lr
 80027cc:	f3af 8000 	nop.w

080027d0 <pxCurrentTCBConst2>:
 80027d0:	20003f6c 	.word	0x20003f6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop

080027d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80027d8:	4808      	ldr	r0, [pc, #32]	; (80027fc <prvPortStartFirstTask+0x24>)
 80027da:	6800      	ldr	r0, [r0, #0]
 80027dc:	6800      	ldr	r0, [r0, #0]
 80027de:	f380 8808 	msr	MSP, r0
 80027e2:	f04f 0000 	mov.w	r0, #0
 80027e6:	f380 8814 	msr	CONTROL, r0
 80027ea:	b662      	cpsie	i
 80027ec:	b661      	cpsie	f
 80027ee:	f3bf 8f4f 	dsb	sy
 80027f2:	f3bf 8f6f 	isb	sy
 80027f6:	df00      	svc	0
 80027f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80027fa:	bf00      	nop
 80027fc:	e000ed08 	.word	0xe000ed08

08002800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002806:	4b46      	ldr	r3, [pc, #280]	; (8002920 <xPortStartScheduler+0x120>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a46      	ldr	r2, [pc, #280]	; (8002924 <xPortStartScheduler+0x124>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d10a      	bne.n	8002826 <xPortStartScheduler+0x26>
	__asm volatile
 8002810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002814:	f383 8811 	msr	BASEPRI, r3
 8002818:	f3bf 8f6f 	isb	sy
 800281c:	f3bf 8f4f 	dsb	sy
 8002820:	613b      	str	r3, [r7, #16]
}
 8002822:	bf00      	nop
 8002824:	e7fe      	b.n	8002824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002826:	4b3e      	ldr	r3, [pc, #248]	; (8002920 <xPortStartScheduler+0x120>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a3f      	ldr	r2, [pc, #252]	; (8002928 <xPortStartScheduler+0x128>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d10a      	bne.n	8002846 <xPortStartScheduler+0x46>
	__asm volatile
 8002830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002834:	f383 8811 	msr	BASEPRI, r3
 8002838:	f3bf 8f6f 	isb	sy
 800283c:	f3bf 8f4f 	dsb	sy
 8002840:	60fb      	str	r3, [r7, #12]
}
 8002842:	bf00      	nop
 8002844:	e7fe      	b.n	8002844 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002846:	4b39      	ldr	r3, [pc, #228]	; (800292c <xPortStartScheduler+0x12c>)
 8002848:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	22ff      	movs	r2, #255	; 0xff
 8002856:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002868:	b2da      	uxtb	r2, r3
 800286a:	4b31      	ldr	r3, [pc, #196]	; (8002930 <xPortStartScheduler+0x130>)
 800286c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800286e:	4b31      	ldr	r3, [pc, #196]	; (8002934 <xPortStartScheduler+0x134>)
 8002870:	2207      	movs	r2, #7
 8002872:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002874:	e009      	b.n	800288a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002876:	4b2f      	ldr	r3, [pc, #188]	; (8002934 <xPortStartScheduler+0x134>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	3b01      	subs	r3, #1
 800287c:	4a2d      	ldr	r2, [pc, #180]	; (8002934 <xPortStartScheduler+0x134>)
 800287e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002880:	78fb      	ldrb	r3, [r7, #3]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	b2db      	uxtb	r3, r3
 8002888:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002892:	2b80      	cmp	r3, #128	; 0x80
 8002894:	d0ef      	beq.n	8002876 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002896:	4b27      	ldr	r3, [pc, #156]	; (8002934 <xPortStartScheduler+0x134>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f1c3 0307 	rsb	r3, r3, #7
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d00a      	beq.n	80028b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80028a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a6:	f383 8811 	msr	BASEPRI, r3
 80028aa:	f3bf 8f6f 	isb	sy
 80028ae:	f3bf 8f4f 	dsb	sy
 80028b2:	60bb      	str	r3, [r7, #8]
}
 80028b4:	bf00      	nop
 80028b6:	e7fe      	b.n	80028b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80028b8:	4b1e      	ldr	r3, [pc, #120]	; (8002934 <xPortStartScheduler+0x134>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	021b      	lsls	r3, r3, #8
 80028be:	4a1d      	ldr	r2, [pc, #116]	; (8002934 <xPortStartScheduler+0x134>)
 80028c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80028c2:	4b1c      	ldr	r3, [pc, #112]	; (8002934 <xPortStartScheduler+0x134>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028ca:	4a1a      	ldr	r2, [pc, #104]	; (8002934 <xPortStartScheduler+0x134>)
 80028cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80028d6:	4b18      	ldr	r3, [pc, #96]	; (8002938 <xPortStartScheduler+0x138>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a17      	ldr	r2, [pc, #92]	; (8002938 <xPortStartScheduler+0x138>)
 80028dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80028e2:	4b15      	ldr	r3, [pc, #84]	; (8002938 <xPortStartScheduler+0x138>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a14      	ldr	r2, [pc, #80]	; (8002938 <xPortStartScheduler+0x138>)
 80028e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80028ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80028ee:	f000 f8dd 	bl	8002aac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80028f2:	4b12      	ldr	r3, [pc, #72]	; (800293c <xPortStartScheduler+0x13c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80028f8:	f000 f8fc 	bl	8002af4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80028fc:	4b10      	ldr	r3, [pc, #64]	; (8002940 <xPortStartScheduler+0x140>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a0f      	ldr	r2, [pc, #60]	; (8002940 <xPortStartScheduler+0x140>)
 8002902:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002906:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002908:	f7ff ff66 	bl	80027d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800290c:	f000 fc86 	bl	800321c <vTaskSwitchContext>
	prvTaskExitError();
 8002910:	f7ff ff20 	bl	8002754 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	e000ed00 	.word	0xe000ed00
 8002924:	410fc271 	.word	0x410fc271
 8002928:	410fc270 	.word	0x410fc270
 800292c:	e000e400 	.word	0xe000e400
 8002930:	20003f64 	.word	0x20003f64
 8002934:	20003f68 	.word	0x20003f68
 8002938:	e000ed20 	.word	0xe000ed20
 800293c:	2000000c 	.word	0x2000000c
 8002940:	e000ef34 	.word	0xe000ef34

08002944 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
	__asm volatile
 800294a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294e:	f383 8811 	msr	BASEPRI, r3
 8002952:	f3bf 8f6f 	isb	sy
 8002956:	f3bf 8f4f 	dsb	sy
 800295a:	607b      	str	r3, [r7, #4]
}
 800295c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800295e:	4b0f      	ldr	r3, [pc, #60]	; (800299c <vPortEnterCritical+0x58>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	3301      	adds	r3, #1
 8002964:	4a0d      	ldr	r2, [pc, #52]	; (800299c <vPortEnterCritical+0x58>)
 8002966:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <vPortEnterCritical+0x58>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d10f      	bne.n	8002990 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <vPortEnterCritical+0x5c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <vPortEnterCritical+0x4c>
	__asm volatile
 800297a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297e:	f383 8811 	msr	BASEPRI, r3
 8002982:	f3bf 8f6f 	isb	sy
 8002986:	f3bf 8f4f 	dsb	sy
 800298a:	603b      	str	r3, [r7, #0]
}
 800298c:	bf00      	nop
 800298e:	e7fe      	b.n	800298e <vPortEnterCritical+0x4a>
	}
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	2000000c 	.word	0x2000000c
 80029a0:	e000ed04 	.word	0xe000ed04

080029a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80029aa:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <vPortExitCritical+0x50>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10a      	bne.n	80029c8 <vPortExitCritical+0x24>
	__asm volatile
 80029b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b6:	f383 8811 	msr	BASEPRI, r3
 80029ba:	f3bf 8f6f 	isb	sy
 80029be:	f3bf 8f4f 	dsb	sy
 80029c2:	607b      	str	r3, [r7, #4]
}
 80029c4:	bf00      	nop
 80029c6:	e7fe      	b.n	80029c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80029c8:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <vPortExitCritical+0x50>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	4a09      	ldr	r2, [pc, #36]	; (80029f4 <vPortExitCritical+0x50>)
 80029d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <vPortExitCritical+0x50>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d105      	bne.n	80029e6 <vPortExitCritical+0x42>
 80029da:	2300      	movs	r3, #0
 80029dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80029e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	2000000c 	.word	0x2000000c
	...

08002a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002a00:	f3ef 8009 	mrs	r0, PSP
 8002a04:	f3bf 8f6f 	isb	sy
 8002a08:	4b15      	ldr	r3, [pc, #84]	; (8002a60 <pxCurrentTCBConst>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	f01e 0f10 	tst.w	lr, #16
 8002a10:	bf08      	it	eq
 8002a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a1a:	6010      	str	r0, [r2, #0]
 8002a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002a24:	f380 8811 	msr	BASEPRI, r0
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	f000 fbf4 	bl	800321c <vTaskSwitchContext>
 8002a34:	f04f 0000 	mov.w	r0, #0
 8002a38:	f380 8811 	msr	BASEPRI, r0
 8002a3c:	bc09      	pop	{r0, r3}
 8002a3e:	6819      	ldr	r1, [r3, #0]
 8002a40:	6808      	ldr	r0, [r1, #0]
 8002a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a46:	f01e 0f10 	tst.w	lr, #16
 8002a4a:	bf08      	it	eq
 8002a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002a50:	f380 8809 	msr	PSP, r0
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	f3af 8000 	nop.w

08002a60 <pxCurrentTCBConst>:
 8002a60:	20003f6c 	.word	0x20003f6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002a64:	bf00      	nop
 8002a66:	bf00      	nop

08002a68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8002a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a72:	f383 8811 	msr	BASEPRI, r3
 8002a76:	f3bf 8f6f 	isb	sy
 8002a7a:	f3bf 8f4f 	dsb	sy
 8002a7e:	607b      	str	r3, [r7, #4]
}
 8002a80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002a82:	f000 fb13 	bl	80030ac <xTaskIncrementTick>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <xPortSysTickHandler+0x40>)
 8002a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	2300      	movs	r3, #0
 8002a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	f383 8811 	msr	BASEPRI, r3
}
 8002a9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	e000ed04 	.word	0xe000ed04

08002aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <vPortSetupTimerInterrupt+0x34>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <vPortSetupTimerInterrupt+0x38>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002abc:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <vPortSetupTimerInterrupt+0x3c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <vPortSetupTimerInterrupt+0x40>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	099b      	lsrs	r3, r3, #6
 8002ac8:	4a09      	ldr	r2, [pc, #36]	; (8002af0 <vPortSetupTimerInterrupt+0x44>)
 8002aca:	3b01      	subs	r3, #1
 8002acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002ace:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <vPortSetupTimerInterrupt+0x34>)
 8002ad0:	2207      	movs	r2, #7
 8002ad2:	601a      	str	r2, [r3, #0]
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	e000e010 	.word	0xe000e010
 8002ae4:	e000e018 	.word	0xe000e018
 8002ae8:	20000000 	.word	0x20000000
 8002aec:	10624dd3 	.word	0x10624dd3
 8002af0:	e000e014 	.word	0xe000e014

08002af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002af4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002b04 <vPortEnableVFP+0x10>
 8002af8:	6801      	ldr	r1, [r0, #0]
 8002afa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002afe:	6001      	str	r1, [r0, #0]
 8002b00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002b02:	bf00      	nop
 8002b04:	e000ed88 	.word	0xe000ed88

08002b08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08e      	sub	sp, #56	; 0x38
 8002b0c:	af04      	add	r7, sp, #16
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10a      	bne.n	8002b32 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	623b      	str	r3, [r7, #32]
}
 8002b2e:	bf00      	nop
 8002b30:	e7fe      	b.n	8002b30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10a      	bne.n	8002b4e <xTaskCreateStatic+0x46>
	__asm volatile
 8002b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	61fb      	str	r3, [r7, #28]
}
 8002b4a:	bf00      	nop
 8002b4c:	e7fe      	b.n	8002b4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002b4e:	2354      	movs	r3, #84	; 0x54
 8002b50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2b54      	cmp	r3, #84	; 0x54
 8002b56:	d00a      	beq.n	8002b6e <xTaskCreateStatic+0x66>
	__asm volatile
 8002b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5c:	f383 8811 	msr	BASEPRI, r3
 8002b60:	f3bf 8f6f 	isb	sy
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	61bb      	str	r3, [r7, #24]
}
 8002b6a:	bf00      	nop
 8002b6c:	e7fe      	b.n	8002b6c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002b6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d01e      	beq.n	8002bb4 <xTaskCreateStatic+0xac>
 8002b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d01b      	beq.n	8002bb4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	2202      	movs	r2, #2
 8002b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002b8e:	2300      	movs	r3, #0
 8002b90:	9303      	str	r3, [sp, #12]
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	9302      	str	r3, [sp, #8]
 8002b96:	f107 0314 	add.w	r3, r7, #20
 8002b9a:	9301      	str	r3, [sp, #4]
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f850 	bl	8002c4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002bac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bae:	f000 f8d5 	bl	8002d5c <prvAddNewTaskToReadyList>
 8002bb2:	e001      	b.n	8002bb8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002bb8:	697b      	ldr	r3, [r7, #20]
	}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3728      	adds	r7, #40	; 0x28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b08c      	sub	sp, #48	; 0x30
 8002bc6:	af04      	add	r7, sp, #16
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	603b      	str	r3, [r7, #0]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002bd2:	88fb      	ldrh	r3, [r7, #6]
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff faea 	bl	80021b0 <pvPortMalloc>
 8002bdc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00e      	beq.n	8002c02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002be4:	2054      	movs	r0, #84	; 0x54
 8002be6:	f7ff fae3 	bl	80021b0 <pvPortMalloc>
 8002bea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30
 8002bf8:	e005      	b.n	8002c06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002bfa:	6978      	ldr	r0, [r7, #20]
 8002bfc:	f7ff fba4 	bl	8002348 <vPortFree>
 8002c00:	e001      	b.n	8002c06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d017      	beq.n	8002c3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c14:	88fa      	ldrh	r2, [r7, #6]
 8002c16:	2300      	movs	r3, #0
 8002c18:	9303      	str	r3, [sp, #12]
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	9302      	str	r3, [sp, #8]
 8002c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c20:	9301      	str	r3, [sp, #4]
 8002c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f80e 	bl	8002c4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c30:	69f8      	ldr	r0, [r7, #28]
 8002c32:	f000 f893 	bl	8002d5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c36:	2301      	movs	r3, #1
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	e002      	b.n	8002c42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c42:	69bb      	ldr	r3, [r7, #24]
	}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3720      	adds	r7, #32
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
 8002c58:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c64:	3b01      	subs	r3, #1
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f023 0307 	bic.w	r3, r3, #7
 8002c72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c82:	f383 8811 	msr	BASEPRI, r3
 8002c86:	f3bf 8f6f 	isb	sy
 8002c8a:	f3bf 8f4f 	dsb	sy
 8002c8e:	617b      	str	r3, [r7, #20]
}
 8002c90:	bf00      	nop
 8002c92:	e7fe      	b.n	8002c92 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d01f      	beq.n	8002cda <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	e012      	b.n	8002cc6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	7819      	ldrb	r1, [r3, #0]
 8002ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	4413      	add	r3, r2
 8002cae:	3334      	adds	r3, #52	; 0x34
 8002cb0:	460a      	mov	r2, r1
 8002cb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	4413      	add	r3, r2
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d006      	beq.n	8002cce <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	2b0f      	cmp	r3, #15
 8002cca:	d9e9      	bls.n	8002ca0 <prvInitialiseNewTask+0x54>
 8002ccc:	e000      	b.n	8002cd0 <prvInitialiseNewTask+0x84>
			{
				break;
 8002cce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cd8:	e003      	b.n	8002ce2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce4:	2b06      	cmp	r3, #6
 8002ce6:	d901      	bls.n	8002cec <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ce8:	2306      	movs	r3, #6
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cf0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cf6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	3304      	adds	r3, #4
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fc5e 	bl	80025c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0a:	3318      	adds	r3, #24
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fc59 	bl	80025c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	f1c3 0207 	rsb	r2, r3, #7
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	68f9      	ldr	r1, [r7, #12]
 8002d3a:	69b8      	ldr	r0, [r7, #24]
 8002d3c:	f7ff fcd6 	bl	80026ec <pxPortInitialiseStack>
 8002d40:	4602      	mov	r2, r0
 8002d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d44:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d52:	bf00      	nop
 8002d54:	3720      	adds	r7, #32
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002d64:	f7ff fdee 	bl	8002944 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002d68:	4b2a      	ldr	r3, [pc, #168]	; (8002e14 <prvAddNewTaskToReadyList+0xb8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	4a29      	ldr	r2, [pc, #164]	; (8002e14 <prvAddNewTaskToReadyList+0xb8>)
 8002d70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002d72:	4b29      	ldr	r3, [pc, #164]	; (8002e18 <prvAddNewTaskToReadyList+0xbc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002d7a:	4a27      	ldr	r2, [pc, #156]	; (8002e18 <prvAddNewTaskToReadyList+0xbc>)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d80:	4b24      	ldr	r3, [pc, #144]	; (8002e14 <prvAddNewTaskToReadyList+0xb8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d110      	bne.n	8002daa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002d88:	f000 fabc 	bl	8003304 <prvInitialiseTaskLists>
 8002d8c:	e00d      	b.n	8002daa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002d8e:	4b23      	ldr	r3, [pc, #140]	; (8002e1c <prvAddNewTaskToReadyList+0xc0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d96:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <prvAddNewTaskToReadyList+0xbc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d802      	bhi.n	8002daa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002da4:	4a1c      	ldr	r2, [pc, #112]	; (8002e18 <prvAddNewTaskToReadyList+0xbc>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002daa:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <prvAddNewTaskToReadyList+0xc4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3301      	adds	r3, #1
 8002db0:	4a1b      	ldr	r2, [pc, #108]	; (8002e20 <prvAddNewTaskToReadyList+0xc4>)
 8002db2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	2201      	movs	r2, #1
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <prvAddNewTaskToReadyList+0xc8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	4a18      	ldr	r2, [pc, #96]	; (8002e24 <prvAddNewTaskToReadyList+0xc8>)
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4a15      	ldr	r2, [pc, #84]	; (8002e28 <prvAddNewTaskToReadyList+0xcc>)
 8002dd4:	441a      	add	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4610      	mov	r0, r2
 8002dde:	f7ff fbfe 	bl	80025de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002de2:	f7ff fddf 	bl	80029a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002de6:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <prvAddNewTaskToReadyList+0xc0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00e      	beq.n	8002e0c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <prvAddNewTaskToReadyList+0xbc>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d207      	bcs.n	8002e0c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <prvAddNewTaskToReadyList+0xd0>)
 8002dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e0c:	bf00      	nop
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	2000406c 	.word	0x2000406c
 8002e18:	20003f6c 	.word	0x20003f6c
 8002e1c:	20004078 	.word	0x20004078
 8002e20:	20004088 	.word	0x20004088
 8002e24:	20004074 	.word	0x20004074
 8002e28:	20003f70 	.word	0x20003f70
 8002e2c:	e000ed04 	.word	0xe000ed04

08002e30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d017      	beq.n	8002e72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e42:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <vTaskDelay+0x60>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <vTaskDelay+0x30>
	__asm volatile
 8002e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	60bb      	str	r3, [r7, #8]
}
 8002e5c:	bf00      	nop
 8002e5e:	e7fe      	b.n	8002e5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002e60:	f000 f87a 	bl	8002f58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e64:	2100      	movs	r1, #0
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fb28 	bl	80034bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002e6c:	f000 f882 	bl	8002f74 <xTaskResumeAll>
 8002e70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d107      	bne.n	8002e88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <vTaskDelay+0x64>)
 8002e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e88:	bf00      	nop
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20004094 	.word	0x20004094
 8002e94:	e000ed04 	.word	0xe000ed04

08002e98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ea6:	463a      	mov	r2, r7
 8002ea8:	1d39      	adds	r1, r7, #4
 8002eaa:	f107 0308 	add.w	r3, r7, #8
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd fb18 	bl	80004e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002eb4:	6839      	ldr	r1, [r7, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	9202      	str	r2, [sp, #8]
 8002ebc:	9301      	str	r3, [sp, #4]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	460a      	mov	r2, r1
 8002ec6:	491e      	ldr	r1, [pc, #120]	; (8002f40 <vTaskStartScheduler+0xa8>)
 8002ec8:	481e      	ldr	r0, [pc, #120]	; (8002f44 <vTaskStartScheduler+0xac>)
 8002eca:	f7ff fe1d 	bl	8002b08 <xTaskCreateStatic>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4a1d      	ldr	r2, [pc, #116]	; (8002f48 <vTaskStartScheduler+0xb0>)
 8002ed2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ed4:	4b1c      	ldr	r3, [pc, #112]	; (8002f48 <vTaskStartScheduler+0xb0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002edc:	2301      	movs	r3, #1
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	e001      	b.n	8002ee6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d116      	bne.n	8002f1a <vTaskStartScheduler+0x82>
	__asm volatile
 8002eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef0:	f383 8811 	msr	BASEPRI, r3
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	613b      	str	r3, [r7, #16]
}
 8002efe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002f00:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <vTaskStartScheduler+0xb4>)
 8002f02:	f04f 32ff 	mov.w	r2, #4294967295
 8002f06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002f08:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <vTaskStartScheduler+0xb8>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f0e:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <vTaskStartScheduler+0xbc>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002f14:	f7ff fc74 	bl	8002800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002f18:	e00e      	b.n	8002f38 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d10a      	bne.n	8002f38 <vTaskStartScheduler+0xa0>
	__asm volatile
 8002f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	60fb      	str	r3, [r7, #12]
}
 8002f34:	bf00      	nop
 8002f36:	e7fe      	b.n	8002f36 <vTaskStartScheduler+0x9e>
}
 8002f38:	bf00      	nop
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	080039c8 	.word	0x080039c8
 8002f44:	080032d5 	.word	0x080032d5
 8002f48:	20004090 	.word	0x20004090
 8002f4c:	2000408c 	.word	0x2000408c
 8002f50:	20004078 	.word	0x20004078
 8002f54:	20004070 	.word	0x20004070

08002f58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002f5c:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <vTaskSuspendAll+0x18>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3301      	adds	r3, #1
 8002f62:	4a03      	ldr	r2, [pc, #12]	; (8002f70 <vTaskSuspendAll+0x18>)
 8002f64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002f66:	bf00      	nop
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	20004094 	.word	0x20004094

08002f74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002f82:	4b41      	ldr	r3, [pc, #260]	; (8003088 <xTaskResumeAll+0x114>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10a      	bne.n	8002fa0 <xTaskResumeAll+0x2c>
	__asm volatile
 8002f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8e:	f383 8811 	msr	BASEPRI, r3
 8002f92:	f3bf 8f6f 	isb	sy
 8002f96:	f3bf 8f4f 	dsb	sy
 8002f9a:	603b      	str	r3, [r7, #0]
}
 8002f9c:	bf00      	nop
 8002f9e:	e7fe      	b.n	8002f9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002fa0:	f7ff fcd0 	bl	8002944 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002fa4:	4b38      	ldr	r3, [pc, #224]	; (8003088 <xTaskResumeAll+0x114>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	4a37      	ldr	r2, [pc, #220]	; (8003088 <xTaskResumeAll+0x114>)
 8002fac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fae:	4b36      	ldr	r3, [pc, #216]	; (8003088 <xTaskResumeAll+0x114>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d161      	bne.n	800307a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002fb6:	4b35      	ldr	r3, [pc, #212]	; (800308c <xTaskResumeAll+0x118>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d05d      	beq.n	800307a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fbe:	e02e      	b.n	800301e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fc0:	4b33      	ldr	r3, [pc, #204]	; (8003090 <xTaskResumeAll+0x11c>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	3318      	adds	r3, #24
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff fb63 	bl	8002698 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff fb5e 	bl	8002698 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	4b2b      	ldr	r3, [pc, #172]	; (8003094 <xTaskResumeAll+0x120>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	4a2a      	ldr	r2, [pc, #168]	; (8003094 <xTaskResumeAll+0x120>)
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4a27      	ldr	r2, [pc, #156]	; (8003098 <xTaskResumeAll+0x124>)
 8002ffc:	441a      	add	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	3304      	adds	r3, #4
 8003002:	4619      	mov	r1, r3
 8003004:	4610      	mov	r0, r2
 8003006:	f7ff faea 	bl	80025de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300e:	4b23      	ldr	r3, [pc, #140]	; (800309c <xTaskResumeAll+0x128>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	429a      	cmp	r2, r3
 8003016:	d302      	bcc.n	800301e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003018:	4b21      	ldr	r3, [pc, #132]	; (80030a0 <xTaskResumeAll+0x12c>)
 800301a:	2201      	movs	r2, #1
 800301c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800301e:	4b1c      	ldr	r3, [pc, #112]	; (8003090 <xTaskResumeAll+0x11c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1cc      	bne.n	8002fc0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800302c:	f000 fa08 	bl	8003440 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003030:	4b1c      	ldr	r3, [pc, #112]	; (80030a4 <xTaskResumeAll+0x130>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d010      	beq.n	800305e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800303c:	f000 f836 	bl	80030ac <xTaskIncrementTick>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003046:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <xTaskResumeAll+0x12c>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3b01      	subs	r3, #1
 8003050:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f1      	bne.n	800303c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003058:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <xTaskResumeAll+0x130>)
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800305e:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <xTaskResumeAll+0x12c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003066:	2301      	movs	r3, #1
 8003068:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800306a:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <xTaskResumeAll+0x134>)
 800306c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800307a:	f7ff fc93 	bl	80029a4 <vPortExitCritical>

	return xAlreadyYielded;
 800307e:	68bb      	ldr	r3, [r7, #8]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20004094 	.word	0x20004094
 800308c:	2000406c 	.word	0x2000406c
 8003090:	2000402c 	.word	0x2000402c
 8003094:	20004074 	.word	0x20004074
 8003098:	20003f70 	.word	0x20003f70
 800309c:	20003f6c 	.word	0x20003f6c
 80030a0:	20004080 	.word	0x20004080
 80030a4:	2000407c 	.word	0x2000407c
 80030a8:	e000ed04 	.word	0xe000ed04

080030ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030b6:	4b4e      	ldr	r3, [pc, #312]	; (80031f0 <xTaskIncrementTick+0x144>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f040 808e 	bne.w	80031dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80030c0:	4b4c      	ldr	r3, [pc, #304]	; (80031f4 <xTaskIncrementTick+0x148>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3301      	adds	r3, #1
 80030c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80030c8:	4a4a      	ldr	r2, [pc, #296]	; (80031f4 <xTaskIncrementTick+0x148>)
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d120      	bne.n	8003116 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80030d4:	4b48      	ldr	r3, [pc, #288]	; (80031f8 <xTaskIncrementTick+0x14c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80030de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e2:	f383 8811 	msr	BASEPRI, r3
 80030e6:	f3bf 8f6f 	isb	sy
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	603b      	str	r3, [r7, #0]
}
 80030f0:	bf00      	nop
 80030f2:	e7fe      	b.n	80030f2 <xTaskIncrementTick+0x46>
 80030f4:	4b40      	ldr	r3, [pc, #256]	; (80031f8 <xTaskIncrementTick+0x14c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	4b40      	ldr	r3, [pc, #256]	; (80031fc <xTaskIncrementTick+0x150>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a3e      	ldr	r2, [pc, #248]	; (80031f8 <xTaskIncrementTick+0x14c>)
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	4a3e      	ldr	r2, [pc, #248]	; (80031fc <xTaskIncrementTick+0x150>)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	4b3d      	ldr	r3, [pc, #244]	; (8003200 <xTaskIncrementTick+0x154>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3301      	adds	r3, #1
 800310e:	4a3c      	ldr	r2, [pc, #240]	; (8003200 <xTaskIncrementTick+0x154>)
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	f000 f995 	bl	8003440 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003116:	4b3b      	ldr	r3, [pc, #236]	; (8003204 <xTaskIncrementTick+0x158>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	429a      	cmp	r2, r3
 800311e:	d348      	bcc.n	80031b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003120:	4b35      	ldr	r3, [pc, #212]	; (80031f8 <xTaskIncrementTick+0x14c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d104      	bne.n	8003134 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800312a:	4b36      	ldr	r3, [pc, #216]	; (8003204 <xTaskIncrementTick+0x158>)
 800312c:	f04f 32ff 	mov.w	r2, #4294967295
 8003130:	601a      	str	r2, [r3, #0]
					break;
 8003132:	e03e      	b.n	80031b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003134:	4b30      	ldr	r3, [pc, #192]	; (80031f8 <xTaskIncrementTick+0x14c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	429a      	cmp	r2, r3
 800314a:	d203      	bcs.n	8003154 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800314c:	4a2d      	ldr	r2, [pc, #180]	; (8003204 <xTaskIncrementTick+0x158>)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003152:	e02e      	b.n	80031b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	3304      	adds	r3, #4
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fa9d 	bl	8002698 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	2b00      	cmp	r3, #0
 8003164:	d004      	beq.n	8003170 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	3318      	adds	r3, #24
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff fa94 	bl	8002698 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	2201      	movs	r2, #1
 8003176:	409a      	lsls	r2, r3
 8003178:	4b23      	ldr	r3, [pc, #140]	; (8003208 <xTaskIncrementTick+0x15c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4313      	orrs	r3, r2
 800317e:	4a22      	ldr	r2, [pc, #136]	; (8003208 <xTaskIncrementTick+0x15c>)
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003186:	4613      	mov	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4a1f      	ldr	r2, [pc, #124]	; (800320c <xTaskIncrementTick+0x160>)
 8003190:	441a      	add	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	3304      	adds	r3, #4
 8003196:	4619      	mov	r1, r3
 8003198:	4610      	mov	r0, r2
 800319a:	f7ff fa20 	bl	80025de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a2:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <xTaskIncrementTick+0x164>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d3b9      	bcc.n	8003120 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80031ac:	2301      	movs	r3, #1
 80031ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031b0:	e7b6      	b.n	8003120 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80031b2:	4b17      	ldr	r3, [pc, #92]	; (8003210 <xTaskIncrementTick+0x164>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b8:	4914      	ldr	r1, [pc, #80]	; (800320c <xTaskIncrementTick+0x160>)
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d901      	bls.n	80031ce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80031ca:	2301      	movs	r3, #1
 80031cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80031ce:	4b11      	ldr	r3, [pc, #68]	; (8003214 <xTaskIncrementTick+0x168>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d007      	beq.n	80031e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80031d6:	2301      	movs	r3, #1
 80031d8:	617b      	str	r3, [r7, #20]
 80031da:	e004      	b.n	80031e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80031dc:	4b0e      	ldr	r3, [pc, #56]	; (8003218 <xTaskIncrementTick+0x16c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3301      	adds	r3, #1
 80031e2:	4a0d      	ldr	r2, [pc, #52]	; (8003218 <xTaskIncrementTick+0x16c>)
 80031e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80031e6:	697b      	ldr	r3, [r7, #20]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20004094 	.word	0x20004094
 80031f4:	20004070 	.word	0x20004070
 80031f8:	20004024 	.word	0x20004024
 80031fc:	20004028 	.word	0x20004028
 8003200:	20004084 	.word	0x20004084
 8003204:	2000408c 	.word	0x2000408c
 8003208:	20004074 	.word	0x20004074
 800320c:	20003f70 	.word	0x20003f70
 8003210:	20003f6c 	.word	0x20003f6c
 8003214:	20004080 	.word	0x20004080
 8003218:	2000407c 	.word	0x2000407c

0800321c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003222:	4b27      	ldr	r3, [pc, #156]	; (80032c0 <vTaskSwitchContext+0xa4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800322a:	4b26      	ldr	r3, [pc, #152]	; (80032c4 <vTaskSwitchContext+0xa8>)
 800322c:	2201      	movs	r2, #1
 800322e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003230:	e03f      	b.n	80032b2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003232:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <vTaskSwitchContext+0xa8>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003238:	4b23      	ldr	r3, [pc, #140]	; (80032c8 <vTaskSwitchContext+0xac>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	fab3 f383 	clz	r3, r3
 8003244:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003246:	7afb      	ldrb	r3, [r7, #11]
 8003248:	f1c3 031f 	rsb	r3, r3, #31
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	491f      	ldr	r1, [pc, #124]	; (80032cc <vTaskSwitchContext+0xb0>)
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10a      	bne.n	8003278 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003266:	f383 8811 	msr	BASEPRI, r3
 800326a:	f3bf 8f6f 	isb	sy
 800326e:	f3bf 8f4f 	dsb	sy
 8003272:	607b      	str	r3, [r7, #4]
}
 8003274:	bf00      	nop
 8003276:	e7fe      	b.n	8003276 <vTaskSwitchContext+0x5a>
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4a12      	ldr	r2, [pc, #72]	; (80032cc <vTaskSwitchContext+0xb0>)
 8003284:	4413      	add	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	605a      	str	r2, [r3, #4]
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	3308      	adds	r3, #8
 800329a:	429a      	cmp	r2, r3
 800329c:	d104      	bne.n	80032a8 <vTaskSwitchContext+0x8c>
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	605a      	str	r2, [r3, #4]
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	4a08      	ldr	r2, [pc, #32]	; (80032d0 <vTaskSwitchContext+0xb4>)
 80032b0:	6013      	str	r3, [r2, #0]
}
 80032b2:	bf00      	nop
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	20004094 	.word	0x20004094
 80032c4:	20004080 	.word	0x20004080
 80032c8:	20004074 	.word	0x20004074
 80032cc:	20003f70 	.word	0x20003f70
 80032d0:	20003f6c 	.word	0x20003f6c

080032d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80032dc:	f000 f852 	bl	8003384 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80032e0:	4b06      	ldr	r3, [pc, #24]	; (80032fc <prvIdleTask+0x28>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d9f9      	bls.n	80032dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <prvIdleTask+0x2c>)
 80032ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80032f8:	e7f0      	b.n	80032dc <prvIdleTask+0x8>
 80032fa:	bf00      	nop
 80032fc:	20003f70 	.word	0x20003f70
 8003300:	e000ed04 	.word	0xe000ed04

08003304 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800330a:	2300      	movs	r3, #0
 800330c:	607b      	str	r3, [r7, #4]
 800330e:	e00c      	b.n	800332a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4a12      	ldr	r2, [pc, #72]	; (8003364 <prvInitialiseTaskLists+0x60>)
 800331c:	4413      	add	r3, r2
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff f930 	bl	8002584 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3301      	adds	r3, #1
 8003328:	607b      	str	r3, [r7, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b06      	cmp	r3, #6
 800332e:	d9ef      	bls.n	8003310 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003330:	480d      	ldr	r0, [pc, #52]	; (8003368 <prvInitialiseTaskLists+0x64>)
 8003332:	f7ff f927 	bl	8002584 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003336:	480d      	ldr	r0, [pc, #52]	; (800336c <prvInitialiseTaskLists+0x68>)
 8003338:	f7ff f924 	bl	8002584 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800333c:	480c      	ldr	r0, [pc, #48]	; (8003370 <prvInitialiseTaskLists+0x6c>)
 800333e:	f7ff f921 	bl	8002584 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003342:	480c      	ldr	r0, [pc, #48]	; (8003374 <prvInitialiseTaskLists+0x70>)
 8003344:	f7ff f91e 	bl	8002584 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003348:	480b      	ldr	r0, [pc, #44]	; (8003378 <prvInitialiseTaskLists+0x74>)
 800334a:	f7ff f91b 	bl	8002584 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800334e:	4b0b      	ldr	r3, [pc, #44]	; (800337c <prvInitialiseTaskLists+0x78>)
 8003350:	4a05      	ldr	r2, [pc, #20]	; (8003368 <prvInitialiseTaskLists+0x64>)
 8003352:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003354:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <prvInitialiseTaskLists+0x7c>)
 8003356:	4a05      	ldr	r2, [pc, #20]	; (800336c <prvInitialiseTaskLists+0x68>)
 8003358:	601a      	str	r2, [r3, #0]
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20003f70 	.word	0x20003f70
 8003368:	20003ffc 	.word	0x20003ffc
 800336c:	20004010 	.word	0x20004010
 8003370:	2000402c 	.word	0x2000402c
 8003374:	20004040 	.word	0x20004040
 8003378:	20004058 	.word	0x20004058
 800337c:	20004024 	.word	0x20004024
 8003380:	20004028 	.word	0x20004028

08003384 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800338a:	e019      	b.n	80033c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800338c:	f7ff fada 	bl	8002944 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003390:	4b10      	ldr	r3, [pc, #64]	; (80033d4 <prvCheckTasksWaitingTermination+0x50>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3304      	adds	r3, #4
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff f97b 	bl	8002698 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <prvCheckTasksWaitingTermination+0x54>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	4a0b      	ldr	r2, [pc, #44]	; (80033d8 <prvCheckTasksWaitingTermination+0x54>)
 80033aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <prvCheckTasksWaitingTermination+0x58>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3b01      	subs	r3, #1
 80033b2:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <prvCheckTasksWaitingTermination+0x58>)
 80033b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80033b6:	f7ff faf5 	bl	80029a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f810 	bl	80033e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033c0:	4b06      	ldr	r3, [pc, #24]	; (80033dc <prvCheckTasksWaitingTermination+0x58>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e1      	bne.n	800338c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80033c8:	bf00      	nop
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20004040 	.word	0x20004040
 80033d8:	2000406c 	.word	0x2000406c
 80033dc:	20004054 	.word	0x20004054

080033e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d108      	bne.n	8003404 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe ffa6 	bl	8002348 <vPortFree>
				vPortFree( pxTCB );
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7fe ffa3 	bl	8002348 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003402:	e018      	b.n	8003436 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800340a:	2b01      	cmp	r3, #1
 800340c:	d103      	bne.n	8003416 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fe ff9a 	bl	8002348 <vPortFree>
	}
 8003414:	e00f      	b.n	8003436 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800341c:	2b02      	cmp	r3, #2
 800341e:	d00a      	beq.n	8003436 <prvDeleteTCB+0x56>
	__asm volatile
 8003420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	60fb      	str	r3, [r7, #12]
}
 8003432:	bf00      	nop
 8003434:	e7fe      	b.n	8003434 <prvDeleteTCB+0x54>
	}
 8003436:	bf00      	nop
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003446:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <prvResetNextTaskUnblockTime+0x38>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d104      	bne.n	800345a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003450:	4b0a      	ldr	r3, [pc, #40]	; (800347c <prvResetNextTaskUnblockTime+0x3c>)
 8003452:	f04f 32ff 	mov.w	r2, #4294967295
 8003456:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003458:	e008      	b.n	800346c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800345a:	4b07      	ldr	r3, [pc, #28]	; (8003478 <prvResetNextTaskUnblockTime+0x38>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	4a04      	ldr	r2, [pc, #16]	; (800347c <prvResetNextTaskUnblockTime+0x3c>)
 800346a:	6013      	str	r3, [r2, #0]
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	20004024 	.word	0x20004024
 800347c:	2000408c 	.word	0x2000408c

08003480 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003486:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <xTaskGetSchedulerState+0x34>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d102      	bne.n	8003494 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800348e:	2301      	movs	r3, #1
 8003490:	607b      	str	r3, [r7, #4]
 8003492:	e008      	b.n	80034a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003494:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <xTaskGetSchedulerState+0x38>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d102      	bne.n	80034a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800349c:	2302      	movs	r3, #2
 800349e:	607b      	str	r3, [r7, #4]
 80034a0:	e001      	b.n	80034a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80034a2:	2300      	movs	r3, #0
 80034a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80034a6:	687b      	ldr	r3, [r7, #4]
	}
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	20004078 	.word	0x20004078
 80034b8:	20004094 	.word	0x20004094

080034bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80034c6:	4b29      	ldr	r3, [pc, #164]	; (800356c <prvAddCurrentTaskToDelayedList+0xb0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034cc:	4b28      	ldr	r3, [pc, #160]	; (8003570 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3304      	adds	r3, #4
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff f8e0 	bl	8002698 <uxListRemove>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10b      	bne.n	80034f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80034de:	4b24      	ldr	r3, [pc, #144]	; (8003570 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	2201      	movs	r2, #1
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43da      	mvns	r2, r3
 80034ec:	4b21      	ldr	r3, [pc, #132]	; (8003574 <prvAddCurrentTaskToDelayedList+0xb8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4013      	ands	r3, r2
 80034f2:	4a20      	ldr	r2, [pc, #128]	; (8003574 <prvAddCurrentTaskToDelayedList+0xb8>)
 80034f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fc:	d10a      	bne.n	8003514 <prvAddCurrentTaskToDelayedList+0x58>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d007      	beq.n	8003514 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003504:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3304      	adds	r3, #4
 800350a:	4619      	mov	r1, r3
 800350c:	481a      	ldr	r0, [pc, #104]	; (8003578 <prvAddCurrentTaskToDelayedList+0xbc>)
 800350e:	f7ff f866 	bl	80025de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003512:	e026      	b.n	8003562 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4413      	add	r3, r2
 800351a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800351c:	4b14      	ldr	r3, [pc, #80]	; (8003570 <prvAddCurrentTaskToDelayedList+0xb4>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	429a      	cmp	r2, r3
 800352a:	d209      	bcs.n	8003540 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800352c:	4b13      	ldr	r3, [pc, #76]	; (800357c <prvAddCurrentTaskToDelayedList+0xc0>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3304      	adds	r3, #4
 8003536:	4619      	mov	r1, r3
 8003538:	4610      	mov	r0, r2
 800353a:	f7ff f874 	bl	8002626 <vListInsert>
}
 800353e:	e010      	b.n	8003562 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003540:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3304      	adds	r3, #4
 800354a:	4619      	mov	r1, r3
 800354c:	4610      	mov	r0, r2
 800354e:	f7ff f86a 	bl	8002626 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003552:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	429a      	cmp	r2, r3
 800355a:	d202      	bcs.n	8003562 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800355c:	4a09      	ldr	r2, [pc, #36]	; (8003584 <prvAddCurrentTaskToDelayedList+0xc8>)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	6013      	str	r3, [r2, #0]
}
 8003562:	bf00      	nop
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20004070 	.word	0x20004070
 8003570:	20003f6c 	.word	0x20003f6c
 8003574:	20004074 	.word	0x20004074
 8003578:	20004058 	.word	0x20004058
 800357c:	20004028 	.word	0x20004028
 8003580:	20004024 	.word	0x20004024
 8003584:	2000408c 	.word	0x2000408c

08003588 <USART2_sendString>:
#include <stdlib.h>

#define UART_USE_IT true

int USART2_sendString(char *msg)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
	//Check for busy state
	if(huart2.gState == HAL_UART_STATE_READY){
 8003590:	4b1e      	ldr	r3, [pc, #120]	; (800360c <USART2_sendString+0x84>)
 8003592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b20      	cmp	r3, #32
 800359a:	d131      	bne.n	8003600 <USART2_sendString+0x78>
		//Allocate memory for string preparation
		char *preparedStr = malloc(sizeof(char)* (strlen(msg) + 32));
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7fc fe17 	bl	80001d0 <strlen>
 80035a2:	4603      	mov	r3, r0
 80035a4:	3320      	adds	r3, #32
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 f878 	bl	800369c <malloc>
 80035ac:	4603      	mov	r3, r0
 80035ae:	60fb      	str	r3, [r7, #12]

		//Prepare a string with a line break + carriage return
		strcpy(preparedStr, msg);
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f989 	bl	80038ca <strcpy>
		strcat(preparedStr, "\n\r");
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f7fc fe09 	bl	80001d0 <strlen>
 80035be:	4603      	mov	r3, r0
 80035c0:	461a      	mov	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4413      	add	r3, r2
 80035c6:	4a12      	ldr	r2, [pc, #72]	; (8003610 <USART2_sendString+0x88>)
 80035c8:	8811      	ldrh	r1, [r2, #0]
 80035ca:	7892      	ldrb	r2, [r2, #2]
 80035cc:	8019      	strh	r1, [r3, #0]
 80035ce:	709a      	strb	r2, [r3, #2]

		// Transmit prepared message to USART2
#if !UART_USE_IT
		HAL_StatusTypeDef txStatus = HAL_UART_Transmit( &huart2,
														(uint8_t*) preparedStr,
														strlen(preparedStr),
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f7fc fdfd 	bl	80001d0 <strlen>
 80035d6:	4603      	mov	r3, r0
		HAL_StatusTypeDef txStatus = HAL_UART_Transmit( &huart2,
 80035d8:	b29a      	uxth	r2, r3
 80035da:	f241 3388 	movw	r3, #5000	; 0x1388
 80035de:	68f9      	ldr	r1, [r7, #12]
 80035e0:	480a      	ldr	r0, [pc, #40]	; (800360c <USART2_sendString+0x84>)
 80035e2:	f7fe f9f0 	bl	80019c6 <HAL_UART_Transmit>
 80035e6:	4603      	mov	r3, r0
 80035e8:	72fb      	strb	r3, [r7, #11]
		HAL_StatusTypeDef txStatus = HAL_UART_Transmit_IT( &huart2,
												(uint8_t*) preparedStr,
														strlen(preparedStr));
#endif

		free(preparedStr);
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f85e 	bl	80036ac <free>
		if(txStatus == HAL_OK) { return 0; }
 80035f0:	7afb      	ldrb	r3, [r7, #11]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <USART2_sendString+0x72>
 80035f6:	2300      	movs	r3, #0
 80035f8:	e004      	b.n	8003604 <USART2_sendString+0x7c>
		else{ return -1; }
 80035fa:	f04f 33ff 	mov.w	r3, #4294967295
 80035fe:	e001      	b.n	8003604 <USART2_sendString+0x7c>
	}
	else{
		return -1;
 8003600:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	200002fc 	.word	0x200002fc
 8003610:	080039d0 	.word	0x080039d0

08003614 <__errno>:
 8003614:	4b01      	ldr	r3, [pc, #4]	; (800361c <__errno+0x8>)
 8003616:	6818      	ldr	r0, [r3, #0]
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	20000010 	.word	0x20000010

08003620 <__libc_init_array>:
 8003620:	b570      	push	{r4, r5, r6, lr}
 8003622:	4d0d      	ldr	r5, [pc, #52]	; (8003658 <__libc_init_array+0x38>)
 8003624:	4c0d      	ldr	r4, [pc, #52]	; (800365c <__libc_init_array+0x3c>)
 8003626:	1b64      	subs	r4, r4, r5
 8003628:	10a4      	asrs	r4, r4, #2
 800362a:	2600      	movs	r6, #0
 800362c:	42a6      	cmp	r6, r4
 800362e:	d109      	bne.n	8003644 <__libc_init_array+0x24>
 8003630:	4d0b      	ldr	r5, [pc, #44]	; (8003660 <__libc_init_array+0x40>)
 8003632:	4c0c      	ldr	r4, [pc, #48]	; (8003664 <__libc_init_array+0x44>)
 8003634:	f000 f9a2 	bl	800397c <_init>
 8003638:	1b64      	subs	r4, r4, r5
 800363a:	10a4      	asrs	r4, r4, #2
 800363c:	2600      	movs	r6, #0
 800363e:	42a6      	cmp	r6, r4
 8003640:	d105      	bne.n	800364e <__libc_init_array+0x2e>
 8003642:	bd70      	pop	{r4, r5, r6, pc}
 8003644:	f855 3b04 	ldr.w	r3, [r5], #4
 8003648:	4798      	blx	r3
 800364a:	3601      	adds	r6, #1
 800364c:	e7ee      	b.n	800362c <__libc_init_array+0xc>
 800364e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003652:	4798      	blx	r3
 8003654:	3601      	adds	r6, #1
 8003656:	e7f2      	b.n	800363e <__libc_init_array+0x1e>
 8003658:	08003a1c 	.word	0x08003a1c
 800365c:	08003a1c 	.word	0x08003a1c
 8003660:	08003a1c 	.word	0x08003a1c
 8003664:	08003a20 	.word	0x08003a20

08003668 <__itoa>:
 8003668:	1e93      	subs	r3, r2, #2
 800366a:	2b22      	cmp	r3, #34	; 0x22
 800366c:	b510      	push	{r4, lr}
 800366e:	460c      	mov	r4, r1
 8003670:	d904      	bls.n	800367c <__itoa+0x14>
 8003672:	2300      	movs	r3, #0
 8003674:	700b      	strb	r3, [r1, #0]
 8003676:	461c      	mov	r4, r3
 8003678:	4620      	mov	r0, r4
 800367a:	bd10      	pop	{r4, pc}
 800367c:	2a0a      	cmp	r2, #10
 800367e:	d109      	bne.n	8003694 <__itoa+0x2c>
 8003680:	2800      	cmp	r0, #0
 8003682:	da07      	bge.n	8003694 <__itoa+0x2c>
 8003684:	232d      	movs	r3, #45	; 0x2d
 8003686:	700b      	strb	r3, [r1, #0]
 8003688:	4240      	negs	r0, r0
 800368a:	2101      	movs	r1, #1
 800368c:	4421      	add	r1, r4
 800368e:	f000 f925 	bl	80038dc <__utoa>
 8003692:	e7f1      	b.n	8003678 <__itoa+0x10>
 8003694:	2100      	movs	r1, #0
 8003696:	e7f9      	b.n	800368c <__itoa+0x24>

08003698 <itoa>:
 8003698:	f7ff bfe6 	b.w	8003668 <__itoa>

0800369c <malloc>:
 800369c:	4b02      	ldr	r3, [pc, #8]	; (80036a8 <malloc+0xc>)
 800369e:	4601      	mov	r1, r0
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	f000 b87f 	b.w	80037a4 <_malloc_r>
 80036a6:	bf00      	nop
 80036a8:	20000010 	.word	0x20000010

080036ac <free>:
 80036ac:	4b02      	ldr	r3, [pc, #8]	; (80036b8 <free+0xc>)
 80036ae:	4601      	mov	r1, r0
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	f000 b80b 	b.w	80036cc <_free_r>
 80036b6:	bf00      	nop
 80036b8:	20000010 	.word	0x20000010

080036bc <memset>:
 80036bc:	4402      	add	r2, r0
 80036be:	4603      	mov	r3, r0
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d100      	bne.n	80036c6 <memset+0xa>
 80036c4:	4770      	bx	lr
 80036c6:	f803 1b01 	strb.w	r1, [r3], #1
 80036ca:	e7f9      	b.n	80036c0 <memset+0x4>

080036cc <_free_r>:
 80036cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036ce:	2900      	cmp	r1, #0
 80036d0:	d044      	beq.n	800375c <_free_r+0x90>
 80036d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036d6:	9001      	str	r0, [sp, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f1a1 0404 	sub.w	r4, r1, #4
 80036de:	bfb8      	it	lt
 80036e0:	18e4      	addlt	r4, r4, r3
 80036e2:	f000 f93d 	bl	8003960 <__malloc_lock>
 80036e6:	4a1e      	ldr	r2, [pc, #120]	; (8003760 <_free_r+0x94>)
 80036e8:	9801      	ldr	r0, [sp, #4]
 80036ea:	6813      	ldr	r3, [r2, #0]
 80036ec:	b933      	cbnz	r3, 80036fc <_free_r+0x30>
 80036ee:	6063      	str	r3, [r4, #4]
 80036f0:	6014      	str	r4, [r2, #0]
 80036f2:	b003      	add	sp, #12
 80036f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80036f8:	f000 b938 	b.w	800396c <__malloc_unlock>
 80036fc:	42a3      	cmp	r3, r4
 80036fe:	d908      	bls.n	8003712 <_free_r+0x46>
 8003700:	6825      	ldr	r5, [r4, #0]
 8003702:	1961      	adds	r1, r4, r5
 8003704:	428b      	cmp	r3, r1
 8003706:	bf01      	itttt	eq
 8003708:	6819      	ldreq	r1, [r3, #0]
 800370a:	685b      	ldreq	r3, [r3, #4]
 800370c:	1949      	addeq	r1, r1, r5
 800370e:	6021      	streq	r1, [r4, #0]
 8003710:	e7ed      	b.n	80036ee <_free_r+0x22>
 8003712:	461a      	mov	r2, r3
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	b10b      	cbz	r3, 800371c <_free_r+0x50>
 8003718:	42a3      	cmp	r3, r4
 800371a:	d9fa      	bls.n	8003712 <_free_r+0x46>
 800371c:	6811      	ldr	r1, [r2, #0]
 800371e:	1855      	adds	r5, r2, r1
 8003720:	42a5      	cmp	r5, r4
 8003722:	d10b      	bne.n	800373c <_free_r+0x70>
 8003724:	6824      	ldr	r4, [r4, #0]
 8003726:	4421      	add	r1, r4
 8003728:	1854      	adds	r4, r2, r1
 800372a:	42a3      	cmp	r3, r4
 800372c:	6011      	str	r1, [r2, #0]
 800372e:	d1e0      	bne.n	80036f2 <_free_r+0x26>
 8003730:	681c      	ldr	r4, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	6053      	str	r3, [r2, #4]
 8003736:	4421      	add	r1, r4
 8003738:	6011      	str	r1, [r2, #0]
 800373a:	e7da      	b.n	80036f2 <_free_r+0x26>
 800373c:	d902      	bls.n	8003744 <_free_r+0x78>
 800373e:	230c      	movs	r3, #12
 8003740:	6003      	str	r3, [r0, #0]
 8003742:	e7d6      	b.n	80036f2 <_free_r+0x26>
 8003744:	6825      	ldr	r5, [r4, #0]
 8003746:	1961      	adds	r1, r4, r5
 8003748:	428b      	cmp	r3, r1
 800374a:	bf04      	itt	eq
 800374c:	6819      	ldreq	r1, [r3, #0]
 800374e:	685b      	ldreq	r3, [r3, #4]
 8003750:	6063      	str	r3, [r4, #4]
 8003752:	bf04      	itt	eq
 8003754:	1949      	addeq	r1, r1, r5
 8003756:	6021      	streq	r1, [r4, #0]
 8003758:	6054      	str	r4, [r2, #4]
 800375a:	e7ca      	b.n	80036f2 <_free_r+0x26>
 800375c:	b003      	add	sp, #12
 800375e:	bd30      	pop	{r4, r5, pc}
 8003760:	20004098 	.word	0x20004098

08003764 <sbrk_aligned>:
 8003764:	b570      	push	{r4, r5, r6, lr}
 8003766:	4e0e      	ldr	r6, [pc, #56]	; (80037a0 <sbrk_aligned+0x3c>)
 8003768:	460c      	mov	r4, r1
 800376a:	6831      	ldr	r1, [r6, #0]
 800376c:	4605      	mov	r5, r0
 800376e:	b911      	cbnz	r1, 8003776 <sbrk_aligned+0x12>
 8003770:	f000 f88c 	bl	800388c <_sbrk_r>
 8003774:	6030      	str	r0, [r6, #0]
 8003776:	4621      	mov	r1, r4
 8003778:	4628      	mov	r0, r5
 800377a:	f000 f887 	bl	800388c <_sbrk_r>
 800377e:	1c43      	adds	r3, r0, #1
 8003780:	d00a      	beq.n	8003798 <sbrk_aligned+0x34>
 8003782:	1cc4      	adds	r4, r0, #3
 8003784:	f024 0403 	bic.w	r4, r4, #3
 8003788:	42a0      	cmp	r0, r4
 800378a:	d007      	beq.n	800379c <sbrk_aligned+0x38>
 800378c:	1a21      	subs	r1, r4, r0
 800378e:	4628      	mov	r0, r5
 8003790:	f000 f87c 	bl	800388c <_sbrk_r>
 8003794:	3001      	adds	r0, #1
 8003796:	d101      	bne.n	800379c <sbrk_aligned+0x38>
 8003798:	f04f 34ff 	mov.w	r4, #4294967295
 800379c:	4620      	mov	r0, r4
 800379e:	bd70      	pop	{r4, r5, r6, pc}
 80037a0:	2000409c 	.word	0x2000409c

080037a4 <_malloc_r>:
 80037a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037a8:	1ccd      	adds	r5, r1, #3
 80037aa:	f025 0503 	bic.w	r5, r5, #3
 80037ae:	3508      	adds	r5, #8
 80037b0:	2d0c      	cmp	r5, #12
 80037b2:	bf38      	it	cc
 80037b4:	250c      	movcc	r5, #12
 80037b6:	2d00      	cmp	r5, #0
 80037b8:	4607      	mov	r7, r0
 80037ba:	db01      	blt.n	80037c0 <_malloc_r+0x1c>
 80037bc:	42a9      	cmp	r1, r5
 80037be:	d905      	bls.n	80037cc <_malloc_r+0x28>
 80037c0:	230c      	movs	r3, #12
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	2600      	movs	r6, #0
 80037c6:	4630      	mov	r0, r6
 80037c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037cc:	4e2e      	ldr	r6, [pc, #184]	; (8003888 <_malloc_r+0xe4>)
 80037ce:	f000 f8c7 	bl	8003960 <__malloc_lock>
 80037d2:	6833      	ldr	r3, [r6, #0]
 80037d4:	461c      	mov	r4, r3
 80037d6:	bb34      	cbnz	r4, 8003826 <_malloc_r+0x82>
 80037d8:	4629      	mov	r1, r5
 80037da:	4638      	mov	r0, r7
 80037dc:	f7ff ffc2 	bl	8003764 <sbrk_aligned>
 80037e0:	1c43      	adds	r3, r0, #1
 80037e2:	4604      	mov	r4, r0
 80037e4:	d14d      	bne.n	8003882 <_malloc_r+0xde>
 80037e6:	6834      	ldr	r4, [r6, #0]
 80037e8:	4626      	mov	r6, r4
 80037ea:	2e00      	cmp	r6, #0
 80037ec:	d140      	bne.n	8003870 <_malloc_r+0xcc>
 80037ee:	6823      	ldr	r3, [r4, #0]
 80037f0:	4631      	mov	r1, r6
 80037f2:	4638      	mov	r0, r7
 80037f4:	eb04 0803 	add.w	r8, r4, r3
 80037f8:	f000 f848 	bl	800388c <_sbrk_r>
 80037fc:	4580      	cmp	r8, r0
 80037fe:	d13a      	bne.n	8003876 <_malloc_r+0xd2>
 8003800:	6821      	ldr	r1, [r4, #0]
 8003802:	3503      	adds	r5, #3
 8003804:	1a6d      	subs	r5, r5, r1
 8003806:	f025 0503 	bic.w	r5, r5, #3
 800380a:	3508      	adds	r5, #8
 800380c:	2d0c      	cmp	r5, #12
 800380e:	bf38      	it	cc
 8003810:	250c      	movcc	r5, #12
 8003812:	4629      	mov	r1, r5
 8003814:	4638      	mov	r0, r7
 8003816:	f7ff ffa5 	bl	8003764 <sbrk_aligned>
 800381a:	3001      	adds	r0, #1
 800381c:	d02b      	beq.n	8003876 <_malloc_r+0xd2>
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	442b      	add	r3, r5
 8003822:	6023      	str	r3, [r4, #0]
 8003824:	e00e      	b.n	8003844 <_malloc_r+0xa0>
 8003826:	6822      	ldr	r2, [r4, #0]
 8003828:	1b52      	subs	r2, r2, r5
 800382a:	d41e      	bmi.n	800386a <_malloc_r+0xc6>
 800382c:	2a0b      	cmp	r2, #11
 800382e:	d916      	bls.n	800385e <_malloc_r+0xba>
 8003830:	1961      	adds	r1, r4, r5
 8003832:	42a3      	cmp	r3, r4
 8003834:	6025      	str	r5, [r4, #0]
 8003836:	bf18      	it	ne
 8003838:	6059      	strne	r1, [r3, #4]
 800383a:	6863      	ldr	r3, [r4, #4]
 800383c:	bf08      	it	eq
 800383e:	6031      	streq	r1, [r6, #0]
 8003840:	5162      	str	r2, [r4, r5]
 8003842:	604b      	str	r3, [r1, #4]
 8003844:	4638      	mov	r0, r7
 8003846:	f104 060b 	add.w	r6, r4, #11
 800384a:	f000 f88f 	bl	800396c <__malloc_unlock>
 800384e:	f026 0607 	bic.w	r6, r6, #7
 8003852:	1d23      	adds	r3, r4, #4
 8003854:	1af2      	subs	r2, r6, r3
 8003856:	d0b6      	beq.n	80037c6 <_malloc_r+0x22>
 8003858:	1b9b      	subs	r3, r3, r6
 800385a:	50a3      	str	r3, [r4, r2]
 800385c:	e7b3      	b.n	80037c6 <_malloc_r+0x22>
 800385e:	6862      	ldr	r2, [r4, #4]
 8003860:	42a3      	cmp	r3, r4
 8003862:	bf0c      	ite	eq
 8003864:	6032      	streq	r2, [r6, #0]
 8003866:	605a      	strne	r2, [r3, #4]
 8003868:	e7ec      	b.n	8003844 <_malloc_r+0xa0>
 800386a:	4623      	mov	r3, r4
 800386c:	6864      	ldr	r4, [r4, #4]
 800386e:	e7b2      	b.n	80037d6 <_malloc_r+0x32>
 8003870:	4634      	mov	r4, r6
 8003872:	6876      	ldr	r6, [r6, #4]
 8003874:	e7b9      	b.n	80037ea <_malloc_r+0x46>
 8003876:	230c      	movs	r3, #12
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	4638      	mov	r0, r7
 800387c:	f000 f876 	bl	800396c <__malloc_unlock>
 8003880:	e7a1      	b.n	80037c6 <_malloc_r+0x22>
 8003882:	6025      	str	r5, [r4, #0]
 8003884:	e7de      	b.n	8003844 <_malloc_r+0xa0>
 8003886:	bf00      	nop
 8003888:	20004098 	.word	0x20004098

0800388c <_sbrk_r>:
 800388c:	b538      	push	{r3, r4, r5, lr}
 800388e:	4d06      	ldr	r5, [pc, #24]	; (80038a8 <_sbrk_r+0x1c>)
 8003890:	2300      	movs	r3, #0
 8003892:	4604      	mov	r4, r0
 8003894:	4608      	mov	r0, r1
 8003896:	602b      	str	r3, [r5, #0]
 8003898:	f7fc ffe4 	bl	8000864 <_sbrk>
 800389c:	1c43      	adds	r3, r0, #1
 800389e:	d102      	bne.n	80038a6 <_sbrk_r+0x1a>
 80038a0:	682b      	ldr	r3, [r5, #0]
 80038a2:	b103      	cbz	r3, 80038a6 <_sbrk_r+0x1a>
 80038a4:	6023      	str	r3, [r4, #0]
 80038a6:	bd38      	pop	{r3, r4, r5, pc}
 80038a8:	200040a0 	.word	0x200040a0

080038ac <strcat>:
 80038ac:	b510      	push	{r4, lr}
 80038ae:	4602      	mov	r2, r0
 80038b0:	7814      	ldrb	r4, [r2, #0]
 80038b2:	4613      	mov	r3, r2
 80038b4:	3201      	adds	r2, #1
 80038b6:	2c00      	cmp	r4, #0
 80038b8:	d1fa      	bne.n	80038b0 <strcat+0x4>
 80038ba:	3b01      	subs	r3, #1
 80038bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038c4:	2a00      	cmp	r2, #0
 80038c6:	d1f9      	bne.n	80038bc <strcat+0x10>
 80038c8:	bd10      	pop	{r4, pc}

080038ca <strcpy>:
 80038ca:	4603      	mov	r3, r0
 80038cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038d0:	f803 2b01 	strb.w	r2, [r3], #1
 80038d4:	2a00      	cmp	r2, #0
 80038d6:	d1f9      	bne.n	80038cc <strcpy+0x2>
 80038d8:	4770      	bx	lr
	...

080038dc <__utoa>:
 80038dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038de:	4c1f      	ldr	r4, [pc, #124]	; (800395c <__utoa+0x80>)
 80038e0:	b08b      	sub	sp, #44	; 0x2c
 80038e2:	4605      	mov	r5, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	466e      	mov	r6, sp
 80038e8:	f104 0c20 	add.w	ip, r4, #32
 80038ec:	6820      	ldr	r0, [r4, #0]
 80038ee:	6861      	ldr	r1, [r4, #4]
 80038f0:	4637      	mov	r7, r6
 80038f2:	c703      	stmia	r7!, {r0, r1}
 80038f4:	3408      	adds	r4, #8
 80038f6:	4564      	cmp	r4, ip
 80038f8:	463e      	mov	r6, r7
 80038fa:	d1f7      	bne.n	80038ec <__utoa+0x10>
 80038fc:	7921      	ldrb	r1, [r4, #4]
 80038fe:	7139      	strb	r1, [r7, #4]
 8003900:	1e91      	subs	r1, r2, #2
 8003902:	6820      	ldr	r0, [r4, #0]
 8003904:	6038      	str	r0, [r7, #0]
 8003906:	2922      	cmp	r1, #34	; 0x22
 8003908:	f04f 0100 	mov.w	r1, #0
 800390c:	d904      	bls.n	8003918 <__utoa+0x3c>
 800390e:	7019      	strb	r1, [r3, #0]
 8003910:	460b      	mov	r3, r1
 8003912:	4618      	mov	r0, r3
 8003914:	b00b      	add	sp, #44	; 0x2c
 8003916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003918:	1e58      	subs	r0, r3, #1
 800391a:	4684      	mov	ip, r0
 800391c:	fbb5 f7f2 	udiv	r7, r5, r2
 8003920:	fb02 5617 	mls	r6, r2, r7, r5
 8003924:	3628      	adds	r6, #40	; 0x28
 8003926:	446e      	add	r6, sp
 8003928:	460c      	mov	r4, r1
 800392a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800392e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003932:	462e      	mov	r6, r5
 8003934:	42b2      	cmp	r2, r6
 8003936:	f101 0101 	add.w	r1, r1, #1
 800393a:	463d      	mov	r5, r7
 800393c:	d9ee      	bls.n	800391c <__utoa+0x40>
 800393e:	2200      	movs	r2, #0
 8003940:	545a      	strb	r2, [r3, r1]
 8003942:	1919      	adds	r1, r3, r4
 8003944:	1aa5      	subs	r5, r4, r2
 8003946:	42aa      	cmp	r2, r5
 8003948:	dae3      	bge.n	8003912 <__utoa+0x36>
 800394a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800394e:	780e      	ldrb	r6, [r1, #0]
 8003950:	7006      	strb	r6, [r0, #0]
 8003952:	3201      	adds	r2, #1
 8003954:	f801 5901 	strb.w	r5, [r1], #-1
 8003958:	e7f4      	b.n	8003944 <__utoa+0x68>
 800395a:	bf00      	nop
 800395c:	080039ec 	.word	0x080039ec

08003960 <__malloc_lock>:
 8003960:	4801      	ldr	r0, [pc, #4]	; (8003968 <__malloc_lock+0x8>)
 8003962:	f000 b809 	b.w	8003978 <__retarget_lock_acquire_recursive>
 8003966:	bf00      	nop
 8003968:	200040a4 	.word	0x200040a4

0800396c <__malloc_unlock>:
 800396c:	4801      	ldr	r0, [pc, #4]	; (8003974 <__malloc_unlock+0x8>)
 800396e:	f000 b804 	b.w	800397a <__retarget_lock_release_recursive>
 8003972:	bf00      	nop
 8003974:	200040a4 	.word	0x200040a4

08003978 <__retarget_lock_acquire_recursive>:
 8003978:	4770      	bx	lr

0800397a <__retarget_lock_release_recursive>:
 800397a:	4770      	bx	lr

0800397c <_init>:
 800397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397e:	bf00      	nop
 8003980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003982:	bc08      	pop	{r3}
 8003984:	469e      	mov	lr, r3
 8003986:	4770      	bx	lr

08003988 <_fini>:
 8003988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398a:	bf00      	nop
 800398c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800398e:	bc08      	pop	{r3}
 8003990:	469e      	mov	lr, r3
 8003992:	4770      	bx	lr
